// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentencepiece.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sentencepiece.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sentencepiece {

void protobuf_ShutdownFile_sentencepiece_2eproto() {
  SentencePieceText_default_instance_.Shutdown();
  SentencePieceText_SentencePiece_default_instance_.Shutdown();
  NBestSentencePieceText_default_instance_.Shutdown();
}

void protobuf_InitDefaults_sentencepiece_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SentencePieceText_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SentencePieceText_SentencePiece_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NBestSentencePieceText_default_instance_.DefaultConstruct();
  SentencePieceText_default_instance_.get_mutable()->InitAsDefaultInstance();
  SentencePieceText_SentencePiece_default_instance_.get_mutable()->InitAsDefaultInstance();
  NBestSentencePieceText_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sentencepiece_2eproto_once_);
void protobuf_InitDefaults_sentencepiece_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sentencepiece_2eproto_once_,
                 &protobuf_InitDefaults_sentencepiece_2eproto_impl);
}
void protobuf_AddDesc_sentencepiece_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sentencepiece_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sentencepiece_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sentencepiece_2eproto_once_);
void protobuf_AddDesc_sentencepiece_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sentencepiece_2eproto_once_,
                 &protobuf_AddDesc_sentencepiece_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sentencepiece_2eproto {
  StaticDescriptorInitializer_sentencepiece_2eproto() {
    protobuf_AddDesc_sentencepiece_2eproto();
  }
} static_descriptor_initializer_sentencepiece_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForSentencePieceText(
    SentencePieceText* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSentencePieceText_SentencePiece(
    SentencePieceText_SentencePiece* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SentencePieceText_SentencePiece::kPieceFieldNumber;
const int SentencePieceText_SentencePiece::kIdFieldNumber;
const int SentencePieceText_SentencePiece::kSurfaceFieldNumber;
const int SentencePieceText_SentencePiece::kBeginFieldNumber;
const int SentencePieceText_SentencePiece::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SentencePieceText_SentencePiece::SentencePieceText_SentencePiece()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.SentencePieceText.SentencePiece)
}

void SentencePieceText_SentencePiece::InitAsDefaultInstance() {
}

SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(const SentencePieceText_SentencePiece& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SentencePieceText.SentencePiece)
}

void SentencePieceText_SentencePiece::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  piece_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&id_) + sizeof(end_));
}

SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece() {
  // @@protoc_insertion_point(destructor:sentencepiece.SentencePieceText.SentencePiece)
  SharedDtor();
}

void SentencePieceText_SentencePiece::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  piece_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SentencePieceText_SentencePiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SentencePieceText_SentencePiece& SentencePieceText_SentencePiece::default_instance() {
  protobuf_InitDefaults_sentencepiece_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SentencePieceText_SentencePiece> SentencePieceText_SentencePiece_default_instance_;

SentencePieceText_SentencePiece* SentencePieceText_SentencePiece::New(::google::protobuf::Arena* arena) const {
  SentencePieceText_SentencePiece* n = new SentencePieceText_SentencePiece;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SentencePieceText_SentencePiece::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SentencePieceText.SentencePiece)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SentencePieceText_SentencePiece, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SentencePieceText_SentencePiece*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, end_);
    if (has_piece()) {
      piece_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_surface()) {
      surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SentencePieceText_SentencePiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSentencePieceText_SentencePiece, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.SentencePieceText.SentencePiece)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string piece = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_surface;
        break;
      }

      // optional string surface = 3;
      case 3: {
        if (tag == 26) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begin;
        break;
      }

      // optional uint32 begin = 4;
      case 4: {
        if (tag == 32) {
         parse_begin:
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // optional uint32 end = 5;
      case 5: {
        if (tag == 40) {
         parse_end:
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.SentencePieceText.SentencePiece)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.SentencePieceText.SentencePiece)
  return false;
#undef DO_
}

void SentencePieceText_SentencePiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.SentencePieceText.SentencePiece)
  // optional string piece = 1;
  if (has_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->piece(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional string surface = 3;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->surface(), output);
  }

  // optional uint32 begin = 4;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begin(), output);
  }

  // optional uint32 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.SentencePieceText.SentencePiece)
}

size_t SentencePieceText_SentencePiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SentencePieceText.SentencePiece)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string piece = 1;
    if (has_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->piece());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string surface = 3;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surface());
    }

    // optional uint32 begin = 4;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }

    // optional uint32 end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

  }
  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SentencePieceText_SentencePiece*>(&from));
}

void SentencePieceText_SentencePiece::MergeFrom(const SentencePieceText_SentencePiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SentencePieceText.SentencePiece)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SentencePieceText_SentencePiece::UnsafeMergeFrom(const SentencePieceText_SentencePiece& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piece()) {
      set_has_piece();
      piece_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.piece_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_surface()) {
      set_has_surface();
      surface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surface_);
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SentencePieceText_SentencePiece::CopyFrom(const SentencePieceText_SentencePiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SentencePieceText.SentencePiece)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SentencePieceText_SentencePiece::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void SentencePieceText_SentencePiece::Swap(SentencePieceText_SentencePiece* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SentencePieceText_SentencePiece::InternalSwap(SentencePieceText_SentencePiece* other) {
  piece_.Swap(&other->piece_);
  std::swap(id_, other->id_);
  surface_.Swap(&other->surface_);
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string SentencePieceText_SentencePiece::GetTypeName() const {
  return "sentencepiece.SentencePieceText.SentencePiece";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SentencePieceText::kTextFieldNumber;
const int SentencePieceText::kPiecesFieldNumber;
const int SentencePieceText::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SentencePieceText::SentencePieceText()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.SentencePieceText)
}

void SentencePieceText::InitAsDefaultInstance() {
}

SentencePieceText::SentencePieceText(const SentencePieceText& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SentencePieceText)
}

void SentencePieceText::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

SentencePieceText::~SentencePieceText() {
  // @@protoc_insertion_point(destructor:sentencepiece.SentencePieceText)
  SharedDtor();
}

void SentencePieceText::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SentencePieceText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SentencePieceText& SentencePieceText::default_instance() {
  protobuf_InitDefaults_sentencepiece_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SentencePieceText> SentencePieceText_default_instance_;

SentencePieceText* SentencePieceText::New(::google::protobuf::Arena* arena) const {
  SentencePieceText* n = new SentencePieceText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SentencePieceText::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SentencePieceText)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5u) {
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    score_ = 0;
  }
  pieces_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SentencePieceText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSentencePieceText, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.SentencePieceText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pieces;
        break;
      }

      // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
      case 2: {
        if (tag == 18) {
         parse_pieces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pieces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pieces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pieces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (tag == 29) {
         parse_score:
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.SentencePieceText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.SentencePieceText)
  return false;
#undef DO_
}

void SentencePieceText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.SentencePieceText)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
  for (unsigned int i = 0, n = this->pieces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pieces(i), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.SentencePieceText)
}

size_t SentencePieceText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SentencePieceText)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
  {
    unsigned int count = this->pieces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pieces(i));
    }
  }

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SentencePieceText::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SentencePieceText*>(&from));
}

void SentencePieceText::MergeFrom(const SentencePieceText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SentencePieceText)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SentencePieceText::UnsafeMergeFrom(const SentencePieceText& from) {
  GOOGLE_DCHECK(&from != this);
  pieces_.MergeFrom(from.pieces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SentencePieceText::CopyFrom(const SentencePieceText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SentencePieceText)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SentencePieceText::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pieces())) return false;

  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void SentencePieceText::Swap(SentencePieceText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SentencePieceText::InternalSwap(SentencePieceText* other) {
  text_.Swap(&other->text_);
  pieces_.UnsafeArenaSwap(&other->pieces_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string SentencePieceText::GetTypeName() const {
  return "sentencepiece.SentencePieceText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SentencePieceText_SentencePiece

// optional string piece = 1;
bool SentencePieceText_SentencePiece::has_piece() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SentencePieceText_SentencePiece::set_has_piece() {
  _has_bits_[0] |= 0x00000001u;
}
void SentencePieceText_SentencePiece::clear_has_piece() {
  _has_bits_[0] &= ~0x00000001u;
}
void SentencePieceText_SentencePiece::clear_piece() {
  piece_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_piece();
}
const ::std::string& SentencePieceText_SentencePiece::piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.piece)
  return piece_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText_SentencePiece::set_piece(const ::std::string& value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.piece)
}
void SentencePieceText_SentencePiece::set_piece(const char* value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.piece)
}
void SentencePieceText_SentencePiece::set_piece(const char* value, size_t size) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.piece)
}
::std::string* SentencePieceText_SentencePiece::mutable_piece() {
  set_has_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.piece)
  return piece_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SentencePieceText_SentencePiece::release_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.piece)
  clear_has_piece();
  return piece_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText_SentencePiece::set_allocated_piece(::std::string* piece) {
  if (piece != NULL) {
    set_has_piece();
  } else {
    clear_has_piece();
  }
  piece_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.piece)
}

// optional uint32 id = 2;
bool SentencePieceText_SentencePiece::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SentencePieceText_SentencePiece::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SentencePieceText_SentencePiece::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SentencePieceText_SentencePiece::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 SentencePieceText_SentencePiece::id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.id)
  return id_;
}
void SentencePieceText_SentencePiece::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.id)
}

// optional string surface = 3;
bool SentencePieceText_SentencePiece::has_surface() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SentencePieceText_SentencePiece::set_has_surface() {
  _has_bits_[0] |= 0x00000004u;
}
void SentencePieceText_SentencePiece::clear_has_surface() {
  _has_bits_[0] &= ~0x00000004u;
}
void SentencePieceText_SentencePiece::clear_surface() {
  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_surface();
}
const ::std::string& SentencePieceText_SentencePiece::surface() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.surface)
  return surface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText_SentencePiece::set_surface(const ::std::string& value) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.surface)
}
void SentencePieceText_SentencePiece::set_surface(const char* value) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.surface)
}
void SentencePieceText_SentencePiece::set_surface(const char* value, size_t size) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.surface)
}
::std::string* SentencePieceText_SentencePiece::mutable_surface() {
  set_has_surface();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.surface)
  return surface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SentencePieceText_SentencePiece::release_surface() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.surface)
  clear_has_surface();
  return surface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText_SentencePiece::set_allocated_surface(::std::string* surface) {
  if (surface != NULL) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  surface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), surface);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.surface)
}

// optional uint32 begin = 4;
bool SentencePieceText_SentencePiece::has_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SentencePieceText_SentencePiece::set_has_begin() {
  _has_bits_[0] |= 0x00000008u;
}
void SentencePieceText_SentencePiece::clear_has_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
void SentencePieceText_SentencePiece::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
::google::protobuf::uint32 SentencePieceText_SentencePiece::begin() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.begin)
  return begin_;
}
void SentencePieceText_SentencePiece::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.begin)
}

// optional uint32 end = 5;
bool SentencePieceText_SentencePiece::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SentencePieceText_SentencePiece::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
void SentencePieceText_SentencePiece::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
void SentencePieceText_SentencePiece::clear_end() {
  end_ = 0u;
  clear_has_end();
}
::google::protobuf::uint32 SentencePieceText_SentencePiece::end() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.end)
  return end_;
}
void SentencePieceText_SentencePiece::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.end)
}

inline const SentencePieceText_SentencePiece* SentencePieceText_SentencePiece::internal_default_instance() {
  return &SentencePieceText_SentencePiece_default_instance_.get();
}
// -------------------------------------------------------------------

// SentencePieceText

// optional string text = 1;
bool SentencePieceText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SentencePieceText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SentencePieceText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SentencePieceText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& SentencePieceText::text() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.text)
}
void SentencePieceText::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.text)
}
void SentencePieceText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.text)
}
::std::string* SentencePieceText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SentencePieceText::release_text() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SentencePieceText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.text)
}

// repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
int SentencePieceText::pieces_size() const {
  return pieces_.size();
}
void SentencePieceText::clear_pieces() {
  pieces_.Clear();
}
const ::sentencepiece::SentencePieceText_SentencePiece& SentencePieceText::pieces(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.pieces)
  return pieces_.Get(index);
}
::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::mutable_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.pieces)
  return pieces_.Mutable(index);
}
::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::add_pieces() {
  // @@protoc_insertion_point(field_add:sentencepiece.SentencePieceText.pieces)
  return pieces_.Add();
}
::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >*
SentencePieceText::mutable_pieces() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.SentencePieceText.pieces)
  return &pieces_;
}
const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >&
SentencePieceText::pieces() const {
  // @@protoc_insertion_point(field_list:sentencepiece.SentencePieceText.pieces)
  return pieces_;
}

// optional float score = 3;
bool SentencePieceText::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SentencePieceText::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SentencePieceText::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SentencePieceText::clear_score() {
  score_ = 0;
  clear_has_score();
}
float SentencePieceText::score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.score)
  return score_;
}
void SentencePieceText::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.score)
}

inline const SentencePieceText* SentencePieceText::internal_default_instance() {
  return &SentencePieceText_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNBestSentencePieceText(
    NBestSentencePieceText* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NBestSentencePieceText::kNbestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NBestSentencePieceText::NBestSentencePieceText()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.NBestSentencePieceText)
}

void NBestSentencePieceText::InitAsDefaultInstance() {
}

NBestSentencePieceText::NBestSentencePieceText(const NBestSentencePieceText& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.NBestSentencePieceText)
}

void NBestSentencePieceText::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NBestSentencePieceText::~NBestSentencePieceText() {
  // @@protoc_insertion_point(destructor:sentencepiece.NBestSentencePieceText)
  SharedDtor();
}

void NBestSentencePieceText::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NBestSentencePieceText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NBestSentencePieceText& NBestSentencePieceText::default_instance() {
  protobuf_InitDefaults_sentencepiece_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NBestSentencePieceText> NBestSentencePieceText_default_instance_;

NBestSentencePieceText* NBestSentencePieceText::New(::google::protobuf::Arena* arena) const {
  NBestSentencePieceText* n = new NBestSentencePieceText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NBestSentencePieceText::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.NBestSentencePieceText)
  nbests_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NBestSentencePieceText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForNBestSentencePieceText, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.NBestSentencePieceText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sentencepiece.SentencePieceText nbests = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nbests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nbests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nbests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.NBestSentencePieceText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.NBestSentencePieceText)
  return false;
#undef DO_
}

void NBestSentencePieceText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.NBestSentencePieceText)
  // repeated .sentencepiece.SentencePieceText nbests = 1;
  for (unsigned int i = 0, n = this->nbests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->nbests(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.NBestSentencePieceText)
}

size_t NBestSentencePieceText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.NBestSentencePieceText)
  size_t total_size = 0;

  // repeated .sentencepiece.SentencePieceText nbests = 1;
  {
    unsigned int count = this->nbests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nbests(i));
    }
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NBestSentencePieceText::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NBestSentencePieceText*>(&from));
}

void NBestSentencePieceText::MergeFrom(const NBestSentencePieceText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.NBestSentencePieceText)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NBestSentencePieceText::UnsafeMergeFrom(const NBestSentencePieceText& from) {
  GOOGLE_DCHECK(&from != this);
  nbests_.MergeFrom(from.nbests_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NBestSentencePieceText::CopyFrom(const NBestSentencePieceText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.NBestSentencePieceText)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NBestSentencePieceText::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->nbests())) return false;
  return true;
}

void NBestSentencePieceText::Swap(NBestSentencePieceText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NBestSentencePieceText::InternalSwap(NBestSentencePieceText* other) {
  nbests_.UnsafeArenaSwap(&other->nbests_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NBestSentencePieceText::GetTypeName() const {
  return "sentencepiece.NBestSentencePieceText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NBestSentencePieceText

// repeated .sentencepiece.SentencePieceText nbests = 1;
int NBestSentencePieceText::nbests_size() const {
  return nbests_.size();
}
void NBestSentencePieceText::clear_nbests() {
  nbests_.Clear();
}
const ::sentencepiece::SentencePieceText& NBestSentencePieceText::nbests(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Get(index);
}
::sentencepiece::SentencePieceText* NBestSentencePieceText::mutable_nbests(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Mutable(index);
}
::sentencepiece::SentencePieceText* NBestSentencePieceText::add_nbests() {
  // @@protoc_insertion_point(field_add:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Add();
}
::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >*
NBestSentencePieceText::mutable_nbests() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.NBestSentencePieceText.nbests)
  return &nbests_;
}
const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >&
NBestSentencePieceText::nbests() const {
  // @@protoc_insertion_point(field_list:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_;
}

inline const NBestSentencePieceText* NBestSentencePieceText::internal_default_instance() {
  return &NBestSentencePieceText_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sentencepiece

// @@protoc_insertion_point(global_scope)
