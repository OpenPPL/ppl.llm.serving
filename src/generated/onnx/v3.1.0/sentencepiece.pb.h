// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentencepiece.proto

#ifndef PROTOBUF_sentencepiece_2eproto__INCLUDED
#define PROTOBUF_sentencepiece_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace sentencepiece {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sentencepiece_2eproto();
void protobuf_InitDefaults_sentencepiece_2eproto();
void protobuf_AssignDesc_sentencepiece_2eproto();
void protobuf_ShutdownFile_sentencepiece_2eproto();

class NBestSentencePieceText;
class SentencePieceText;
class SentencePieceText_SentencePiece;

// ===================================================================

class SentencePieceText_SentencePiece : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText.SentencePiece) */ {
 public:
  SentencePieceText_SentencePiece();
  virtual ~SentencePieceText_SentencePiece();

  SentencePieceText_SentencePiece(const SentencePieceText_SentencePiece& from);

  inline SentencePieceText_SentencePiece& operator=(const SentencePieceText_SentencePiece& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SentencePieceText_SentencePiece& default_instance();

  static const SentencePieceText_SentencePiece* internal_default_instance();

  void Swap(SentencePieceText_SentencePiece* other);

  // implements Message ----------------------------------------------

  inline SentencePieceText_SentencePiece* New() const { return New(NULL); }

  SentencePieceText_SentencePiece* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SentencePieceText_SentencePiece& from);
  void MergeFrom(const SentencePieceText_SentencePiece& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SentencePieceText_SentencePiece* other);
  void UnsafeMergeFrom(const SentencePieceText_SentencePiece& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string piece = 1;
  bool has_piece() const;
  void clear_piece();
  static const int kPieceFieldNumber = 1;
  const ::std::string& piece() const;
  void set_piece(const ::std::string& value);
  void set_piece(const char* value);
  void set_piece(const char* value, size_t size);
  ::std::string* mutable_piece();
  ::std::string* release_piece();
  void set_allocated_piece(::std::string* piece);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string surface = 3;
  bool has_surface() const;
  void clear_surface();
  static const int kSurfaceFieldNumber = 3;
  const ::std::string& surface() const;
  void set_surface(const ::std::string& value);
  void set_surface(const char* value);
  void set_surface(const char* value, size_t size);
  ::std::string* mutable_surface();
  ::std::string* release_surface();
  void set_allocated_surface(::std::string* surface);

  // optional uint32 begin = 4;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 4;
  ::google::protobuf::uint32 begin() const;
  void set_begin(::google::protobuf::uint32 value);

  // optional uint32 end = 5;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 5;
  ::google::protobuf::uint32 end() const;
  void set_end(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SentencePieceText_SentencePiece)
  // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText.SentencePiece)
 private:
  inline void set_has_piece();
  inline void clear_has_piece();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_surface();
  inline void clear_has_surface();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr piece_;
  ::google::protobuf::internal::ArenaStringPtr surface_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 begin_;
  ::google::protobuf::uint32 end_;
  friend void  protobuf_InitDefaults_sentencepiece_2eproto_impl();
  friend void  protobuf_AddDesc_sentencepiece_2eproto_impl();
  friend void protobuf_AssignDesc_sentencepiece_2eproto();
  friend void protobuf_ShutdownFile_sentencepiece_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SentencePieceText_SentencePiece> SentencePieceText_SentencePiece_default_instance_;

// -------------------------------------------------------------------

class SentencePieceText : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText) */ {
 public:
  SentencePieceText();
  virtual ~SentencePieceText();

  SentencePieceText(const SentencePieceText& from);

  inline SentencePieceText& operator=(const SentencePieceText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SentencePieceText& default_instance();

  static const SentencePieceText* internal_default_instance();

  void Swap(SentencePieceText* other);

  // implements Message ----------------------------------------------

  inline SentencePieceText* New() const { return New(NULL); }

  SentencePieceText* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SentencePieceText& from);
  void MergeFrom(const SentencePieceText& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SentencePieceText* other);
  void UnsafeMergeFrom(const SentencePieceText& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SentencePieceText_SentencePiece SentencePiece;

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
  int pieces_size() const;
  void clear_pieces();
  static const int kPiecesFieldNumber = 2;
  const ::sentencepiece::SentencePieceText_SentencePiece& pieces(int index) const;
  ::sentencepiece::SentencePieceText_SentencePiece* mutable_pieces(int index);
  ::sentencepiece::SentencePieceText_SentencePiece* add_pieces();
  ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >*
      mutable_pieces();
  const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >&
      pieces() const;

  // optional float score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SentencePieceText)
  // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece > pieces_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  float score_;
  friend void  protobuf_InitDefaults_sentencepiece_2eproto_impl();
  friend void  protobuf_AddDesc_sentencepiece_2eproto_impl();
  friend void protobuf_AssignDesc_sentencepiece_2eproto();
  friend void protobuf_ShutdownFile_sentencepiece_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SentencePieceText> SentencePieceText_default_instance_;

// -------------------------------------------------------------------

class NBestSentencePieceText : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.NBestSentencePieceText) */ {
 public:
  NBestSentencePieceText();
  virtual ~NBestSentencePieceText();

  NBestSentencePieceText(const NBestSentencePieceText& from);

  inline NBestSentencePieceText& operator=(const NBestSentencePieceText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const NBestSentencePieceText& default_instance();

  static const NBestSentencePieceText* internal_default_instance();

  void Swap(NBestSentencePieceText* other);

  // implements Message ----------------------------------------------

  inline NBestSentencePieceText* New() const { return New(NULL); }

  NBestSentencePieceText* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NBestSentencePieceText& from);
  void MergeFrom(const NBestSentencePieceText& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NBestSentencePieceText* other);
  void UnsafeMergeFrom(const NBestSentencePieceText& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sentencepiece.SentencePieceText nbests = 1;
  int nbests_size() const;
  void clear_nbests();
  static const int kNbestsFieldNumber = 1;
  const ::sentencepiece::SentencePieceText& nbests(int index) const;
  ::sentencepiece::SentencePieceText* mutable_nbests(int index);
  ::sentencepiece::SentencePieceText* add_nbests();
  ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >*
      mutable_nbests();
  const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >&
      nbests() const;

  // @@protoc_insertion_point(class_scope:sentencepiece.NBestSentencePieceText)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText > nbests_;
  friend void  protobuf_InitDefaults_sentencepiece_2eproto_impl();
  friend void  protobuf_AddDesc_sentencepiece_2eproto_impl();
  friend void protobuf_AssignDesc_sentencepiece_2eproto();
  friend void protobuf_ShutdownFile_sentencepiece_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NBestSentencePieceText> NBestSentencePieceText_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SentencePieceText_SentencePiece

// optional string piece = 1;
inline bool SentencePieceText_SentencePiece::has_piece() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SentencePieceText_SentencePiece::set_has_piece() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SentencePieceText_SentencePiece::clear_has_piece() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SentencePieceText_SentencePiece::clear_piece() {
  piece_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_piece();
}
inline const ::std::string& SentencePieceText_SentencePiece::piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.piece)
  return piece_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText_SentencePiece::set_piece(const ::std::string& value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.piece)
}
inline void SentencePieceText_SentencePiece::set_piece(const char* value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.piece)
}
inline void SentencePieceText_SentencePiece::set_piece(const char* value, size_t size) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.piece)
}
inline ::std::string* SentencePieceText_SentencePiece::mutable_piece() {
  set_has_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.piece)
  return piece_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SentencePieceText_SentencePiece::release_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.piece)
  clear_has_piece();
  return piece_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText_SentencePiece::set_allocated_piece(::std::string* piece) {
  if (piece != NULL) {
    set_has_piece();
  } else {
    clear_has_piece();
  }
  piece_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.piece)
}

// optional uint32 id = 2;
inline bool SentencePieceText_SentencePiece::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SentencePieceText_SentencePiece::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SentencePieceText_SentencePiece::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SentencePieceText_SentencePiece::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SentencePieceText_SentencePiece::id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.id)
  return id_;
}
inline void SentencePieceText_SentencePiece::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.id)
}

// optional string surface = 3;
inline bool SentencePieceText_SentencePiece::has_surface() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SentencePieceText_SentencePiece::set_has_surface() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SentencePieceText_SentencePiece::clear_has_surface() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SentencePieceText_SentencePiece::clear_surface() {
  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_surface();
}
inline const ::std::string& SentencePieceText_SentencePiece::surface() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.surface)
  return surface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText_SentencePiece::set_surface(const ::std::string& value) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.surface)
}
inline void SentencePieceText_SentencePiece::set_surface(const char* value) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.surface)
}
inline void SentencePieceText_SentencePiece::set_surface(const char* value, size_t size) {
  set_has_surface();
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.surface)
}
inline ::std::string* SentencePieceText_SentencePiece::mutable_surface() {
  set_has_surface();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.surface)
  return surface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SentencePieceText_SentencePiece::release_surface() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.surface)
  clear_has_surface();
  return surface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText_SentencePiece::set_allocated_surface(::std::string* surface) {
  if (surface != NULL) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  surface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), surface);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.surface)
}

// optional uint32 begin = 4;
inline bool SentencePieceText_SentencePiece::has_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SentencePieceText_SentencePiece::set_has_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SentencePieceText_SentencePiece::clear_has_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SentencePieceText_SentencePiece::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
inline ::google::protobuf::uint32 SentencePieceText_SentencePiece::begin() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.begin)
  return begin_;
}
inline void SentencePieceText_SentencePiece::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.begin)
}

// optional uint32 end = 5;
inline bool SentencePieceText_SentencePiece::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SentencePieceText_SentencePiece::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SentencePieceText_SentencePiece::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SentencePieceText_SentencePiece::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 SentencePieceText_SentencePiece::end() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.end)
  return end_;
}
inline void SentencePieceText_SentencePiece::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.end)
}

inline const SentencePieceText_SentencePiece* SentencePieceText_SentencePiece::internal_default_instance() {
  return &SentencePieceText_SentencePiece_default_instance_.get();
}
// -------------------------------------------------------------------

// SentencePieceText

// optional string text = 1;
inline bool SentencePieceText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SentencePieceText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SentencePieceText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SentencePieceText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& SentencePieceText::text() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.text)
}
inline void SentencePieceText::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.text)
}
inline void SentencePieceText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.text)
}
inline ::std::string* SentencePieceText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SentencePieceText::release_text() {
  // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SentencePieceText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.text)
}

// repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
inline int SentencePieceText::pieces_size() const {
  return pieces_.size();
}
inline void SentencePieceText::clear_pieces() {
  pieces_.Clear();
}
inline const ::sentencepiece::SentencePieceText_SentencePiece& SentencePieceText::pieces(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.pieces)
  return pieces_.Get(index);
}
inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::mutable_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.pieces)
  return pieces_.Mutable(index);
}
inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::add_pieces() {
  // @@protoc_insertion_point(field_add:sentencepiece.SentencePieceText.pieces)
  return pieces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >*
SentencePieceText::mutable_pieces() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.SentencePieceText.pieces)
  return &pieces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >&
SentencePieceText::pieces() const {
  // @@protoc_insertion_point(field_list:sentencepiece.SentencePieceText.pieces)
  return pieces_;
}

// optional float score = 3;
inline bool SentencePieceText::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SentencePieceText::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SentencePieceText::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SentencePieceText::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float SentencePieceText::score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.score)
  return score_;
}
inline void SentencePieceText::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.score)
}

inline const SentencePieceText* SentencePieceText::internal_default_instance() {
  return &SentencePieceText_default_instance_.get();
}
// -------------------------------------------------------------------

// NBestSentencePieceText

// repeated .sentencepiece.SentencePieceText nbests = 1;
inline int NBestSentencePieceText::nbests_size() const {
  return nbests_.size();
}
inline void NBestSentencePieceText::clear_nbests() {
  nbests_.Clear();
}
inline const ::sentencepiece::SentencePieceText& NBestSentencePieceText::nbests(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Get(index);
}
inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::mutable_nbests(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Mutable(index);
}
inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::add_nbests() {
  // @@protoc_insertion_point(field_add:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >*
NBestSentencePieceText::mutable_nbests() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.NBestSentencePieceText.nbests)
  return &nbests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SentencePieceText >&
NBestSentencePieceText::nbests() const {
  // @@protoc_insertion_point(field_list:sentencepiece.NBestSentencePieceText.nbests)
  return nbests_;
}

inline const NBestSentencePieceText* NBestSentencePieceText::internal_default_instance() {
  return &NBestSentencePieceText_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sentencepiece

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sentencepiece_2eproto__INCLUDED
