// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentencepiece_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sentencepiece_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sentencepiece {

void protobuf_ShutdownFile_sentencepiece_5fmodel_2eproto() {
  TrainerSpec_default_instance_.Shutdown();
  delete TrainerSpec::_default_unk_piece_;
  delete TrainerSpec::_default_bos_piece_;
  delete TrainerSpec::_default_eos_piece_;
  delete TrainerSpec::_default_pad_piece_;
  delete TrainerSpec::_default_unk_surface_;
  NormalizerSpec_default_instance_.Shutdown();
  SelfTestData_default_instance_.Shutdown();
  SelfTestData_Sample_default_instance_.Shutdown();
  ModelProto_default_instance_.Shutdown();
  ModelProto_SentencePiece_default_instance_.Shutdown();
}

void protobuf_InitDefaults_sentencepiece_5fmodel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TrainerSpec::_default_unk_piece_ =
      new ::std::string("<unk>", 5);
  TrainerSpec::_default_bos_piece_ =
      new ::std::string("<s>", 3);
  TrainerSpec::_default_eos_piece_ =
      new ::std::string("</s>", 4);
  TrainerSpec::_default_pad_piece_ =
      new ::std::string("<pad>", 5);
  TrainerSpec::_default_unk_surface_ =
      new ::std::string(" \342\201\207 ", 5);
  TrainerSpec_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NormalizerSpec_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SelfTestData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SelfTestData_Sample_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModelProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModelProto_SentencePiece_default_instance_.DefaultConstruct();
  TrainerSpec_default_instance_.get_mutable()->InitAsDefaultInstance();
  NormalizerSpec_default_instance_.get_mutable()->InitAsDefaultInstance();
  SelfTestData_default_instance_.get_mutable()->InitAsDefaultInstance();
  SelfTestData_Sample_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModelProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModelProto_SentencePiece_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sentencepiece_5fmodel_2eproto_once_);
void protobuf_InitDefaults_sentencepiece_5fmodel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sentencepiece_5fmodel_2eproto_once_,
                 &protobuf_InitDefaults_sentencepiece_5fmodel_2eproto_impl);
}
void protobuf_AddDesc_sentencepiece_5fmodel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sentencepiece_5fmodel_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sentencepiece_5fmodel_2eproto_once_);
void protobuf_AddDesc_sentencepiece_5fmodel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sentencepiece_5fmodel_2eproto_once_,
                 &protobuf_AddDesc_sentencepiece_5fmodel_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sentencepiece_5fmodel_2eproto {
  StaticDescriptorInitializer_sentencepiece_5fmodel_2eproto() {
    protobuf_AddDesc_sentencepiece_5fmodel_2eproto();
  }
} static_descriptor_initializer_sentencepiece_5fmodel_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForTrainerSpec(
    TrainerSpec* ptr) {
  return ptr->mutable_unknown_fields();
}

bool TrainerSpec_ModelType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrainerSpec_ModelType TrainerSpec::UNIGRAM;
const TrainerSpec_ModelType TrainerSpec::BPE;
const TrainerSpec_ModelType TrainerSpec::WORD;
const TrainerSpec_ModelType TrainerSpec::CHAR;
const TrainerSpec_ModelType TrainerSpec::ModelType_MIN;
const TrainerSpec_ModelType TrainerSpec::ModelType_MAX;
const int TrainerSpec::ModelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* TrainerSpec::_default_unk_piece_ = NULL;
::std::string* TrainerSpec::_default_bos_piece_ = NULL;
::std::string* TrainerSpec::_default_eos_piece_ = NULL;
::std::string* TrainerSpec::_default_pad_piece_ = NULL;
::std::string* TrainerSpec::_default_unk_surface_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainerSpec::kInputFieldNumber;
const int TrainerSpec::kInputFormatFieldNumber;
const int TrainerSpec::kModelPrefixFieldNumber;
const int TrainerSpec::kModelTypeFieldNumber;
const int TrainerSpec::kVocabSizeFieldNumber;
const int TrainerSpec::kAcceptLanguageFieldNumber;
const int TrainerSpec::kSelfTestSampleSizeFieldNumber;
const int TrainerSpec::kEnableDifferentialPrivacyFieldNumber;
const int TrainerSpec::kDifferentialPrivacyNoiseLevelFieldNumber;
const int TrainerSpec::kDifferentialPrivacyClippingThresholdFieldNumber;
const int TrainerSpec::kCharacterCoverageFieldNumber;
const int TrainerSpec::kInputSentenceSizeFieldNumber;
const int TrainerSpec::kShuffleInputSentenceFieldNumber;
const int TrainerSpec::kMiningSentenceSizeFieldNumber;
const int TrainerSpec::kTrainingSentenceSizeFieldNumber;
const int TrainerSpec::kSeedSentencepieceSizeFieldNumber;
const int TrainerSpec::kShrinkingFactorFieldNumber;
const int TrainerSpec::kMaxSentenceLengthFieldNumber;
const int TrainerSpec::kNumThreadsFieldNumber;
const int TrainerSpec::kNumSubIterationsFieldNumber;
const int TrainerSpec::kMaxSentencepieceLengthFieldNumber;
const int TrainerSpec::kSplitByUnicodeScriptFieldNumber;
const int TrainerSpec::kSplitByNumberFieldNumber;
const int TrainerSpec::kSplitByWhitespaceFieldNumber;
const int TrainerSpec::kTreatWhitespaceAsSuffixFieldNumber;
const int TrainerSpec::kAllowWhitespaceOnlyPiecesFieldNumber;
const int TrainerSpec::kSplitDigitsFieldNumber;
const int TrainerSpec::kPretokenizationDelimiterFieldNumber;
const int TrainerSpec::kControlSymbolsFieldNumber;
const int TrainerSpec::kUserDefinedSymbolsFieldNumber;
const int TrainerSpec::kRequiredCharsFieldNumber;
const int TrainerSpec::kByteFallbackFieldNumber;
const int TrainerSpec::kVocabularyOutputPieceScoreFieldNumber;
const int TrainerSpec::kHardVocabLimitFieldNumber;
const int TrainerSpec::kUseAllVocabFieldNumber;
const int TrainerSpec::kUnkIdFieldNumber;
const int TrainerSpec::kBosIdFieldNumber;
const int TrainerSpec::kEosIdFieldNumber;
const int TrainerSpec::kPadIdFieldNumber;
const int TrainerSpec::kUnkPieceFieldNumber;
const int TrainerSpec::kBosPieceFieldNumber;
const int TrainerSpec::kEosPieceFieldNumber;
const int TrainerSpec::kPadPieceFieldNumber;
const int TrainerSpec::kUnkSurfaceFieldNumber;
const int TrainerSpec::kTrainExtremelyLargeCorpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainerSpec::TrainerSpec()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.TrainerSpec)
}

void TrainerSpec::InitAsDefaultInstance() {
}

TrainerSpec::TrainerSpec(const TrainerSpec& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.TrainerSpec)
}

void TrainerSpec::SharedCtor() {
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretokenization_delimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_chars_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unk_piece_.UnsafeSetDefault(_default_unk_piece_);
  bos_piece_.UnsafeSetDefault(_default_bos_piece_);
  eos_piece_.UnsafeSetDefault(_default_eos_piece_);
  pad_piece_.UnsafeSetDefault(_default_pad_piece_);
  unk_surface_.UnsafeSetDefault(_default_unk_surface_);
  ::memset(&self_test_sample_size_, 0, reinterpret_cast<char*>(&train_extremely_large_corpus_) -
    reinterpret_cast<char*>(&self_test_sample_size_) + sizeof(train_extremely_large_corpus_));
  model_type_ = 1;
  vocab_size_ = 8000;
  character_coverage_ = 0.9995f;
  seed_sentencepiece_size_ = 1000000;
  shrinking_factor_ = 0.75f;
  max_sentence_length_ = 4192;
  num_threads_ = 16;
  num_sub_iterations_ = 2;
  shuffle_input_sentence_ = true;
  split_by_unicode_script_ = true;
  split_by_number_ = true;
  split_by_whitespace_ = true;
  max_sentencepiece_length_ = 16;
  vocabulary_output_piece_score_ = true;
  hard_vocab_limit_ = true;
  bos_id_ = 1;
  eos_id_ = 2;
  pad_id_ = -1;
  _cached_size_ = 0;
}

TrainerSpec::~TrainerSpec() {
  // @@protoc_insertion_point(destructor:sentencepiece.TrainerSpec)
  SharedDtor();
}

void TrainerSpec::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretokenization_delimiter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_chars_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unk_piece_.DestroyNoArena(_default_unk_piece_);
  bos_piece_.DestroyNoArena(_default_bos_piece_);
  eos_piece_.DestroyNoArena(_default_eos_piece_);
  pad_piece_.DestroyNoArena(_default_pad_piece_);
  unk_surface_.DestroyNoArena(_default_unk_surface_);
}

void TrainerSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrainerSpec& TrainerSpec::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrainerSpec> TrainerSpec_default_instance_;

TrainerSpec* TrainerSpec::New(::google::protobuf::Arena* arena) const {
  TrainerSpec* n = new TrainerSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.TrainerSpec)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrainerSpec, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrainerSpec*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 222u) {
    if (has_input_format()) {
      input_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_prefix()) {
      model_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    model_type_ = 1;
    vocab_size_ = 8000;
    self_test_sample_size_ = 0;
    enable_differential_privacy_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(differential_privacy_noise_level_, training_sentence_size_);
    character_coverage_ = 0.9995f;
    shuffle_input_sentence_ = true;
    seed_sentencepiece_size_ = 1000000;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    shrinking_factor_ = 0.75f;
    max_sentence_length_ = 4192;
    num_threads_ = 16;
    num_sub_iterations_ = 2;
    max_sentencepiece_length_ = 16;
    split_by_unicode_script_ = true;
    split_by_number_ = true;
    split_by_whitespace_ = true;
  }
  if (_has_bits_[24 / 32] & 3472883712u) {
    ZR_(treat_whitespace_as_suffix_, split_digits_);
    if (has_pretokenization_delimiter()) {
      pretokenization_delimiter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_required_chars()) {
      required_chars_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    byte_fallback_ = false;
  }
  if (_has_bits_[32 / 32] & 255u) {
    vocabulary_output_piece_score_ = true;
    hard_vocab_limit_ = true;
    use_all_vocab_ = false;
    unk_id_ = 0;
    bos_id_ = 1;
    eos_id_ = 2;
    pad_id_ = -1;
    if (has_unk_piece()) {
      unk_piece_.ClearToDefaultNoArena(_default_unk_piece_);
    }
  }
  if (_has_bits_[40 / 32] & 7936u) {
    if (has_bos_piece()) {
      bos_piece_.ClearToDefaultNoArena(_default_bos_piece_);
    }
    if (has_eos_piece()) {
      eos_piece_.ClearToDefaultNoArena(_default_eos_piece_);
    }
    if (has_pad_piece()) {
      pad_piece_.ClearToDefaultNoArena(_default_pad_piece_);
    }
    if (has_unk_surface()) {
      unk_surface_.ClearToDefaultNoArena(_default_unk_surface_);
    }
    train_extremely_large_corpus_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  input_.Clear();
  accept_language_.Clear();
  control_symbols_.Clear();
  user_defined_symbols_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TrainerSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTrainerSpec, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.TrainerSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (tag == 10) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectTag(18)) goto parse_model_prefix;
        break;
      }

      // optional string model_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_model_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_model_type;
        break;
      }

      // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
      case 3: {
        if (tag == 24) {
         parse_model_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sentencepiece::TrainerSpec_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::sentencepiece::TrainerSpec_ModelType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vocab_size;
        break;
      }

      // optional int32 vocab_size = 4 [default = 8000];
      case 4: {
        if (tag == 32) {
         parse_vocab_size:
          set_has_vocab_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vocab_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accept_language;
        break;
      }

      // repeated string accept_language = 5;
      case 5: {
        if (tag == 42) {
         parse_accept_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accept_language()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accept_language;
        if (input->ExpectTag(48)) goto parse_self_test_sample_size;
        break;
      }

      // optional int32 self_test_sample_size = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_self_test_sample_size:
          set_has_self_test_sample_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_test_sample_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_input_format;
        break;
      }

      // optional string input_format = 7;
      case 7: {
        if (tag == 58) {
         parse_input_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_character_coverage;
        break;
      }

      // optional float character_coverage = 10 [default = 0.9995];
      case 10: {
        if (tag == 85) {
         parse_character_coverage:
          set_has_character_coverage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &character_coverage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_input_sentence_size;
        break;
      }

      // optional uint64 input_sentence_size = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_input_sentence_size:
          set_has_input_sentence_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &input_sentence_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mining_sentence_size;
        break;
      }

      // optional int32 mining_sentence_size = 12 [deprecated = true];
      case 12: {
        if (tag == 96) {
         parse_mining_sentence_size:
          set_has_mining_sentence_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mining_sentence_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_training_sentence_size;
        break;
      }

      // optional int32 training_sentence_size = 13 [deprecated = true];
      case 13: {
        if (tag == 104) {
         parse_training_sentence_size:
          set_has_training_sentence_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &training_sentence_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_seed_sentencepiece_size;
        break;
      }

      // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
      case 14: {
        if (tag == 112) {
         parse_seed_sentencepiece_size:
          set_has_seed_sentencepiece_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_sentencepiece_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_shrinking_factor;
        break;
      }

      // optional float shrinking_factor = 15 [default = 0.75];
      case 15: {
        if (tag == 125) {
         parse_shrinking_factor:
          set_has_shrinking_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shrinking_factor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 16 [default = 16];
      case 16: {
        if (tag == 128) {
         parse_num_threads:
          set_has_num_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_num_sub_iterations;
        break;
      }

      // optional int32 num_sub_iterations = 17 [default = 2];
      case 17: {
        if (tag == 136) {
         parse_num_sub_iterations:
          set_has_num_sub_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sub_iterations_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_max_sentence_length;
        break;
      }

      // optional int32 max_sentence_length = 18 [default = 4192];
      case 18: {
        if (tag == 144) {
         parse_max_sentence_length:
          set_has_max_sentence_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sentence_length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_shuffle_input_sentence;
        break;
      }

      // optional bool shuffle_input_sentence = 19 [default = true];
      case 19: {
        if (tag == 152) {
         parse_shuffle_input_sentence:
          set_has_shuffle_input_sentence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_input_sentence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_max_sentencepiece_length;
        break;
      }

      // optional int32 max_sentencepiece_length = 20 [default = 16];
      case 20: {
        if (tag == 160) {
         parse_max_sentencepiece_length:
          set_has_max_sentencepiece_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sentencepiece_length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_split_by_unicode_script;
        break;
      }

      // optional bool split_by_unicode_script = 21 [default = true];
      case 21: {
        if (tag == 168) {
         parse_split_by_unicode_script:
          set_has_split_by_unicode_script();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_by_unicode_script_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_split_by_whitespace;
        break;
      }

      // optional bool split_by_whitespace = 22 [default = true];
      case 22: {
        if (tag == 176) {
         parse_split_by_whitespace:
          set_has_split_by_whitespace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_by_whitespace_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_split_by_number;
        break;
      }

      // optional bool split_by_number = 23 [default = true];
      case 23: {
        if (tag == 184) {
         parse_split_by_number:
          set_has_split_by_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_by_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_treat_whitespace_as_suffix;
        break;
      }

      // optional bool treat_whitespace_as_suffix = 24 [default = false];
      case 24: {
        if (tag == 192) {
         parse_treat_whitespace_as_suffix:
          set_has_treat_whitespace_as_suffix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &treat_whitespace_as_suffix_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_split_digits;
        break;
      }

      // optional bool split_digits = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_split_digits:
          set_has_split_digits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_digits_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_allow_whitespace_only_pieces;
        break;
      }

      // optional bool allow_whitespace_only_pieces = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_allow_whitespace_only_pieces:
          set_has_allow_whitespace_only_pieces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_whitespace_only_pieces_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_control_symbols;
        break;
      }

      // repeated string control_symbols = 30;
      case 30: {
        if (tag == 242) {
         parse_control_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_control_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_control_symbols;
        if (input->ExpectTag(250)) goto parse_user_defined_symbols;
        break;
      }

      // repeated string user_defined_symbols = 31;
      case 31: {
        if (tag == 250) {
         parse_user_defined_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_defined_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_user_defined_symbols;
        if (input->ExpectTag(256)) goto parse_vocabulary_output_piece_score;
        break;
      }

      // optional bool vocabulary_output_piece_score = 32 [default = true];
      case 32: {
        if (tag == 256) {
         parse_vocabulary_output_piece_score:
          set_has_vocabulary_output_piece_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vocabulary_output_piece_score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_hard_vocab_limit;
        break;
      }

      // optional bool hard_vocab_limit = 33 [default = true];
      case 33: {
        if (tag == 264) {
         parse_hard_vocab_limit:
          set_has_hard_vocab_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_vocab_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_use_all_vocab;
        break;
      }

      // optional bool use_all_vocab = 34 [default = false];
      case 34: {
        if (tag == 272) {
         parse_use_all_vocab:
          set_has_use_all_vocab();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_all_vocab_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_byte_fallback;
        break;
      }

      // optional bool byte_fallback = 35 [default = false];
      case 35: {
        if (tag == 280) {
         parse_byte_fallback:
          set_has_byte_fallback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &byte_fallback_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_required_chars;
        break;
      }

      // optional string required_chars = 36;
      case 36: {
        if (tag == 290) {
         parse_required_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_chars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_unk_id;
        break;
      }

      // optional int32 unk_id = 40 [default = 0];
      case 40: {
        if (tag == 320) {
         parse_unk_id:
          set_has_unk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unk_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_bos_id;
        break;
      }

      // optional int32 bos_id = 41 [default = 1];
      case 41: {
        if (tag == 328) {
         parse_bos_id:
          set_has_bos_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bos_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_eos_id;
        break;
      }

      // optional int32 eos_id = 42 [default = 2];
      case 42: {
        if (tag == 336) {
         parse_eos_id:
          set_has_eos_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eos_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_pad_id;
        break;
      }

      // optional int32 pad_id = 43 [default = -1];
      case 43: {
        if (tag == 344) {
         parse_pad_id:
          set_has_pad_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_unk_surface;
        break;
      }

      // optional string unk_surface = 44 [default = " \342\201\207 "];
      case 44: {
        if (tag == 354) {
         parse_unk_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unk_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_unk_piece;
        break;
      }

      // optional string unk_piece = 45 [default = "<unk>"];
      case 45: {
        if (tag == 362) {
         parse_unk_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unk_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_bos_piece;
        break;
      }

      // optional string bos_piece = 46 [default = "<s>"];
      case 46: {
        if (tag == 370) {
         parse_bos_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bos_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_eos_piece;
        break;
      }

      // optional string eos_piece = 47 [default = "</s>"];
      case 47: {
        if (tag == 378) {
         parse_eos_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eos_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_pad_piece;
        break;
      }

      // optional string pad_piece = 48 [default = "<pad>"];
      case 48: {
        if (tag == 386) {
         parse_pad_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_train_extremely_large_corpus;
        break;
      }

      // optional bool train_extremely_large_corpus = 49 [default = false];
      case 49: {
        if (tag == 392) {
         parse_train_extremely_large_corpus:
          set_has_train_extremely_large_corpus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &train_extremely_large_corpus_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_enable_differential_privacy;
        break;
      }

      // optional bool enable_differential_privacy = 50 [default = false];
      case 50: {
        if (tag == 400) {
         parse_enable_differential_privacy:
          set_has_enable_differential_privacy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_differential_privacy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_differential_privacy_noise_level;
        break;
      }

      // optional float differential_privacy_noise_level = 51 [default = 0];
      case 51: {
        if (tag == 413) {
         parse_differential_privacy_noise_level:
          set_has_differential_privacy_noise_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &differential_privacy_noise_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_differential_privacy_clipping_threshold;
        break;
      }

      // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
      case 52: {
        if (tag == 416) {
         parse_differential_privacy_clipping_threshold:
          set_has_differential_privacy_clipping_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &differential_privacy_clipping_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_pretokenization_delimiter;
        break;
      }

      // optional string pretokenization_delimiter = 53 [default = ""];
      case 53: {
        if (tag == 426) {
         parse_pretokenization_delimiter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretokenization_delimiter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.TrainerSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.TrainerSpec)
  return false;
#undef DO_
}

void TrainerSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.TrainerSpec)
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // optional string model_prefix = 2;
  if (has_model_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_prefix(), output);
  }

  // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->model_type(), output);
  }

  // optional int32 vocab_size = 4 [default = 8000];
  if (has_vocab_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vocab_size(), output);
  }

  // repeated string accept_language = 5;
  for (int i = 0; i < this->accept_language_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accept_language(i), output);
  }

  // optional int32 self_test_sample_size = 6 [default = 0];
  if (has_self_test_sample_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->self_test_sample_size(), output);
  }

  // optional string input_format = 7;
  if (has_input_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->input_format(), output);
  }

  // optional float character_coverage = 10 [default = 0.9995];
  if (has_character_coverage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->character_coverage(), output);
  }

  // optional uint64 input_sentence_size = 11 [default = 0];
  if (has_input_sentence_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->input_sentence_size(), output);
  }

  // optional int32 mining_sentence_size = 12 [deprecated = true];
  if (has_mining_sentence_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mining_sentence_size(), output);
  }

  // optional int32 training_sentence_size = 13 [deprecated = true];
  if (has_training_sentence_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->training_sentence_size(), output);
  }

  // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
  if (has_seed_sentencepiece_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->seed_sentencepiece_size(), output);
  }

  // optional float shrinking_factor = 15 [default = 0.75];
  if (has_shrinking_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->shrinking_factor(), output);
  }

  // optional int32 num_threads = 16 [default = 16];
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->num_threads(), output);
  }

  // optional int32 num_sub_iterations = 17 [default = 2];
  if (has_num_sub_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->num_sub_iterations(), output);
  }

  // optional int32 max_sentence_length = 18 [default = 4192];
  if (has_max_sentence_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_sentence_length(), output);
  }

  // optional bool shuffle_input_sentence = 19 [default = true];
  if (has_shuffle_input_sentence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->shuffle_input_sentence(), output);
  }

  // optional int32 max_sentencepiece_length = 20 [default = 16];
  if (has_max_sentencepiece_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_sentencepiece_length(), output);
  }

  // optional bool split_by_unicode_script = 21 [default = true];
  if (has_split_by_unicode_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->split_by_unicode_script(), output);
  }

  // optional bool split_by_whitespace = 22 [default = true];
  if (has_split_by_whitespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->split_by_whitespace(), output);
  }

  // optional bool split_by_number = 23 [default = true];
  if (has_split_by_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->split_by_number(), output);
  }

  // optional bool treat_whitespace_as_suffix = 24 [default = false];
  if (has_treat_whitespace_as_suffix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->treat_whitespace_as_suffix(), output);
  }

  // optional bool split_digits = 25 [default = false];
  if (has_split_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->split_digits(), output);
  }

  // optional bool allow_whitespace_only_pieces = 26 [default = false];
  if (has_allow_whitespace_only_pieces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->allow_whitespace_only_pieces(), output);
  }

  // repeated string control_symbols = 30;
  for (int i = 0; i < this->control_symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->control_symbols(i), output);
  }

  // repeated string user_defined_symbols = 31;
  for (int i = 0; i < this->user_defined_symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->user_defined_symbols(i), output);
  }

  // optional bool vocabulary_output_piece_score = 32 [default = true];
  if (has_vocabulary_output_piece_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->vocabulary_output_piece_score(), output);
  }

  // optional bool hard_vocab_limit = 33 [default = true];
  if (has_hard_vocab_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->hard_vocab_limit(), output);
  }

  // optional bool use_all_vocab = 34 [default = false];
  if (has_use_all_vocab()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->use_all_vocab(), output);
  }

  // optional bool byte_fallback = 35 [default = false];
  if (has_byte_fallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->byte_fallback(), output);
  }

  // optional string required_chars = 36;
  if (has_required_chars()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->required_chars(), output);
  }

  // optional int32 unk_id = 40 [default = 0];
  if (has_unk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->unk_id(), output);
  }

  // optional int32 bos_id = 41 [default = 1];
  if (has_bos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->bos_id(), output);
  }

  // optional int32 eos_id = 42 [default = 2];
  if (has_eos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->eos_id(), output);
  }

  // optional int32 pad_id = 43 [default = -1];
  if (has_pad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->pad_id(), output);
  }

  // optional string unk_surface = 44 [default = " \342\201\207 "];
  if (has_unk_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->unk_surface(), output);
  }

  // optional string unk_piece = 45 [default = "<unk>"];
  if (has_unk_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->unk_piece(), output);
  }

  // optional string bos_piece = 46 [default = "<s>"];
  if (has_bos_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->bos_piece(), output);
  }

  // optional string eos_piece = 47 [default = "</s>"];
  if (has_eos_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->eos_piece(), output);
  }

  // optional string pad_piece = 48 [default = "<pad>"];
  if (has_pad_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->pad_piece(), output);
  }

  // optional bool train_extremely_large_corpus = 49 [default = false];
  if (has_train_extremely_large_corpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->train_extremely_large_corpus(), output);
  }

  // optional bool enable_differential_privacy = 50 [default = false];
  if (has_enable_differential_privacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->enable_differential_privacy(), output);
  }

  // optional float differential_privacy_noise_level = 51 [default = 0];
  if (has_differential_privacy_noise_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->differential_privacy_noise_level(), output);
  }

  // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
  if (has_differential_privacy_clipping_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->differential_privacy_clipping_threshold(), output);
  }

  // optional string pretokenization_delimiter = 53 [default = ""];
  if (has_pretokenization_delimiter()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->pretokenization_delimiter(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.TrainerSpec)
}

size_t TrainerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.TrainerSpec)
  size_t total_size = 0;

  if (_has_bits_[1 / 32] & 222u) {
    // optional string input_format = 7;
    if (has_input_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_format());
    }

    // optional string model_prefix = 2;
    if (has_model_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_prefix());
    }

    // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional int32 vocab_size = 4 [default = 8000];
    if (has_vocab_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vocab_size());
    }

    // optional int32 self_test_sample_size = 6 [default = 0];
    if (has_self_test_sample_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_test_sample_size());
    }

    // optional bool enable_differential_privacy = 50 [default = false];
    if (has_enable_differential_privacy()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float differential_privacy_noise_level = 51 [default = 0];
    if (has_differential_privacy_noise_level()) {
      total_size += 2 + 4;
    }

    // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
    if (has_differential_privacy_clipping_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->differential_privacy_clipping_threshold());
    }

    // optional float character_coverage = 10 [default = 0.9995];
    if (has_character_coverage()) {
      total_size += 1 + 4;
    }

    // optional uint64 input_sentence_size = 11 [default = 0];
    if (has_input_sentence_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->input_sentence_size());
    }

    // optional bool shuffle_input_sentence = 19 [default = true];
    if (has_shuffle_input_sentence()) {
      total_size += 2 + 1;
    }

    // optional int32 mining_sentence_size = 12 [deprecated = true];
    if (has_mining_sentence_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mining_sentence_size());
    }

    // optional int32 training_sentence_size = 13 [deprecated = true];
    if (has_training_sentence_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->training_sentence_size());
    }

    // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
    if (has_seed_sentencepiece_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed_sentencepiece_size());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float shrinking_factor = 15 [default = 0.75];
    if (has_shrinking_factor()) {
      total_size += 1 + 4;
    }

    // optional int32 max_sentence_length = 18 [default = 4192];
    if (has_max_sentence_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_sentence_length());
    }

    // optional int32 num_threads = 16 [default = 16];
    if (has_num_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

    // optional int32 num_sub_iterations = 17 [default = 2];
    if (has_num_sub_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sub_iterations());
    }

    // optional int32 max_sentencepiece_length = 20 [default = 16];
    if (has_max_sentencepiece_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_sentencepiece_length());
    }

    // optional bool split_by_unicode_script = 21 [default = true];
    if (has_split_by_unicode_script()) {
      total_size += 2 + 1;
    }

    // optional bool split_by_number = 23 [default = true];
    if (has_split_by_number()) {
      total_size += 2 + 1;
    }

    // optional bool split_by_whitespace = 22 [default = true];
    if (has_split_by_whitespace()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 3472883712u) {
    // optional bool treat_whitespace_as_suffix = 24 [default = false];
    if (has_treat_whitespace_as_suffix()) {
      total_size += 2 + 1;
    }

    // optional bool allow_whitespace_only_pieces = 26 [default = false];
    if (has_allow_whitespace_only_pieces()) {
      total_size += 2 + 1;
    }

    // optional bool split_digits = 25 [default = false];
    if (has_split_digits()) {
      total_size += 2 + 1;
    }

    // optional string pretokenization_delimiter = 53 [default = ""];
    if (has_pretokenization_delimiter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretokenization_delimiter());
    }

    // optional string required_chars = 36;
    if (has_required_chars()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_chars());
    }

    // optional bool byte_fallback = 35 [default = false];
    if (has_byte_fallback()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool vocabulary_output_piece_score = 32 [default = true];
    if (has_vocabulary_output_piece_score()) {
      total_size += 2 + 1;
    }

    // optional bool hard_vocab_limit = 33 [default = true];
    if (has_hard_vocab_limit()) {
      total_size += 2 + 1;
    }

    // optional bool use_all_vocab = 34 [default = false];
    if (has_use_all_vocab()) {
      total_size += 2 + 1;
    }

    // optional int32 unk_id = 40 [default = 0];
    if (has_unk_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unk_id());
    }

    // optional int32 bos_id = 41 [default = 1];
    if (has_bos_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bos_id());
    }

    // optional int32 eos_id = 42 [default = 2];
    if (has_eos_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eos_id());
    }

    // optional int32 pad_id = 43 [default = -1];
    if (has_pad_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_id());
    }

    // optional string unk_piece = 45 [default = "<unk>"];
    if (has_unk_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unk_piece());
    }

  }
  if (_has_bits_[40 / 32] & 7936u) {
    // optional string bos_piece = 46 [default = "<s>"];
    if (has_bos_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bos_piece());
    }

    // optional string eos_piece = 47 [default = "</s>"];
    if (has_eos_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eos_piece());
    }

    // optional string pad_piece = 48 [default = "<pad>"];
    if (has_pad_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pad_piece());
    }

    // optional string unk_surface = 44 [default = " \342\201\207 "];
    if (has_unk_surface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unk_surface());
    }

    // optional bool train_extremely_large_corpus = 49 [default = false];
    if (has_train_extremely_large_corpus()) {
      total_size += 2 + 1;
    }

  }
  // repeated string input = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string accept_language = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accept_language_size());
  for (int i = 0; i < this->accept_language_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accept_language(i));
  }

  // repeated string control_symbols = 30;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->control_symbols_size());
  for (int i = 0; i < this->control_symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->control_symbols(i));
  }

  // repeated string user_defined_symbols = 31;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->user_defined_symbols_size());
  for (int i = 0; i < this->user_defined_symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_defined_symbols(i));
  }

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainerSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrainerSpec*>(&from));
}

void TrainerSpec::MergeFrom(const TrainerSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.TrainerSpec)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrainerSpec::UnsafeMergeFrom(const TrainerSpec& from) {
  GOOGLE_DCHECK(&from != this);
  input_.UnsafeMergeFrom(from.input_);
  accept_language_.UnsafeMergeFrom(from.accept_language_);
  control_symbols_.UnsafeMergeFrom(from.control_symbols_);
  user_defined_symbols_.UnsafeMergeFrom(from.user_defined_symbols_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_input_format()) {
      set_has_input_format();
      input_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_format_);
    }
    if (from.has_model_prefix()) {
      set_has_model_prefix();
      model_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_prefix_);
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_vocab_size()) {
      set_vocab_size(from.vocab_size());
    }
    if (from.has_self_test_sample_size()) {
      set_self_test_sample_size(from.self_test_sample_size());
    }
    if (from.has_enable_differential_privacy()) {
      set_enable_differential_privacy(from.enable_differential_privacy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_differential_privacy_noise_level()) {
      set_differential_privacy_noise_level(from.differential_privacy_noise_level());
    }
    if (from.has_differential_privacy_clipping_threshold()) {
      set_differential_privacy_clipping_threshold(from.differential_privacy_clipping_threshold());
    }
    if (from.has_character_coverage()) {
      set_character_coverage(from.character_coverage());
    }
    if (from.has_input_sentence_size()) {
      set_input_sentence_size(from.input_sentence_size());
    }
    if (from.has_shuffle_input_sentence()) {
      set_shuffle_input_sentence(from.shuffle_input_sentence());
    }
    if (from.has_mining_sentence_size()) {
      set_mining_sentence_size(from.mining_sentence_size());
    }
    if (from.has_training_sentence_size()) {
      set_training_sentence_size(from.training_sentence_size());
    }
    if (from.has_seed_sentencepiece_size()) {
      set_seed_sentencepiece_size(from.seed_sentencepiece_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shrinking_factor()) {
      set_shrinking_factor(from.shrinking_factor());
    }
    if (from.has_max_sentence_length()) {
      set_max_sentence_length(from.max_sentence_length());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
    if (from.has_num_sub_iterations()) {
      set_num_sub_iterations(from.num_sub_iterations());
    }
    if (from.has_max_sentencepiece_length()) {
      set_max_sentencepiece_length(from.max_sentencepiece_length());
    }
    if (from.has_split_by_unicode_script()) {
      set_split_by_unicode_script(from.split_by_unicode_script());
    }
    if (from.has_split_by_number()) {
      set_split_by_number(from.split_by_number());
    }
    if (from.has_split_by_whitespace()) {
      set_split_by_whitespace(from.split_by_whitespace());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_treat_whitespace_as_suffix()) {
      set_treat_whitespace_as_suffix(from.treat_whitespace_as_suffix());
    }
    if (from.has_allow_whitespace_only_pieces()) {
      set_allow_whitespace_only_pieces(from.allow_whitespace_only_pieces());
    }
    if (from.has_split_digits()) {
      set_split_digits(from.split_digits());
    }
    if (from.has_pretokenization_delimiter()) {
      set_has_pretokenization_delimiter();
      pretokenization_delimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretokenization_delimiter_);
    }
    if (from.has_required_chars()) {
      set_has_required_chars();
      required_chars_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_chars_);
    }
    if (from.has_byte_fallback()) {
      set_byte_fallback(from.byte_fallback());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_vocabulary_output_piece_score()) {
      set_vocabulary_output_piece_score(from.vocabulary_output_piece_score());
    }
    if (from.has_hard_vocab_limit()) {
      set_hard_vocab_limit(from.hard_vocab_limit());
    }
    if (from.has_use_all_vocab()) {
      set_use_all_vocab(from.use_all_vocab());
    }
    if (from.has_unk_id()) {
      set_unk_id(from.unk_id());
    }
    if (from.has_bos_id()) {
      set_bos_id(from.bos_id());
    }
    if (from.has_eos_id()) {
      set_eos_id(from.eos_id());
    }
    if (from.has_pad_id()) {
      set_pad_id(from.pad_id());
    }
    if (from.has_unk_piece()) {
      set_has_unk_piece();
      unk_piece_.AssignWithDefault(_default_unk_piece_, from.unk_piece_);
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bos_piece()) {
      set_has_bos_piece();
      bos_piece_.AssignWithDefault(_default_bos_piece_, from.bos_piece_);
    }
    if (from.has_eos_piece()) {
      set_has_eos_piece();
      eos_piece_.AssignWithDefault(_default_eos_piece_, from.eos_piece_);
    }
    if (from.has_pad_piece()) {
      set_has_pad_piece();
      pad_piece_.AssignWithDefault(_default_pad_piece_, from.pad_piece_);
    }
    if (from.has_unk_surface()) {
      set_has_unk_surface();
      unk_surface_.AssignWithDefault(_default_unk_surface_, from.unk_surface_);
    }
    if (from.has_train_extremely_large_corpus()) {
      set_train_extremely_large_corpus(from.train_extremely_large_corpus());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TrainerSpec::CopyFrom(const TrainerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.TrainerSpec)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrainerSpec::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void TrainerSpec::Swap(TrainerSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainerSpec::InternalSwap(TrainerSpec* other) {
  input_.UnsafeArenaSwap(&other->input_);
  input_format_.Swap(&other->input_format_);
  model_prefix_.Swap(&other->model_prefix_);
  std::swap(model_type_, other->model_type_);
  std::swap(vocab_size_, other->vocab_size_);
  accept_language_.UnsafeArenaSwap(&other->accept_language_);
  std::swap(self_test_sample_size_, other->self_test_sample_size_);
  std::swap(enable_differential_privacy_, other->enable_differential_privacy_);
  std::swap(differential_privacy_noise_level_, other->differential_privacy_noise_level_);
  std::swap(differential_privacy_clipping_threshold_, other->differential_privacy_clipping_threshold_);
  std::swap(character_coverage_, other->character_coverage_);
  std::swap(input_sentence_size_, other->input_sentence_size_);
  std::swap(shuffle_input_sentence_, other->shuffle_input_sentence_);
  std::swap(mining_sentence_size_, other->mining_sentence_size_);
  std::swap(training_sentence_size_, other->training_sentence_size_);
  std::swap(seed_sentencepiece_size_, other->seed_sentencepiece_size_);
  std::swap(shrinking_factor_, other->shrinking_factor_);
  std::swap(max_sentence_length_, other->max_sentence_length_);
  std::swap(num_threads_, other->num_threads_);
  std::swap(num_sub_iterations_, other->num_sub_iterations_);
  std::swap(max_sentencepiece_length_, other->max_sentencepiece_length_);
  std::swap(split_by_unicode_script_, other->split_by_unicode_script_);
  std::swap(split_by_number_, other->split_by_number_);
  std::swap(split_by_whitespace_, other->split_by_whitespace_);
  std::swap(treat_whitespace_as_suffix_, other->treat_whitespace_as_suffix_);
  std::swap(allow_whitespace_only_pieces_, other->allow_whitespace_only_pieces_);
  std::swap(split_digits_, other->split_digits_);
  pretokenization_delimiter_.Swap(&other->pretokenization_delimiter_);
  control_symbols_.UnsafeArenaSwap(&other->control_symbols_);
  user_defined_symbols_.UnsafeArenaSwap(&other->user_defined_symbols_);
  required_chars_.Swap(&other->required_chars_);
  std::swap(byte_fallback_, other->byte_fallback_);
  std::swap(vocabulary_output_piece_score_, other->vocabulary_output_piece_score_);
  std::swap(hard_vocab_limit_, other->hard_vocab_limit_);
  std::swap(use_all_vocab_, other->use_all_vocab_);
  std::swap(unk_id_, other->unk_id_);
  std::swap(bos_id_, other->bos_id_);
  std::swap(eos_id_, other->eos_id_);
  std::swap(pad_id_, other->pad_id_);
  unk_piece_.Swap(&other->unk_piece_);
  bos_piece_.Swap(&other->bos_piece_);
  eos_piece_.Swap(&other->eos_piece_);
  pad_piece_.Swap(&other->pad_piece_);
  unk_surface_.Swap(&other->unk_surface_);
  std::swap(train_extremely_large_corpus_, other->train_extremely_large_corpus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string TrainerSpec::GetTypeName() const {
  return "sentencepiece.TrainerSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainerSpec

// repeated string input = 1;
int TrainerSpec::input_size() const {
  return input_.size();
}
void TrainerSpec::clear_input() {
  input_.Clear();
}
const ::std::string& TrainerSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input)
  return input_.Get(index);
}
::std::string* TrainerSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.input)
  return input_.Mutable(index);
}
void TrainerSpec::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
  input_.Mutable(index)->assign(value);
}
void TrainerSpec::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.input)
}
void TrainerSpec::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.input)
}
::std::string* TrainerSpec::add_input() {
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.input)
  return input_.Add();
}
void TrainerSpec::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.input)
}
void TrainerSpec::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.input)
}
void TrainerSpec::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerSpec::input() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.input)
  return &input_;
}

// optional string input_format = 7;
bool TrainerSpec::has_input_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrainerSpec::set_has_input_format() {
  _has_bits_[0] |= 0x00000002u;
}
void TrainerSpec::clear_has_input_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrainerSpec::clear_input_format() {
  input_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_format();
}
const ::std::string& TrainerSpec::input_format() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input_format)
  return input_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_input_format(const ::std::string& value) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input_format)
}
void TrainerSpec::set_input_format(const char* value) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.input_format)
}
void TrainerSpec::set_input_format(const char* value, size_t size) {
  set_has_input_format();
  input_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.input_format)
}
::std::string* TrainerSpec::mutable_input_format() {
  set_has_input_format();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.input_format)
  return input_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainerSpec::release_input_format() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.input_format)
  clear_has_input_format();
  return input_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_allocated_input_format(::std::string* input_format) {
  if (input_format != NULL) {
    set_has_input_format();
  } else {
    clear_has_input_format();
  }
  input_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_format);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.input_format)
}

// optional string model_prefix = 2;
bool TrainerSpec::has_model_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrainerSpec::set_has_model_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void TrainerSpec::clear_has_model_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrainerSpec::clear_model_prefix() {
  model_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_prefix();
}
const ::std::string& TrainerSpec::model_prefix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.model_prefix)
  return model_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_model_prefix(const ::std::string& value) {
  set_has_model_prefix();
  model_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.model_prefix)
}
void TrainerSpec::set_model_prefix(const char* value) {
  set_has_model_prefix();
  model_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.model_prefix)
}
void TrainerSpec::set_model_prefix(const char* value, size_t size) {
  set_has_model_prefix();
  model_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.model_prefix)
}
::std::string* TrainerSpec::mutable_model_prefix() {
  set_has_model_prefix();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.model_prefix)
  return model_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainerSpec::release_model_prefix() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.model_prefix)
  clear_has_model_prefix();
  return model_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_allocated_model_prefix(::std::string* model_prefix) {
  if (model_prefix != NULL) {
    set_has_model_prefix();
  } else {
    clear_has_model_prefix();
  }
  model_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_prefix);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.model_prefix)
}

// optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
bool TrainerSpec::has_model_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrainerSpec::set_has_model_type() {
  _has_bits_[0] |= 0x00000008u;
}
void TrainerSpec::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrainerSpec::clear_model_type() {
  model_type_ = 1;
  clear_has_model_type();
}
::sentencepiece::TrainerSpec_ModelType TrainerSpec::model_type() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.model_type)
  return static_cast< ::sentencepiece::TrainerSpec_ModelType >(model_type_);
}
void TrainerSpec::set_model_type(::sentencepiece::TrainerSpec_ModelType value) {
  assert(::sentencepiece::TrainerSpec_ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.model_type)
}

// optional int32 vocab_size = 4 [default = 8000];
bool TrainerSpec::has_vocab_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrainerSpec::set_has_vocab_size() {
  _has_bits_[0] |= 0x00000010u;
}
void TrainerSpec::clear_has_vocab_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrainerSpec::clear_vocab_size() {
  vocab_size_ = 8000;
  clear_has_vocab_size();
}
::google::protobuf::int32 TrainerSpec::vocab_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.vocab_size)
  return vocab_size_;
}
void TrainerSpec::set_vocab_size(::google::protobuf::int32 value) {
  set_has_vocab_size();
  vocab_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.vocab_size)
}

// repeated string accept_language = 5;
int TrainerSpec::accept_language_size() const {
  return accept_language_.size();
}
void TrainerSpec::clear_accept_language() {
  accept_language_.Clear();
}
const ::std::string& TrainerSpec::accept_language(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.accept_language)
  return accept_language_.Get(index);
}
::std::string* TrainerSpec::mutable_accept_language(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.accept_language)
  return accept_language_.Mutable(index);
}
void TrainerSpec::set_accept_language(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
  accept_language_.Mutable(index)->assign(value);
}
void TrainerSpec::set_accept_language(int index, const char* value) {
  accept_language_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.accept_language)
}
void TrainerSpec::set_accept_language(int index, const char* value, size_t size) {
  accept_language_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.accept_language)
}
::std::string* TrainerSpec::add_accept_language() {
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.accept_language)
  return accept_language_.Add();
}
void TrainerSpec::add_accept_language(const ::std::string& value) {
  accept_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.accept_language)
}
void TrainerSpec::add_accept_language(const char* value) {
  accept_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.accept_language)
}
void TrainerSpec::add_accept_language(const char* value, size_t size) {
  accept_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.accept_language)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerSpec::accept_language() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.accept_language)
  return accept_language_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerSpec::mutable_accept_language() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.accept_language)
  return &accept_language_;
}

// optional int32 self_test_sample_size = 6 [default = 0];
bool TrainerSpec::has_self_test_sample_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrainerSpec::set_has_self_test_sample_size() {
  _has_bits_[0] |= 0x00000040u;
}
void TrainerSpec::clear_has_self_test_sample_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrainerSpec::clear_self_test_sample_size() {
  self_test_sample_size_ = 0;
  clear_has_self_test_sample_size();
}
::google::protobuf::int32 TrainerSpec::self_test_sample_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.self_test_sample_size)
  return self_test_sample_size_;
}
void TrainerSpec::set_self_test_sample_size(::google::protobuf::int32 value) {
  set_has_self_test_sample_size();
  self_test_sample_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.self_test_sample_size)
}

// optional bool enable_differential_privacy = 50 [default = false];
bool TrainerSpec::has_enable_differential_privacy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrainerSpec::set_has_enable_differential_privacy() {
  _has_bits_[0] |= 0x00000080u;
}
void TrainerSpec::clear_has_enable_differential_privacy() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrainerSpec::clear_enable_differential_privacy() {
  enable_differential_privacy_ = false;
  clear_has_enable_differential_privacy();
}
bool TrainerSpec::enable_differential_privacy() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.enable_differential_privacy)
  return enable_differential_privacy_;
}
void TrainerSpec::set_enable_differential_privacy(bool value) {
  set_has_enable_differential_privacy();
  enable_differential_privacy_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.enable_differential_privacy)
}

// optional float differential_privacy_noise_level = 51 [default = 0];
bool TrainerSpec::has_differential_privacy_noise_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrainerSpec::set_has_differential_privacy_noise_level() {
  _has_bits_[0] |= 0x00000100u;
}
void TrainerSpec::clear_has_differential_privacy_noise_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrainerSpec::clear_differential_privacy_noise_level() {
  differential_privacy_noise_level_ = 0;
  clear_has_differential_privacy_noise_level();
}
float TrainerSpec::differential_privacy_noise_level() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.differential_privacy_noise_level)
  return differential_privacy_noise_level_;
}
void TrainerSpec::set_differential_privacy_noise_level(float value) {
  set_has_differential_privacy_noise_level();
  differential_privacy_noise_level_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.differential_privacy_noise_level)
}

// optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
bool TrainerSpec::has_differential_privacy_clipping_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrainerSpec::set_has_differential_privacy_clipping_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void TrainerSpec::clear_has_differential_privacy_clipping_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrainerSpec::clear_differential_privacy_clipping_threshold() {
  differential_privacy_clipping_threshold_ = GOOGLE_ULONGLONG(0);
  clear_has_differential_privacy_clipping_threshold();
}
::google::protobuf::uint64 TrainerSpec::differential_privacy_clipping_threshold() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.differential_privacy_clipping_threshold)
  return differential_privacy_clipping_threshold_;
}
void TrainerSpec::set_differential_privacy_clipping_threshold(::google::protobuf::uint64 value) {
  set_has_differential_privacy_clipping_threshold();
  differential_privacy_clipping_threshold_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.differential_privacy_clipping_threshold)
}

// optional float character_coverage = 10 [default = 0.9995];
bool TrainerSpec::has_character_coverage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrainerSpec::set_has_character_coverage() {
  _has_bits_[0] |= 0x00000400u;
}
void TrainerSpec::clear_has_character_coverage() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrainerSpec::clear_character_coverage() {
  character_coverage_ = 0.9995f;
  clear_has_character_coverage();
}
float TrainerSpec::character_coverage() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.character_coverage)
  return character_coverage_;
}
void TrainerSpec::set_character_coverage(float value) {
  set_has_character_coverage();
  character_coverage_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.character_coverage)
}

// optional uint64 input_sentence_size = 11 [default = 0];
bool TrainerSpec::has_input_sentence_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrainerSpec::set_has_input_sentence_size() {
  _has_bits_[0] |= 0x00000800u;
}
void TrainerSpec::clear_has_input_sentence_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrainerSpec::clear_input_sentence_size() {
  input_sentence_size_ = GOOGLE_ULONGLONG(0);
  clear_has_input_sentence_size();
}
::google::protobuf::uint64 TrainerSpec::input_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input_sentence_size)
  return input_sentence_size_;
}
void TrainerSpec::set_input_sentence_size(::google::protobuf::uint64 value) {
  set_has_input_sentence_size();
  input_sentence_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input_sentence_size)
}

// optional bool shuffle_input_sentence = 19 [default = true];
bool TrainerSpec::has_shuffle_input_sentence() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TrainerSpec::set_has_shuffle_input_sentence() {
  _has_bits_[0] |= 0x00001000u;
}
void TrainerSpec::clear_has_shuffle_input_sentence() {
  _has_bits_[0] &= ~0x00001000u;
}
void TrainerSpec::clear_shuffle_input_sentence() {
  shuffle_input_sentence_ = true;
  clear_has_shuffle_input_sentence();
}
bool TrainerSpec::shuffle_input_sentence() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.shuffle_input_sentence)
  return shuffle_input_sentence_;
}
void TrainerSpec::set_shuffle_input_sentence(bool value) {
  set_has_shuffle_input_sentence();
  shuffle_input_sentence_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.shuffle_input_sentence)
}

// optional int32 mining_sentence_size = 12 [deprecated = true];
bool TrainerSpec::has_mining_sentence_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TrainerSpec::set_has_mining_sentence_size() {
  _has_bits_[0] |= 0x00002000u;
}
void TrainerSpec::clear_has_mining_sentence_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void TrainerSpec::clear_mining_sentence_size() {
  mining_sentence_size_ = 0;
  clear_has_mining_sentence_size();
}
::google::protobuf::int32 TrainerSpec::mining_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.mining_sentence_size)
  return mining_sentence_size_;
}
void TrainerSpec::set_mining_sentence_size(::google::protobuf::int32 value) {
  set_has_mining_sentence_size();
  mining_sentence_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.mining_sentence_size)
}

// optional int32 training_sentence_size = 13 [deprecated = true];
bool TrainerSpec::has_training_sentence_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TrainerSpec::set_has_training_sentence_size() {
  _has_bits_[0] |= 0x00004000u;
}
void TrainerSpec::clear_has_training_sentence_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void TrainerSpec::clear_training_sentence_size() {
  training_sentence_size_ = 0;
  clear_has_training_sentence_size();
}
::google::protobuf::int32 TrainerSpec::training_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.training_sentence_size)
  return training_sentence_size_;
}
void TrainerSpec::set_training_sentence_size(::google::protobuf::int32 value) {
  set_has_training_sentence_size();
  training_sentence_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.training_sentence_size)
}

// optional int32 seed_sentencepiece_size = 14 [default = 1000000];
bool TrainerSpec::has_seed_sentencepiece_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TrainerSpec::set_has_seed_sentencepiece_size() {
  _has_bits_[0] |= 0x00008000u;
}
void TrainerSpec::clear_has_seed_sentencepiece_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void TrainerSpec::clear_seed_sentencepiece_size() {
  seed_sentencepiece_size_ = 1000000;
  clear_has_seed_sentencepiece_size();
}
::google::protobuf::int32 TrainerSpec::seed_sentencepiece_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.seed_sentencepiece_size)
  return seed_sentencepiece_size_;
}
void TrainerSpec::set_seed_sentencepiece_size(::google::protobuf::int32 value) {
  set_has_seed_sentencepiece_size();
  seed_sentencepiece_size_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.seed_sentencepiece_size)
}

// optional float shrinking_factor = 15 [default = 0.75];
bool TrainerSpec::has_shrinking_factor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TrainerSpec::set_has_shrinking_factor() {
  _has_bits_[0] |= 0x00010000u;
}
void TrainerSpec::clear_has_shrinking_factor() {
  _has_bits_[0] &= ~0x00010000u;
}
void TrainerSpec::clear_shrinking_factor() {
  shrinking_factor_ = 0.75f;
  clear_has_shrinking_factor();
}
float TrainerSpec::shrinking_factor() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.shrinking_factor)
  return shrinking_factor_;
}
void TrainerSpec::set_shrinking_factor(float value) {
  set_has_shrinking_factor();
  shrinking_factor_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.shrinking_factor)
}

// optional int32 max_sentence_length = 18 [default = 4192];
bool TrainerSpec::has_max_sentence_length() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TrainerSpec::set_has_max_sentence_length() {
  _has_bits_[0] |= 0x00020000u;
}
void TrainerSpec::clear_has_max_sentence_length() {
  _has_bits_[0] &= ~0x00020000u;
}
void TrainerSpec::clear_max_sentence_length() {
  max_sentence_length_ = 4192;
  clear_has_max_sentence_length();
}
::google::protobuf::int32 TrainerSpec::max_sentence_length() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.max_sentence_length)
  return max_sentence_length_;
}
void TrainerSpec::set_max_sentence_length(::google::protobuf::int32 value) {
  set_has_max_sentence_length();
  max_sentence_length_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.max_sentence_length)
}

// optional int32 num_threads = 16 [default = 16];
bool TrainerSpec::has_num_threads() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TrainerSpec::set_has_num_threads() {
  _has_bits_[0] |= 0x00040000u;
}
void TrainerSpec::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00040000u;
}
void TrainerSpec::clear_num_threads() {
  num_threads_ = 16;
  clear_has_num_threads();
}
::google::protobuf::int32 TrainerSpec::num_threads() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.num_threads)
  return num_threads_;
}
void TrainerSpec::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.num_threads)
}

// optional int32 num_sub_iterations = 17 [default = 2];
bool TrainerSpec::has_num_sub_iterations() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TrainerSpec::set_has_num_sub_iterations() {
  _has_bits_[0] |= 0x00080000u;
}
void TrainerSpec::clear_has_num_sub_iterations() {
  _has_bits_[0] &= ~0x00080000u;
}
void TrainerSpec::clear_num_sub_iterations() {
  num_sub_iterations_ = 2;
  clear_has_num_sub_iterations();
}
::google::protobuf::int32 TrainerSpec::num_sub_iterations() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.num_sub_iterations)
  return num_sub_iterations_;
}
void TrainerSpec::set_num_sub_iterations(::google::protobuf::int32 value) {
  set_has_num_sub_iterations();
  num_sub_iterations_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.num_sub_iterations)
}

// optional int32 max_sentencepiece_length = 20 [default = 16];
bool TrainerSpec::has_max_sentencepiece_length() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TrainerSpec::set_has_max_sentencepiece_length() {
  _has_bits_[0] |= 0x00100000u;
}
void TrainerSpec::clear_has_max_sentencepiece_length() {
  _has_bits_[0] &= ~0x00100000u;
}
void TrainerSpec::clear_max_sentencepiece_length() {
  max_sentencepiece_length_ = 16;
  clear_has_max_sentencepiece_length();
}
::google::protobuf::int32 TrainerSpec::max_sentencepiece_length() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.max_sentencepiece_length)
  return max_sentencepiece_length_;
}
void TrainerSpec::set_max_sentencepiece_length(::google::protobuf::int32 value) {
  set_has_max_sentencepiece_length();
  max_sentencepiece_length_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.max_sentencepiece_length)
}

// optional bool split_by_unicode_script = 21 [default = true];
bool TrainerSpec::has_split_by_unicode_script() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TrainerSpec::set_has_split_by_unicode_script() {
  _has_bits_[0] |= 0x00200000u;
}
void TrainerSpec::clear_has_split_by_unicode_script() {
  _has_bits_[0] &= ~0x00200000u;
}
void TrainerSpec::clear_split_by_unicode_script() {
  split_by_unicode_script_ = true;
  clear_has_split_by_unicode_script();
}
bool TrainerSpec::split_by_unicode_script() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_unicode_script)
  return split_by_unicode_script_;
}
void TrainerSpec::set_split_by_unicode_script(bool value) {
  set_has_split_by_unicode_script();
  split_by_unicode_script_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_unicode_script)
}

// optional bool split_by_number = 23 [default = true];
bool TrainerSpec::has_split_by_number() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TrainerSpec::set_has_split_by_number() {
  _has_bits_[0] |= 0x00400000u;
}
void TrainerSpec::clear_has_split_by_number() {
  _has_bits_[0] &= ~0x00400000u;
}
void TrainerSpec::clear_split_by_number() {
  split_by_number_ = true;
  clear_has_split_by_number();
}
bool TrainerSpec::split_by_number() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_number)
  return split_by_number_;
}
void TrainerSpec::set_split_by_number(bool value) {
  set_has_split_by_number();
  split_by_number_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_number)
}

// optional bool split_by_whitespace = 22 [default = true];
bool TrainerSpec::has_split_by_whitespace() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TrainerSpec::set_has_split_by_whitespace() {
  _has_bits_[0] |= 0x00800000u;
}
void TrainerSpec::clear_has_split_by_whitespace() {
  _has_bits_[0] &= ~0x00800000u;
}
void TrainerSpec::clear_split_by_whitespace() {
  split_by_whitespace_ = true;
  clear_has_split_by_whitespace();
}
bool TrainerSpec::split_by_whitespace() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_whitespace)
  return split_by_whitespace_;
}
void TrainerSpec::set_split_by_whitespace(bool value) {
  set_has_split_by_whitespace();
  split_by_whitespace_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_whitespace)
}

// optional bool treat_whitespace_as_suffix = 24 [default = false];
bool TrainerSpec::has_treat_whitespace_as_suffix() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void TrainerSpec::set_has_treat_whitespace_as_suffix() {
  _has_bits_[0] |= 0x01000000u;
}
void TrainerSpec::clear_has_treat_whitespace_as_suffix() {
  _has_bits_[0] &= ~0x01000000u;
}
void TrainerSpec::clear_treat_whitespace_as_suffix() {
  treat_whitespace_as_suffix_ = false;
  clear_has_treat_whitespace_as_suffix();
}
bool TrainerSpec::treat_whitespace_as_suffix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.treat_whitespace_as_suffix)
  return treat_whitespace_as_suffix_;
}
void TrainerSpec::set_treat_whitespace_as_suffix(bool value) {
  set_has_treat_whitespace_as_suffix();
  treat_whitespace_as_suffix_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.treat_whitespace_as_suffix)
}

// optional bool allow_whitespace_only_pieces = 26 [default = false];
bool TrainerSpec::has_allow_whitespace_only_pieces() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void TrainerSpec::set_has_allow_whitespace_only_pieces() {
  _has_bits_[0] |= 0x02000000u;
}
void TrainerSpec::clear_has_allow_whitespace_only_pieces() {
  _has_bits_[0] &= ~0x02000000u;
}
void TrainerSpec::clear_allow_whitespace_only_pieces() {
  allow_whitespace_only_pieces_ = false;
  clear_has_allow_whitespace_only_pieces();
}
bool TrainerSpec::allow_whitespace_only_pieces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.allow_whitespace_only_pieces)
  return allow_whitespace_only_pieces_;
}
void TrainerSpec::set_allow_whitespace_only_pieces(bool value) {
  set_has_allow_whitespace_only_pieces();
  allow_whitespace_only_pieces_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.allow_whitespace_only_pieces)
}

// optional bool split_digits = 25 [default = false];
bool TrainerSpec::has_split_digits() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void TrainerSpec::set_has_split_digits() {
  _has_bits_[0] |= 0x04000000u;
}
void TrainerSpec::clear_has_split_digits() {
  _has_bits_[0] &= ~0x04000000u;
}
void TrainerSpec::clear_split_digits() {
  split_digits_ = false;
  clear_has_split_digits();
}
bool TrainerSpec::split_digits() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_digits)
  return split_digits_;
}
void TrainerSpec::set_split_digits(bool value) {
  set_has_split_digits();
  split_digits_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_digits)
}

// optional string pretokenization_delimiter = 53 [default = ""];
bool TrainerSpec::has_pretokenization_delimiter() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void TrainerSpec::set_has_pretokenization_delimiter() {
  _has_bits_[0] |= 0x08000000u;
}
void TrainerSpec::clear_has_pretokenization_delimiter() {
  _has_bits_[0] &= ~0x08000000u;
}
void TrainerSpec::clear_pretokenization_delimiter() {
  pretokenization_delimiter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretokenization_delimiter();
}
const ::std::string& TrainerSpec::pretokenization_delimiter() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pretokenization_delimiter)
  return pretokenization_delimiter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_pretokenization_delimiter(const ::std::string& value) {
  set_has_pretokenization_delimiter();
  pretokenization_delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pretokenization_delimiter)
}
void TrainerSpec::set_pretokenization_delimiter(const char* value) {
  set_has_pretokenization_delimiter();
  pretokenization_delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.pretokenization_delimiter)
}
void TrainerSpec::set_pretokenization_delimiter(const char* value, size_t size) {
  set_has_pretokenization_delimiter();
  pretokenization_delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.pretokenization_delimiter)
}
::std::string* TrainerSpec::mutable_pretokenization_delimiter() {
  set_has_pretokenization_delimiter();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.pretokenization_delimiter)
  return pretokenization_delimiter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainerSpec::release_pretokenization_delimiter() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.pretokenization_delimiter)
  clear_has_pretokenization_delimiter();
  return pretokenization_delimiter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_allocated_pretokenization_delimiter(::std::string* pretokenization_delimiter) {
  if (pretokenization_delimiter != NULL) {
    set_has_pretokenization_delimiter();
  } else {
    clear_has_pretokenization_delimiter();
  }
  pretokenization_delimiter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretokenization_delimiter);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.pretokenization_delimiter)
}

// repeated string control_symbols = 30;
int TrainerSpec::control_symbols_size() const {
  return control_symbols_.size();
}
void TrainerSpec::clear_control_symbols() {
  control_symbols_.Clear();
}
const ::std::string& TrainerSpec::control_symbols(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.control_symbols)
  return control_symbols_.Get(index);
}
::std::string* TrainerSpec::mutable_control_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.control_symbols)
  return control_symbols_.Mutable(index);
}
void TrainerSpec::set_control_symbols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
  control_symbols_.Mutable(index)->assign(value);
}
void TrainerSpec::set_control_symbols(int index, const char* value) {
  control_symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.control_symbols)
}
void TrainerSpec::set_control_symbols(int index, const char* value, size_t size) {
  control_symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.control_symbols)
}
::std::string* TrainerSpec::add_control_symbols() {
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.control_symbols)
  return control_symbols_.Add();
}
void TrainerSpec::add_control_symbols(const ::std::string& value) {
  control_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.control_symbols)
}
void TrainerSpec::add_control_symbols(const char* value) {
  control_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.control_symbols)
}
void TrainerSpec::add_control_symbols(const char* value, size_t size) {
  control_symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.control_symbols)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerSpec::control_symbols() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.control_symbols)
  return control_symbols_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerSpec::mutable_control_symbols() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.control_symbols)
  return &control_symbols_;
}

// repeated string user_defined_symbols = 31;
int TrainerSpec::user_defined_symbols_size() const {
  return user_defined_symbols_.size();
}
void TrainerSpec::clear_user_defined_symbols() {
  user_defined_symbols_.Clear();
}
const ::std::string& TrainerSpec::user_defined_symbols(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.user_defined_symbols)
  return user_defined_symbols_.Get(index);
}
::std::string* TrainerSpec::mutable_user_defined_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.user_defined_symbols)
  return user_defined_symbols_.Mutable(index);
}
void TrainerSpec::set_user_defined_symbols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
  user_defined_symbols_.Mutable(index)->assign(value);
}
void TrainerSpec::set_user_defined_symbols(int index, const char* value) {
  user_defined_symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.user_defined_symbols)
}
void TrainerSpec::set_user_defined_symbols(int index, const char* value, size_t size) {
  user_defined_symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.user_defined_symbols)
}
::std::string* TrainerSpec::add_user_defined_symbols() {
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.user_defined_symbols)
  return user_defined_symbols_.Add();
}
void TrainerSpec::add_user_defined_symbols(const ::std::string& value) {
  user_defined_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.user_defined_symbols)
}
void TrainerSpec::add_user_defined_symbols(const char* value) {
  user_defined_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.user_defined_symbols)
}
void TrainerSpec::add_user_defined_symbols(const char* value, size_t size) {
  user_defined_symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.user_defined_symbols)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerSpec::user_defined_symbols() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.user_defined_symbols)
  return user_defined_symbols_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerSpec::mutable_user_defined_symbols() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.user_defined_symbols)
  return &user_defined_symbols_;
}

// optional string required_chars = 36;
bool TrainerSpec::has_required_chars() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void TrainerSpec::set_has_required_chars() {
  _has_bits_[0] |= 0x40000000u;
}
void TrainerSpec::clear_has_required_chars() {
  _has_bits_[0] &= ~0x40000000u;
}
void TrainerSpec::clear_required_chars() {
  required_chars_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_required_chars();
}
const ::std::string& TrainerSpec::required_chars() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.required_chars)
  return required_chars_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_required_chars(const ::std::string& value) {
  set_has_required_chars();
  required_chars_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.required_chars)
}
void TrainerSpec::set_required_chars(const char* value) {
  set_has_required_chars();
  required_chars_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.required_chars)
}
void TrainerSpec::set_required_chars(const char* value, size_t size) {
  set_has_required_chars();
  required_chars_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.required_chars)
}
::std::string* TrainerSpec::mutable_required_chars() {
  set_has_required_chars();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.required_chars)
  return required_chars_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainerSpec::release_required_chars() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.required_chars)
  clear_has_required_chars();
  return required_chars_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainerSpec::set_allocated_required_chars(::std::string* required_chars) {
  if (required_chars != NULL) {
    set_has_required_chars();
  } else {
    clear_has_required_chars();
  }
  required_chars_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_chars);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.required_chars)
}

// optional bool byte_fallback = 35 [default = false];
bool TrainerSpec::has_byte_fallback() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void TrainerSpec::set_has_byte_fallback() {
  _has_bits_[0] |= 0x80000000u;
}
void TrainerSpec::clear_has_byte_fallback() {
  _has_bits_[0] &= ~0x80000000u;
}
void TrainerSpec::clear_byte_fallback() {
  byte_fallback_ = false;
  clear_has_byte_fallback();
}
bool TrainerSpec::byte_fallback() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.byte_fallback)
  return byte_fallback_;
}
void TrainerSpec::set_byte_fallback(bool value) {
  set_has_byte_fallback();
  byte_fallback_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.byte_fallback)
}

// optional bool vocabulary_output_piece_score = 32 [default = true];
bool TrainerSpec::has_vocabulary_output_piece_score() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void TrainerSpec::set_has_vocabulary_output_piece_score() {
  _has_bits_[1] |= 0x00000001u;
}
void TrainerSpec::clear_has_vocabulary_output_piece_score() {
  _has_bits_[1] &= ~0x00000001u;
}
void TrainerSpec::clear_vocabulary_output_piece_score() {
  vocabulary_output_piece_score_ = true;
  clear_has_vocabulary_output_piece_score();
}
bool TrainerSpec::vocabulary_output_piece_score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.vocabulary_output_piece_score)
  return vocabulary_output_piece_score_;
}
void TrainerSpec::set_vocabulary_output_piece_score(bool value) {
  set_has_vocabulary_output_piece_score();
  vocabulary_output_piece_score_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.vocabulary_output_piece_score)
}

// optional bool hard_vocab_limit = 33 [default = true];
bool TrainerSpec::has_hard_vocab_limit() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void TrainerSpec::set_has_hard_vocab_limit() {
  _has_bits_[1] |= 0x00000002u;
}
void TrainerSpec::clear_has_hard_vocab_limit() {
  _has_bits_[1] &= ~0x00000002u;
}
void TrainerSpec::clear_hard_vocab_limit() {
  hard_vocab_limit_ = true;
  clear_has_hard_vocab_limit();
}
bool TrainerSpec::hard_vocab_limit() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.hard_vocab_limit)
  return hard_vocab_limit_;
}
void TrainerSpec::set_hard_vocab_limit(bool value) {
  set_has_hard_vocab_limit();
  hard_vocab_limit_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.hard_vocab_limit)
}

// optional bool use_all_vocab = 34 [default = false];
bool TrainerSpec::has_use_all_vocab() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void TrainerSpec::set_has_use_all_vocab() {
  _has_bits_[1] |= 0x00000004u;
}
void TrainerSpec::clear_has_use_all_vocab() {
  _has_bits_[1] &= ~0x00000004u;
}
void TrainerSpec::clear_use_all_vocab() {
  use_all_vocab_ = false;
  clear_has_use_all_vocab();
}
bool TrainerSpec::use_all_vocab() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.use_all_vocab)
  return use_all_vocab_;
}
void TrainerSpec::set_use_all_vocab(bool value) {
  set_has_use_all_vocab();
  use_all_vocab_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.use_all_vocab)
}

// optional int32 unk_id = 40 [default = 0];
bool TrainerSpec::has_unk_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void TrainerSpec::set_has_unk_id() {
  _has_bits_[1] |= 0x00000008u;
}
void TrainerSpec::clear_has_unk_id() {
  _has_bits_[1] &= ~0x00000008u;
}
void TrainerSpec::clear_unk_id() {
  unk_id_ = 0;
  clear_has_unk_id();
}
::google::protobuf::int32 TrainerSpec::unk_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_id)
  return unk_id_;
}
void TrainerSpec::set_unk_id(::google::protobuf::int32 value) {
  set_has_unk_id();
  unk_id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_id)
}

// optional int32 bos_id = 41 [default = 1];
bool TrainerSpec::has_bos_id() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void TrainerSpec::set_has_bos_id() {
  _has_bits_[1] |= 0x00000010u;
}
void TrainerSpec::clear_has_bos_id() {
  _has_bits_[1] &= ~0x00000010u;
}
void TrainerSpec::clear_bos_id() {
  bos_id_ = 1;
  clear_has_bos_id();
}
::google::protobuf::int32 TrainerSpec::bos_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.bos_id)
  return bos_id_;
}
void TrainerSpec::set_bos_id(::google::protobuf::int32 value) {
  set_has_bos_id();
  bos_id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.bos_id)
}

// optional int32 eos_id = 42 [default = 2];
bool TrainerSpec::has_eos_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void TrainerSpec::set_has_eos_id() {
  _has_bits_[1] |= 0x00000020u;
}
void TrainerSpec::clear_has_eos_id() {
  _has_bits_[1] &= ~0x00000020u;
}
void TrainerSpec::clear_eos_id() {
  eos_id_ = 2;
  clear_has_eos_id();
}
::google::protobuf::int32 TrainerSpec::eos_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.eos_id)
  return eos_id_;
}
void TrainerSpec::set_eos_id(::google::protobuf::int32 value) {
  set_has_eos_id();
  eos_id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.eos_id)
}

// optional int32 pad_id = 43 [default = -1];
bool TrainerSpec::has_pad_id() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void TrainerSpec::set_has_pad_id() {
  _has_bits_[1] |= 0x00000040u;
}
void TrainerSpec::clear_has_pad_id() {
  _has_bits_[1] &= ~0x00000040u;
}
void TrainerSpec::clear_pad_id() {
  pad_id_ = -1;
  clear_has_pad_id();
}
::google::protobuf::int32 TrainerSpec::pad_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pad_id)
  return pad_id_;
}
void TrainerSpec::set_pad_id(::google::protobuf::int32 value) {
  set_has_pad_id();
  pad_id_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pad_id)
}

// optional string unk_piece = 45 [default = "<unk>"];
bool TrainerSpec::has_unk_piece() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void TrainerSpec::set_has_unk_piece() {
  _has_bits_[1] |= 0x00000080u;
}
void TrainerSpec::clear_has_unk_piece() {
  _has_bits_[1] &= ~0x00000080u;
}
void TrainerSpec::clear_unk_piece() {
  unk_piece_.ClearToDefaultNoArena(_default_unk_piece_);
  clear_has_unk_piece();
}
const ::std::string& TrainerSpec::unk_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_piece)
  return unk_piece_.GetNoArena(_default_unk_piece_);
}
void TrainerSpec::set_unk_piece(const ::std::string& value) {
  set_has_unk_piece();
  unk_piece_.SetNoArena(_default_unk_piece_, value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_piece)
}
void TrainerSpec::set_unk_piece(const char* value) {
  set_has_unk_piece();
  unk_piece_.SetNoArena(_default_unk_piece_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.unk_piece)
}
void TrainerSpec::set_unk_piece(const char* value, size_t size) {
  set_has_unk_piece();
  unk_piece_.SetNoArena(_default_unk_piece_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.unk_piece)
}
::std::string* TrainerSpec::mutable_unk_piece() {
  set_has_unk_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_piece)
  return unk_piece_.MutableNoArena(_default_unk_piece_);
}
::std::string* TrainerSpec::release_unk_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_piece)
  clear_has_unk_piece();
  return unk_piece_.ReleaseNoArena(_default_unk_piece_);
}
void TrainerSpec::set_allocated_unk_piece(::std::string* unk_piece) {
  if (unk_piece != NULL) {
    set_has_unk_piece();
  } else {
    clear_has_unk_piece();
  }
  unk_piece_.SetAllocatedNoArena(_default_unk_piece_, unk_piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_piece)
}

// optional string bos_piece = 46 [default = "<s>"];
bool TrainerSpec::has_bos_piece() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void TrainerSpec::set_has_bos_piece() {
  _has_bits_[1] |= 0x00000100u;
}
void TrainerSpec::clear_has_bos_piece() {
  _has_bits_[1] &= ~0x00000100u;
}
void TrainerSpec::clear_bos_piece() {
  bos_piece_.ClearToDefaultNoArena(_default_bos_piece_);
  clear_has_bos_piece();
}
const ::std::string& TrainerSpec::bos_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.bos_piece)
  return bos_piece_.GetNoArena(_default_bos_piece_);
}
void TrainerSpec::set_bos_piece(const ::std::string& value) {
  set_has_bos_piece();
  bos_piece_.SetNoArena(_default_bos_piece_, value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.bos_piece)
}
void TrainerSpec::set_bos_piece(const char* value) {
  set_has_bos_piece();
  bos_piece_.SetNoArena(_default_bos_piece_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.bos_piece)
}
void TrainerSpec::set_bos_piece(const char* value, size_t size) {
  set_has_bos_piece();
  bos_piece_.SetNoArena(_default_bos_piece_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.bos_piece)
}
::std::string* TrainerSpec::mutable_bos_piece() {
  set_has_bos_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.bos_piece)
  return bos_piece_.MutableNoArena(_default_bos_piece_);
}
::std::string* TrainerSpec::release_bos_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.bos_piece)
  clear_has_bos_piece();
  return bos_piece_.ReleaseNoArena(_default_bos_piece_);
}
void TrainerSpec::set_allocated_bos_piece(::std::string* bos_piece) {
  if (bos_piece != NULL) {
    set_has_bos_piece();
  } else {
    clear_has_bos_piece();
  }
  bos_piece_.SetAllocatedNoArena(_default_bos_piece_, bos_piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.bos_piece)
}

// optional string eos_piece = 47 [default = "</s>"];
bool TrainerSpec::has_eos_piece() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void TrainerSpec::set_has_eos_piece() {
  _has_bits_[1] |= 0x00000200u;
}
void TrainerSpec::clear_has_eos_piece() {
  _has_bits_[1] &= ~0x00000200u;
}
void TrainerSpec::clear_eos_piece() {
  eos_piece_.ClearToDefaultNoArena(_default_eos_piece_);
  clear_has_eos_piece();
}
const ::std::string& TrainerSpec::eos_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.eos_piece)
  return eos_piece_.GetNoArena(_default_eos_piece_);
}
void TrainerSpec::set_eos_piece(const ::std::string& value) {
  set_has_eos_piece();
  eos_piece_.SetNoArena(_default_eos_piece_, value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.eos_piece)
}
void TrainerSpec::set_eos_piece(const char* value) {
  set_has_eos_piece();
  eos_piece_.SetNoArena(_default_eos_piece_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.eos_piece)
}
void TrainerSpec::set_eos_piece(const char* value, size_t size) {
  set_has_eos_piece();
  eos_piece_.SetNoArena(_default_eos_piece_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.eos_piece)
}
::std::string* TrainerSpec::mutable_eos_piece() {
  set_has_eos_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.eos_piece)
  return eos_piece_.MutableNoArena(_default_eos_piece_);
}
::std::string* TrainerSpec::release_eos_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.eos_piece)
  clear_has_eos_piece();
  return eos_piece_.ReleaseNoArena(_default_eos_piece_);
}
void TrainerSpec::set_allocated_eos_piece(::std::string* eos_piece) {
  if (eos_piece != NULL) {
    set_has_eos_piece();
  } else {
    clear_has_eos_piece();
  }
  eos_piece_.SetAllocatedNoArena(_default_eos_piece_, eos_piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.eos_piece)
}

// optional string pad_piece = 48 [default = "<pad>"];
bool TrainerSpec::has_pad_piece() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void TrainerSpec::set_has_pad_piece() {
  _has_bits_[1] |= 0x00000400u;
}
void TrainerSpec::clear_has_pad_piece() {
  _has_bits_[1] &= ~0x00000400u;
}
void TrainerSpec::clear_pad_piece() {
  pad_piece_.ClearToDefaultNoArena(_default_pad_piece_);
  clear_has_pad_piece();
}
const ::std::string& TrainerSpec::pad_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pad_piece)
  return pad_piece_.GetNoArena(_default_pad_piece_);
}
void TrainerSpec::set_pad_piece(const ::std::string& value) {
  set_has_pad_piece();
  pad_piece_.SetNoArena(_default_pad_piece_, value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pad_piece)
}
void TrainerSpec::set_pad_piece(const char* value) {
  set_has_pad_piece();
  pad_piece_.SetNoArena(_default_pad_piece_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.pad_piece)
}
void TrainerSpec::set_pad_piece(const char* value, size_t size) {
  set_has_pad_piece();
  pad_piece_.SetNoArena(_default_pad_piece_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.pad_piece)
}
::std::string* TrainerSpec::mutable_pad_piece() {
  set_has_pad_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.pad_piece)
  return pad_piece_.MutableNoArena(_default_pad_piece_);
}
::std::string* TrainerSpec::release_pad_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.pad_piece)
  clear_has_pad_piece();
  return pad_piece_.ReleaseNoArena(_default_pad_piece_);
}
void TrainerSpec::set_allocated_pad_piece(::std::string* pad_piece) {
  if (pad_piece != NULL) {
    set_has_pad_piece();
  } else {
    clear_has_pad_piece();
  }
  pad_piece_.SetAllocatedNoArena(_default_pad_piece_, pad_piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.pad_piece)
}

// optional string unk_surface = 44 [default = " \342\201\207 "];
bool TrainerSpec::has_unk_surface() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void TrainerSpec::set_has_unk_surface() {
  _has_bits_[1] |= 0x00000800u;
}
void TrainerSpec::clear_has_unk_surface() {
  _has_bits_[1] &= ~0x00000800u;
}
void TrainerSpec::clear_unk_surface() {
  unk_surface_.ClearToDefaultNoArena(_default_unk_surface_);
  clear_has_unk_surface();
}
const ::std::string& TrainerSpec::unk_surface() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_surface)
  return unk_surface_.GetNoArena(_default_unk_surface_);
}
void TrainerSpec::set_unk_surface(const ::std::string& value) {
  set_has_unk_surface();
  unk_surface_.SetNoArena(_default_unk_surface_, value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_surface)
}
void TrainerSpec::set_unk_surface(const char* value) {
  set_has_unk_surface();
  unk_surface_.SetNoArena(_default_unk_surface_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.unk_surface)
}
void TrainerSpec::set_unk_surface(const char* value, size_t size) {
  set_has_unk_surface();
  unk_surface_.SetNoArena(_default_unk_surface_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.unk_surface)
}
::std::string* TrainerSpec::mutable_unk_surface() {
  set_has_unk_surface();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_surface)
  return unk_surface_.MutableNoArena(_default_unk_surface_);
}
::std::string* TrainerSpec::release_unk_surface() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_surface)
  clear_has_unk_surface();
  return unk_surface_.ReleaseNoArena(_default_unk_surface_);
}
void TrainerSpec::set_allocated_unk_surface(::std::string* unk_surface) {
  if (unk_surface != NULL) {
    set_has_unk_surface();
  } else {
    clear_has_unk_surface();
  }
  unk_surface_.SetAllocatedNoArena(_default_unk_surface_, unk_surface);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_surface)
}

// optional bool train_extremely_large_corpus = 49 [default = false];
bool TrainerSpec::has_train_extremely_large_corpus() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void TrainerSpec::set_has_train_extremely_large_corpus() {
  _has_bits_[1] |= 0x00001000u;
}
void TrainerSpec::clear_has_train_extremely_large_corpus() {
  _has_bits_[1] &= ~0x00001000u;
}
void TrainerSpec::clear_train_extremely_large_corpus() {
  train_extremely_large_corpus_ = false;
  clear_has_train_extremely_large_corpus();
}
bool TrainerSpec::train_extremely_large_corpus() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.train_extremely_large_corpus)
  return train_extremely_large_corpus_;
}
void TrainerSpec::set_train_extremely_large_corpus(bool value) {
  set_has_train_extremely_large_corpus();
  train_extremely_large_corpus_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.train_extremely_large_corpus)
}

inline const TrainerSpec* TrainerSpec::internal_default_instance() {
  return &TrainerSpec_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNormalizerSpec(
    NormalizerSpec* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizerSpec::kNameFieldNumber;
const int NormalizerSpec::kPrecompiledCharsmapFieldNumber;
const int NormalizerSpec::kAddDummyPrefixFieldNumber;
const int NormalizerSpec::kRemoveExtraWhitespacesFieldNumber;
const int NormalizerSpec::kEscapeWhitespacesFieldNumber;
const int NormalizerSpec::kNormalizationRuleTsvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizerSpec::NormalizerSpec()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.NormalizerSpec)
}

void NormalizerSpec::InitAsDefaultInstance() {
}

NormalizerSpec::NormalizerSpec(const NormalizerSpec& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.NormalizerSpec)
}

void NormalizerSpec::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  precompiled_charsmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normalization_rule_tsv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_dummy_prefix_ = true;
  remove_extra_whitespaces_ = true;
  escape_whitespaces_ = true;
}

NormalizerSpec::~NormalizerSpec() {
  // @@protoc_insertion_point(destructor:sentencepiece.NormalizerSpec)
  SharedDtor();
}

void NormalizerSpec::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  precompiled_charsmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normalization_rule_tsv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NormalizerSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NormalizerSpec& NormalizerSpec::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NormalizerSpec> NormalizerSpec_default_instance_;

NormalizerSpec* NormalizerSpec::New(::google::protobuf::Arena* arena) const {
  NormalizerSpec* n = new NormalizerSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.NormalizerSpec)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_precompiled_charsmap()) {
      precompiled_charsmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    add_dummy_prefix_ = true;
    remove_extra_whitespaces_ = true;
    escape_whitespaces_ = true;
    if (has_normalization_rule_tsv()) {
      normalization_rule_tsv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NormalizerSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForNormalizerSpec, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.NormalizerSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_precompiled_charsmap;
        break;
      }

      // optional bytes precompiled_charsmap = 2;
      case 2: {
        if (tag == 18) {
         parse_precompiled_charsmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_precompiled_charsmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add_dummy_prefix;
        break;
      }

      // optional bool add_dummy_prefix = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_add_dummy_prefix:
          set_has_add_dummy_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_dummy_prefix_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remove_extra_whitespaces;
        break;
      }

      // optional bool remove_extra_whitespaces = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_remove_extra_whitespaces:
          set_has_remove_extra_whitespaces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_extra_whitespaces_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_escape_whitespaces;
        break;
      }

      // optional bool escape_whitespaces = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_escape_whitespaces:
          set_has_escape_whitespaces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &escape_whitespaces_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_normalization_rule_tsv;
        break;
      }

      // optional string normalization_rule_tsv = 6;
      case 6: {
        if (tag == 50) {
         parse_normalization_rule_tsv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalization_rule_tsv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.NormalizerSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.NormalizerSpec)
  return false;
#undef DO_
}

void NormalizerSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.NormalizerSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes precompiled_charsmap = 2;
  if (has_precompiled_charsmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->precompiled_charsmap(), output);
  }

  // optional bool add_dummy_prefix = 3 [default = true];
  if (has_add_dummy_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->add_dummy_prefix(), output);
  }

  // optional bool remove_extra_whitespaces = 4 [default = true];
  if (has_remove_extra_whitespaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remove_extra_whitespaces(), output);
  }

  // optional bool escape_whitespaces = 5 [default = true];
  if (has_escape_whitespaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->escape_whitespaces(), output);
  }

  // optional string normalization_rule_tsv = 6;
  if (has_normalization_rule_tsv()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->normalization_rule_tsv(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.NormalizerSpec)
}

size_t NormalizerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.NormalizerSpec)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes precompiled_charsmap = 2;
    if (has_precompiled_charsmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->precompiled_charsmap());
    }

    // optional bool add_dummy_prefix = 3 [default = true];
    if (has_add_dummy_prefix()) {
      total_size += 1 + 1;
    }

    // optional bool remove_extra_whitespaces = 4 [default = true];
    if (has_remove_extra_whitespaces()) {
      total_size += 1 + 1;
    }

    // optional bool escape_whitespaces = 5 [default = true];
    if (has_escape_whitespaces()) {
      total_size += 1 + 1;
    }

    // optional string normalization_rule_tsv = 6;
    if (has_normalization_rule_tsv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalization_rule_tsv());
    }

  }
  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizerSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NormalizerSpec*>(&from));
}

void NormalizerSpec::MergeFrom(const NormalizerSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.NormalizerSpec)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NormalizerSpec::UnsafeMergeFrom(const NormalizerSpec& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_precompiled_charsmap()) {
      set_has_precompiled_charsmap();
      precompiled_charsmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.precompiled_charsmap_);
    }
    if (from.has_add_dummy_prefix()) {
      set_add_dummy_prefix(from.add_dummy_prefix());
    }
    if (from.has_remove_extra_whitespaces()) {
      set_remove_extra_whitespaces(from.remove_extra_whitespaces());
    }
    if (from.has_escape_whitespaces()) {
      set_escape_whitespaces(from.escape_whitespaces());
    }
    if (from.has_normalization_rule_tsv()) {
      set_has_normalization_rule_tsv();
      normalization_rule_tsv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normalization_rule_tsv_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NormalizerSpec::CopyFrom(const NormalizerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.NormalizerSpec)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NormalizerSpec::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void NormalizerSpec::Swap(NormalizerSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizerSpec::InternalSwap(NormalizerSpec* other) {
  name_.Swap(&other->name_);
  precompiled_charsmap_.Swap(&other->precompiled_charsmap_);
  std::swap(add_dummy_prefix_, other->add_dummy_prefix_);
  std::swap(remove_extra_whitespaces_, other->remove_extra_whitespaces_);
  std::swap(escape_whitespaces_, other->escape_whitespaces_);
  normalization_rule_tsv_.Swap(&other->normalization_rule_tsv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string NormalizerSpec::GetTypeName() const {
  return "sentencepiece.NormalizerSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizerSpec

// optional string name = 1;
bool NormalizerSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizerSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizerSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizerSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NormalizerSpec::name() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.name)
}
void NormalizerSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.name)
}
void NormalizerSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.name)
}
::std::string* NormalizerSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NormalizerSpec::release_name() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.name)
}

// optional bytes precompiled_charsmap = 2;
bool NormalizerSpec::has_precompiled_charsmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizerSpec::set_has_precompiled_charsmap() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizerSpec::clear_has_precompiled_charsmap() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizerSpec::clear_precompiled_charsmap() {
  precompiled_charsmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_precompiled_charsmap();
}
const ::std::string& NormalizerSpec::precompiled_charsmap() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.precompiled_charsmap)
  return precompiled_charsmap_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_precompiled_charsmap(const ::std::string& value) {
  set_has_precompiled_charsmap();
  precompiled_charsmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.precompiled_charsmap)
}
void NormalizerSpec::set_precompiled_charsmap(const char* value) {
  set_has_precompiled_charsmap();
  precompiled_charsmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.precompiled_charsmap)
}
void NormalizerSpec::set_precompiled_charsmap(const void* value, size_t size) {
  set_has_precompiled_charsmap();
  precompiled_charsmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.precompiled_charsmap)
}
::std::string* NormalizerSpec::mutable_precompiled_charsmap() {
  set_has_precompiled_charsmap();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.precompiled_charsmap)
  return precompiled_charsmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NormalizerSpec::release_precompiled_charsmap() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.precompiled_charsmap)
  clear_has_precompiled_charsmap();
  return precompiled_charsmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_allocated_precompiled_charsmap(::std::string* precompiled_charsmap) {
  if (precompiled_charsmap != NULL) {
    set_has_precompiled_charsmap();
  } else {
    clear_has_precompiled_charsmap();
  }
  precompiled_charsmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), precompiled_charsmap);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.precompiled_charsmap)
}

// optional bool add_dummy_prefix = 3 [default = true];
bool NormalizerSpec::has_add_dummy_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizerSpec::set_has_add_dummy_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizerSpec::clear_has_add_dummy_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizerSpec::clear_add_dummy_prefix() {
  add_dummy_prefix_ = true;
  clear_has_add_dummy_prefix();
}
bool NormalizerSpec::add_dummy_prefix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.add_dummy_prefix)
  return add_dummy_prefix_;
}
void NormalizerSpec::set_add_dummy_prefix(bool value) {
  set_has_add_dummy_prefix();
  add_dummy_prefix_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.add_dummy_prefix)
}

// optional bool remove_extra_whitespaces = 4 [default = true];
bool NormalizerSpec::has_remove_extra_whitespaces() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NormalizerSpec::set_has_remove_extra_whitespaces() {
  _has_bits_[0] |= 0x00000008u;
}
void NormalizerSpec::clear_has_remove_extra_whitespaces() {
  _has_bits_[0] &= ~0x00000008u;
}
void NormalizerSpec::clear_remove_extra_whitespaces() {
  remove_extra_whitespaces_ = true;
  clear_has_remove_extra_whitespaces();
}
bool NormalizerSpec::remove_extra_whitespaces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.remove_extra_whitespaces)
  return remove_extra_whitespaces_;
}
void NormalizerSpec::set_remove_extra_whitespaces(bool value) {
  set_has_remove_extra_whitespaces();
  remove_extra_whitespaces_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.remove_extra_whitespaces)
}

// optional bool escape_whitespaces = 5 [default = true];
bool NormalizerSpec::has_escape_whitespaces() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NormalizerSpec::set_has_escape_whitespaces() {
  _has_bits_[0] |= 0x00000010u;
}
void NormalizerSpec::clear_has_escape_whitespaces() {
  _has_bits_[0] &= ~0x00000010u;
}
void NormalizerSpec::clear_escape_whitespaces() {
  escape_whitespaces_ = true;
  clear_has_escape_whitespaces();
}
bool NormalizerSpec::escape_whitespaces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.escape_whitespaces)
  return escape_whitespaces_;
}
void NormalizerSpec::set_escape_whitespaces(bool value) {
  set_has_escape_whitespaces();
  escape_whitespaces_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.escape_whitespaces)
}

// optional string normalization_rule_tsv = 6;
bool NormalizerSpec::has_normalization_rule_tsv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NormalizerSpec::set_has_normalization_rule_tsv() {
  _has_bits_[0] |= 0x00000020u;
}
void NormalizerSpec::clear_has_normalization_rule_tsv() {
  _has_bits_[0] &= ~0x00000020u;
}
void NormalizerSpec::clear_normalization_rule_tsv() {
  normalization_rule_tsv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normalization_rule_tsv();
}
const ::std::string& NormalizerSpec::normalization_rule_tsv() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  return normalization_rule_tsv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_normalization_rule_tsv(const ::std::string& value) {
  set_has_normalization_rule_tsv();
  normalization_rule_tsv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}
void NormalizerSpec::set_normalization_rule_tsv(const char* value) {
  set_has_normalization_rule_tsv();
  normalization_rule_tsv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}
void NormalizerSpec::set_normalization_rule_tsv(const char* value, size_t size) {
  set_has_normalization_rule_tsv();
  normalization_rule_tsv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}
::std::string* NormalizerSpec::mutable_normalization_rule_tsv() {
  set_has_normalization_rule_tsv();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  return normalization_rule_tsv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NormalizerSpec::release_normalization_rule_tsv() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  clear_has_normalization_rule_tsv();
  return normalization_rule_tsv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NormalizerSpec::set_allocated_normalization_rule_tsv(::std::string* normalization_rule_tsv) {
  if (normalization_rule_tsv != NULL) {
    set_has_normalization_rule_tsv();
  } else {
    clear_has_normalization_rule_tsv();
  }
  normalization_rule_tsv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normalization_rule_tsv);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}

inline const NormalizerSpec* NormalizerSpec::internal_default_instance() {
  return &NormalizerSpec_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSelfTestData(
    SelfTestData* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSelfTestData_Sample(
    SelfTestData_Sample* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfTestData_Sample::kInputFieldNumber;
const int SelfTestData_Sample::kExpectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfTestData_Sample::SelfTestData_Sample()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.SelfTestData.Sample)
}

void SelfTestData_Sample::InitAsDefaultInstance() {
}

SelfTestData_Sample::SelfTestData_Sample(const SelfTestData_Sample& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SelfTestData.Sample)
}

void SelfTestData_Sample::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expected_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SelfTestData_Sample::~SelfTestData_Sample() {
  // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData.Sample)
  SharedDtor();
}

void SelfTestData_Sample::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expected_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelfTestData_Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SelfTestData_Sample& SelfTestData_Sample::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SelfTestData_Sample> SelfTestData_Sample_default_instance_;

SelfTestData_Sample* SelfTestData_Sample::New(::google::protobuf::Arena* arena) const {
  SelfTestData_Sample* n = new SelfTestData_Sample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfTestData_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData.Sample)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_input()) {
      input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_expected()) {
      expected_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SelfTestData_Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSelfTestData_Sample, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.SelfTestData.Sample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_expected;
        break;
      }

      // optional string expected = 2;
      case 2: {
        if (tag == 18) {
         parse_expected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.SelfTestData.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.SelfTestData.Sample)
  return false;
#undef DO_
}

void SelfTestData_Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.SelfTestData.Sample)
  // optional string input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input(), output);
  }

  // optional string expected = 2;
  if (has_expected()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->expected(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.SelfTestData.Sample)
}

size_t SelfTestData_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SelfTestData.Sample)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

    // optional string expected = 2;
    if (has_expected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expected());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfTestData_Sample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SelfTestData_Sample*>(&from));
}

void SelfTestData_Sample::MergeFrom(const SelfTestData_Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData.Sample)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SelfTestData_Sample::UnsafeMergeFrom(const SelfTestData_Sample& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      set_has_input();
      input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_);
    }
    if (from.has_expected()) {
      set_has_expected();
      expected_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expected_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SelfTestData_Sample::CopyFrom(const SelfTestData_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SelfTestData.Sample)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SelfTestData_Sample::IsInitialized() const {

  return true;
}

void SelfTestData_Sample::Swap(SelfTestData_Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfTestData_Sample::InternalSwap(SelfTestData_Sample* other) {
  input_.Swap(&other->input_);
  expected_.Swap(&other->expected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SelfTestData_Sample::GetTypeName() const {
  return "sentencepiece.SelfTestData.Sample";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfTestData::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfTestData::SelfTestData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.SelfTestData)
}

void SelfTestData::InitAsDefaultInstance() {
}

SelfTestData::SelfTestData(const SelfTestData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SelfTestData)
}

void SelfTestData::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SelfTestData::~SelfTestData() {
  // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData)
  SharedDtor();
}

void SelfTestData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelfTestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SelfTestData& SelfTestData::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SelfTestData> SelfTestData_default_instance_;

SelfTestData* SelfTestData::New(::google::protobuf::Arena* arena) const {
  SelfTestData* n = new SelfTestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfTestData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData)
  _extensions_.Clear();
  samples_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SelfTestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSelfTestData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.SelfTestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sentencepiece.SelfTestData.Sample samples = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.SelfTestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.SelfTestData)
  return false;
#undef DO_
}

void SelfTestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.SelfTestData)
  // repeated .sentencepiece.SelfTestData.Sample samples = 1;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->samples(i), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.SelfTestData)
}

size_t SelfTestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SelfTestData)
  size_t total_size = 0;

  // repeated .sentencepiece.SelfTestData.Sample samples = 1;
  {
    unsigned int count = this->samples_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->samples(i));
    }
  }

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfTestData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SelfTestData*>(&from));
}

void SelfTestData::MergeFrom(const SelfTestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SelfTestData::UnsafeMergeFrom(const SelfTestData& from) {
  GOOGLE_DCHECK(&from != this);
  samples_.MergeFrom(from.samples_);
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SelfTestData::CopyFrom(const SelfTestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SelfTestData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SelfTestData::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void SelfTestData::Swap(SelfTestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfTestData::InternalSwap(SelfTestData* other) {
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string SelfTestData::GetTypeName() const {
  return "sentencepiece.SelfTestData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelfTestData_Sample

// optional string input = 1;
bool SelfTestData_Sample::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SelfTestData_Sample::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
void SelfTestData_Sample::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
void SelfTestData_Sample::clear_input() {
  input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input();
}
const ::std::string& SelfTestData_Sample::input() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.input)
  return input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelfTestData_Sample::set_input(const ::std::string& value) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.input)
}
void SelfTestData_Sample::set_input(const char* value) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SelfTestData.Sample.input)
}
void SelfTestData_Sample::set_input(const char* value, size_t size) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SelfTestData.Sample.input)
}
::std::string* SelfTestData_Sample::mutable_input() {
  set_has_input();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.input)
  return input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelfTestData_Sample::release_input() {
  // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.input)
  clear_has_input();
  return input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelfTestData_Sample::set_allocated_input(::std::string* input) {
  if (input != NULL) {
    set_has_input();
  } else {
    clear_has_input();
  }
  input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.input)
}

// optional string expected = 2;
bool SelfTestData_Sample::has_expected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SelfTestData_Sample::set_has_expected() {
  _has_bits_[0] |= 0x00000002u;
}
void SelfTestData_Sample::clear_has_expected() {
  _has_bits_[0] &= ~0x00000002u;
}
void SelfTestData_Sample::clear_expected() {
  expected_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_expected();
}
const ::std::string& SelfTestData_Sample::expected() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.expected)
  return expected_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelfTestData_Sample::set_expected(const ::std::string& value) {
  set_has_expected();
  expected_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.expected)
}
void SelfTestData_Sample::set_expected(const char* value) {
  set_has_expected();
  expected_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.SelfTestData.Sample.expected)
}
void SelfTestData_Sample::set_expected(const char* value, size_t size) {
  set_has_expected();
  expected_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SelfTestData.Sample.expected)
}
::std::string* SelfTestData_Sample::mutable_expected() {
  set_has_expected();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.expected)
  return expected_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelfTestData_Sample::release_expected() {
  // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.expected)
  clear_has_expected();
  return expected_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelfTestData_Sample::set_allocated_expected(::std::string* expected) {
  if (expected != NULL) {
    set_has_expected();
  } else {
    clear_has_expected();
  }
  expected_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expected);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.expected)
}

inline const SelfTestData_Sample* SelfTestData_Sample::internal_default_instance() {
  return &SelfTestData_Sample_default_instance_.get();
}
// -------------------------------------------------------------------

// SelfTestData

// repeated .sentencepiece.SelfTestData.Sample samples = 1;
int SelfTestData::samples_size() const {
  return samples_.size();
}
void SelfTestData::clear_samples() {
  samples_.Clear();
}
const ::sentencepiece::SelfTestData_Sample& SelfTestData::samples(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.samples)
  return samples_.Get(index);
}
::sentencepiece::SelfTestData_Sample* SelfTestData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.samples)
  return samples_.Mutable(index);
}
::sentencepiece::SelfTestData_Sample* SelfTestData::add_samples() {
  // @@protoc_insertion_point(field_add:sentencepiece.SelfTestData.samples)
  return samples_.Add();
}
::google::protobuf::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >*
SelfTestData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.SelfTestData.samples)
  return &samples_;
}
const ::google::protobuf::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >&
SelfTestData::samples() const {
  // @@protoc_insertion_point(field_list:sentencepiece.SelfTestData.samples)
  return samples_;
}

inline const SelfTestData* SelfTestData::internal_default_instance() {
  return &SelfTestData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForModelProto(
    ModelProto* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForModelProto_SentencePiece(
    ModelProto_SentencePiece* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ModelProto_SentencePiece_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::NORMAL;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::UNKNOWN;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::CONTROL;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::USER_DEFINED;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::BYTE;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::UNUSED;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::Type_MIN;
const ModelProto_SentencePiece_Type ModelProto_SentencePiece::Type_MAX;
const int ModelProto_SentencePiece::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelProto_SentencePiece::kPieceFieldNumber;
const int ModelProto_SentencePiece::kScoreFieldNumber;
const int ModelProto_SentencePiece::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelProto_SentencePiece::ModelProto_SentencePiece()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.ModelProto.SentencePiece)
}

void ModelProto_SentencePiece::InitAsDefaultInstance() {
}

ModelProto_SentencePiece::ModelProto_SentencePiece(const ModelProto_SentencePiece& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.ModelProto.SentencePiece)
}

void ModelProto_SentencePiece::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  piece_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  type_ = 1;
}

ModelProto_SentencePiece::~ModelProto_SentencePiece() {
  // @@protoc_insertion_point(destructor:sentencepiece.ModelProto.SentencePiece)
  SharedDtor();
}

void ModelProto_SentencePiece::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  piece_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModelProto_SentencePiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModelProto_SentencePiece& ModelProto_SentencePiece::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModelProto_SentencePiece> ModelProto_SentencePiece_default_instance_;

ModelProto_SentencePiece* ModelProto_SentencePiece::New(::google::protobuf::Arena* arena) const {
  ModelProto_SentencePiece* n = new ModelProto_SentencePiece;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelProto_SentencePiece::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto.SentencePiece)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_piece()) {
      piece_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    score_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ModelProto_SentencePiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForModelProto_SentencePiece, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.ModelProto.SentencePiece)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string piece = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_piece()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // optional float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)) {
            set_type(static_cast< ::sentencepiece::ModelProto_SentencePiece_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.ModelProto.SentencePiece)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.ModelProto.SentencePiece)
  return false;
#undef DO_
}

void ModelProto_SentencePiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.ModelProto.SentencePiece)
  // optional string piece = 1;
  if (has_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->piece(), output);
  }

  // optional float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.ModelProto.SentencePiece)
}

size_t ModelProto_SentencePiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.ModelProto.SentencePiece)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string piece = 1;
    if (has_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->piece());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelProto_SentencePiece::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModelProto_SentencePiece*>(&from));
}

void ModelProto_SentencePiece::MergeFrom(const ModelProto_SentencePiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto.SentencePiece)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModelProto_SentencePiece::UnsafeMergeFrom(const ModelProto_SentencePiece& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piece()) {
      set_has_piece();
      piece_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.piece_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ModelProto_SentencePiece::CopyFrom(const ModelProto_SentencePiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.ModelProto.SentencePiece)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModelProto_SentencePiece::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void ModelProto_SentencePiece::Swap(ModelProto_SentencePiece* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelProto_SentencePiece::InternalSwap(ModelProto_SentencePiece* other) {
  piece_.Swap(&other->piece_);
  std::swap(score_, other->score_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string ModelProto_SentencePiece::GetTypeName() const {
  return "sentencepiece.ModelProto.SentencePiece";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelProto::kPiecesFieldNumber;
const int ModelProto::kTrainerSpecFieldNumber;
const int ModelProto::kNormalizerSpecFieldNumber;
const int ModelProto::kSelfTestDataFieldNumber;
const int ModelProto::kDenormalizerSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelProto::ModelProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sentencepiece.ModelProto)
}

void ModelProto::InitAsDefaultInstance() {
  trainer_spec_ = const_cast< ::sentencepiece::TrainerSpec*>(
      ::sentencepiece::TrainerSpec::internal_default_instance());
  normalizer_spec_ = const_cast< ::sentencepiece::NormalizerSpec*>(
      ::sentencepiece::NormalizerSpec::internal_default_instance());
  self_test_data_ = const_cast< ::sentencepiece::SelfTestData*>(
      ::sentencepiece::SelfTestData::internal_default_instance());
  denormalizer_spec_ = const_cast< ::sentencepiece::NormalizerSpec*>(
      ::sentencepiece::NormalizerSpec::internal_default_instance());
}

ModelProto::ModelProto(const ModelProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.ModelProto)
}

void ModelProto::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trainer_spec_ = NULL;
  normalizer_spec_ = NULL;
  self_test_data_ = NULL;
  denormalizer_spec_ = NULL;
}

ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:sentencepiece.ModelProto)
  SharedDtor();
}

void ModelProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ModelProto_default_instance_.get()) {
    delete trainer_spec_;
    delete normalizer_spec_;
    delete self_test_data_;
    delete denormalizer_spec_;
  }
}

void ModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModelProto& ModelProto::default_instance() {
  protobuf_InitDefaults_sentencepiece_5fmodel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModelProto> ModelProto_default_instance_;

ModelProto* ModelProto::New(::google::protobuf::Arena* arena) const {
  ModelProto* n = new ModelProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 30u) {
    if (has_trainer_spec()) {
      if (trainer_spec_ != NULL) trainer_spec_->::sentencepiece::TrainerSpec::Clear();
    }
    if (has_normalizer_spec()) {
      if (normalizer_spec_ != NULL) normalizer_spec_->::sentencepiece::NormalizerSpec::Clear();
    }
    if (has_self_test_data()) {
      if (self_test_data_ != NULL) self_test_data_->::sentencepiece::SelfTestData::Clear();
    }
    if (has_denormalizer_spec()) {
      if (denormalizer_spec_ != NULL) denormalizer_spec_->::sentencepiece::NormalizerSpec::Clear();
    }
  }
  pieces_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForModelProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sentencepiece.ModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pieces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pieces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pieces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_trainer_spec;
        break;
      }

      // optional .sentencepiece.TrainerSpec trainer_spec = 2;
      case 2: {
        if (tag == 18) {
         parse_trainer_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainer_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normalizer_spec;
        break;
      }

      // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
      case 3: {
        if (tag == 26) {
         parse_normalizer_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalizer_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_self_test_data;
        break;
      }

      // optional .sentencepiece.SelfTestData self_test_data = 4;
      case 4: {
        if (tag == 34) {
         parse_self_test_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_test_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_denormalizer_spec;
        break;
      }

      // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
      case 5: {
        if (tag == 42) {
         parse_denormalizer_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_denormalizer_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sentencepiece.ModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sentencepiece.ModelProto)
  return false;
#undef DO_
}

void ModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sentencepiece.ModelProto)
  // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
  for (unsigned int i = 0, n = this->pieces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pieces(i), output);
  }

  // optional .sentencepiece.TrainerSpec trainer_spec = 2;
  if (has_trainer_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->trainer_spec_, output);
  }

  // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
  if (has_normalizer_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->normalizer_spec_, output);
  }

  // optional .sentencepiece.SelfTestData self_test_data = 4;
  if (has_self_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->self_test_data_, output);
  }

  // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
  if (has_denormalizer_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->denormalizer_spec_, output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sentencepiece.ModelProto)
}

size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.ModelProto)
  size_t total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional .sentencepiece.TrainerSpec trainer_spec = 2;
    if (has_trainer_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trainer_spec_);
    }

    // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
    if (has_normalizer_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normalizer_spec_);
    }

    // optional .sentencepiece.SelfTestData self_test_data = 4;
    if (has_self_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->self_test_data_);
    }

    // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
    if (has_denormalizer_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->denormalizer_spec_);
    }

  }
  // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
  {
    unsigned int count = this->pieces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pieces(i));
    }
  }

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModelProto*>(&from));
}

void ModelProto::MergeFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModelProto::UnsafeMergeFrom(const ModelProto& from) {
  GOOGLE_DCHECK(&from != this);
  pieces_.MergeFrom(from.pieces_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_trainer_spec()) {
      mutable_trainer_spec()->::sentencepiece::TrainerSpec::MergeFrom(from.trainer_spec());
    }
    if (from.has_normalizer_spec()) {
      mutable_normalizer_spec()->::sentencepiece::NormalizerSpec::MergeFrom(from.normalizer_spec());
    }
    if (from.has_self_test_data()) {
      mutable_self_test_data()->::sentencepiece::SelfTestData::MergeFrom(from.self_test_data());
    }
    if (from.has_denormalizer_spec()) {
      mutable_denormalizer_spec()->::sentencepiece::NormalizerSpec::MergeFrom(from.denormalizer_spec());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.ModelProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModelProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pieces())) return false;
  if (has_trainer_spec()) {
    if (!this->trainer_spec_->IsInitialized()) return false;
  }
  if (has_normalizer_spec()) {
    if (!this->normalizer_spec_->IsInitialized()) return false;
  }
  if (has_self_test_data()) {
    if (!this->self_test_data_->IsInitialized()) return false;
  }
  if (has_denormalizer_spec()) {
    if (!this->denormalizer_spec_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void ModelProto::Swap(ModelProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelProto::InternalSwap(ModelProto* other) {
  pieces_.UnsafeArenaSwap(&other->pieces_);
  std::swap(trainer_spec_, other->trainer_spec_);
  std::swap(normalizer_spec_, other->normalizer_spec_);
  std::swap(self_test_data_, other->self_test_data_);
  std::swap(denormalizer_spec_, other->denormalizer_spec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string ModelProto::GetTypeName() const {
  return "sentencepiece.ModelProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelProto_SentencePiece

// optional string piece = 1;
bool ModelProto_SentencePiece::has_piece() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelProto_SentencePiece::set_has_piece() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelProto_SentencePiece::clear_has_piece() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelProto_SentencePiece::clear_piece() {
  piece_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_piece();
}
const ::std::string& ModelProto_SentencePiece::piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.piece)
  return piece_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto_SentencePiece::set_piece(const ::std::string& value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.piece)
}
void ModelProto_SentencePiece::set_piece(const char* value) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sentencepiece.ModelProto.SentencePiece.piece)
}
void ModelProto_SentencePiece::set_piece(const char* value, size_t size) {
  set_has_piece();
  piece_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.ModelProto.SentencePiece.piece)
}
::std::string* ModelProto_SentencePiece::mutable_piece() {
  set_has_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.SentencePiece.piece)
  return piece_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelProto_SentencePiece::release_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.SentencePiece.piece)
  clear_has_piece();
  return piece_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto_SentencePiece::set_allocated_piece(::std::string* piece) {
  if (piece != NULL) {
    set_has_piece();
  } else {
    clear_has_piece();
  }
  piece_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), piece);
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.SentencePiece.piece)
}

// optional float score = 2;
bool ModelProto_SentencePiece::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelProto_SentencePiece::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelProto_SentencePiece::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelProto_SentencePiece::clear_score() {
  score_ = 0;
  clear_has_score();
}
float ModelProto_SentencePiece::score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.score)
  return score_;
}
void ModelProto_SentencePiece::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.score)
}

// optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
bool ModelProto_SentencePiece::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelProto_SentencePiece::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelProto_SentencePiece::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelProto_SentencePiece::clear_type() {
  type_ = 1;
  clear_has_type();
}
::sentencepiece::ModelProto_SentencePiece_Type ModelProto_SentencePiece::type() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.type)
  return static_cast< ::sentencepiece::ModelProto_SentencePiece_Type >(type_);
}
void ModelProto_SentencePiece::set_type(::sentencepiece::ModelProto_SentencePiece_Type value) {
  assert(::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.type)
}

inline const ModelProto_SentencePiece* ModelProto_SentencePiece::internal_default_instance() {
  return &ModelProto_SentencePiece_default_instance_.get();
}
// -------------------------------------------------------------------

// ModelProto

// repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
int ModelProto::pieces_size() const {
  return pieces_.size();
}
void ModelProto::clear_pieces() {
  pieces_.Clear();
}
const ::sentencepiece::ModelProto_SentencePiece& ModelProto::pieces(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.pieces)
  return pieces_.Get(index);
}
::sentencepiece::ModelProto_SentencePiece* ModelProto::mutable_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.pieces)
  return pieces_.Mutable(index);
}
::sentencepiece::ModelProto_SentencePiece* ModelProto::add_pieces() {
  // @@protoc_insertion_point(field_add:sentencepiece.ModelProto.pieces)
  return pieces_.Add();
}
::google::protobuf::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >*
ModelProto::mutable_pieces() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.ModelProto.pieces)
  return &pieces_;
}
const ::google::protobuf::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >&
ModelProto::pieces() const {
  // @@protoc_insertion_point(field_list:sentencepiece.ModelProto.pieces)
  return pieces_;
}

// optional .sentencepiece.TrainerSpec trainer_spec = 2;
bool ModelProto::has_trainer_spec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelProto::set_has_trainer_spec() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelProto::clear_has_trainer_spec() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelProto::clear_trainer_spec() {
  if (trainer_spec_ != NULL) trainer_spec_->::sentencepiece::TrainerSpec::Clear();
  clear_has_trainer_spec();
}
const ::sentencepiece::TrainerSpec& ModelProto::trainer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.trainer_spec)
  return trainer_spec_ != NULL ? *trainer_spec_
                         : *::sentencepiece::TrainerSpec::internal_default_instance();
}
::sentencepiece::TrainerSpec* ModelProto::mutable_trainer_spec() {
  set_has_trainer_spec();
  if (trainer_spec_ == NULL) {
    trainer_spec_ = new ::sentencepiece::TrainerSpec;
  }
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.trainer_spec)
  return trainer_spec_;
}
::sentencepiece::TrainerSpec* ModelProto::release_trainer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.trainer_spec)
  clear_has_trainer_spec();
  ::sentencepiece::TrainerSpec* temp = trainer_spec_;
  trainer_spec_ = NULL;
  return temp;
}
void ModelProto::set_allocated_trainer_spec(::sentencepiece::TrainerSpec* trainer_spec) {
  delete trainer_spec_;
  trainer_spec_ = trainer_spec;
  if (trainer_spec) {
    set_has_trainer_spec();
  } else {
    clear_has_trainer_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.trainer_spec)
}

// optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
bool ModelProto::has_normalizer_spec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelProto::set_has_normalizer_spec() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelProto::clear_has_normalizer_spec() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelProto::clear_normalizer_spec() {
  if (normalizer_spec_ != NULL) normalizer_spec_->::sentencepiece::NormalizerSpec::Clear();
  clear_has_normalizer_spec();
}
const ::sentencepiece::NormalizerSpec& ModelProto::normalizer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.normalizer_spec)
  return normalizer_spec_ != NULL ? *normalizer_spec_
                         : *::sentencepiece::NormalizerSpec::internal_default_instance();
}
::sentencepiece::NormalizerSpec* ModelProto::mutable_normalizer_spec() {
  set_has_normalizer_spec();
  if (normalizer_spec_ == NULL) {
    normalizer_spec_ = new ::sentencepiece::NormalizerSpec;
  }
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.normalizer_spec)
  return normalizer_spec_;
}
::sentencepiece::NormalizerSpec* ModelProto::release_normalizer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.normalizer_spec)
  clear_has_normalizer_spec();
  ::sentencepiece::NormalizerSpec* temp = normalizer_spec_;
  normalizer_spec_ = NULL;
  return temp;
}
void ModelProto::set_allocated_normalizer_spec(::sentencepiece::NormalizerSpec* normalizer_spec) {
  delete normalizer_spec_;
  normalizer_spec_ = normalizer_spec;
  if (normalizer_spec) {
    set_has_normalizer_spec();
  } else {
    clear_has_normalizer_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.normalizer_spec)
}

// optional .sentencepiece.SelfTestData self_test_data = 4;
bool ModelProto::has_self_test_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelProto::set_has_self_test_data() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelProto::clear_has_self_test_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelProto::clear_self_test_data() {
  if (self_test_data_ != NULL) self_test_data_->::sentencepiece::SelfTestData::Clear();
  clear_has_self_test_data();
}
const ::sentencepiece::SelfTestData& ModelProto::self_test_data() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.self_test_data)
  return self_test_data_ != NULL ? *self_test_data_
                         : *::sentencepiece::SelfTestData::internal_default_instance();
}
::sentencepiece::SelfTestData* ModelProto::mutable_self_test_data() {
  set_has_self_test_data();
  if (self_test_data_ == NULL) {
    self_test_data_ = new ::sentencepiece::SelfTestData;
  }
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.self_test_data)
  return self_test_data_;
}
::sentencepiece::SelfTestData* ModelProto::release_self_test_data() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.self_test_data)
  clear_has_self_test_data();
  ::sentencepiece::SelfTestData* temp = self_test_data_;
  self_test_data_ = NULL;
  return temp;
}
void ModelProto::set_allocated_self_test_data(::sentencepiece::SelfTestData* self_test_data) {
  delete self_test_data_;
  self_test_data_ = self_test_data;
  if (self_test_data) {
    set_has_self_test_data();
  } else {
    clear_has_self_test_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.self_test_data)
}

// optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
bool ModelProto::has_denormalizer_spec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelProto::set_has_denormalizer_spec() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelProto::clear_has_denormalizer_spec() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelProto::clear_denormalizer_spec() {
  if (denormalizer_spec_ != NULL) denormalizer_spec_->::sentencepiece::NormalizerSpec::Clear();
  clear_has_denormalizer_spec();
}
const ::sentencepiece::NormalizerSpec& ModelProto::denormalizer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.denormalizer_spec)
  return denormalizer_spec_ != NULL ? *denormalizer_spec_
                         : *::sentencepiece::NormalizerSpec::internal_default_instance();
}
::sentencepiece::NormalizerSpec* ModelProto::mutable_denormalizer_spec() {
  set_has_denormalizer_spec();
  if (denormalizer_spec_ == NULL) {
    denormalizer_spec_ = new ::sentencepiece::NormalizerSpec;
  }
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.denormalizer_spec)
  return denormalizer_spec_;
}
::sentencepiece::NormalizerSpec* ModelProto::release_denormalizer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.denormalizer_spec)
  clear_has_denormalizer_spec();
  ::sentencepiece::NormalizerSpec* temp = denormalizer_spec_;
  denormalizer_spec_ = NULL;
  return temp;
}
void ModelProto::set_allocated_denormalizer_spec(::sentencepiece::NormalizerSpec* denormalizer_spec) {
  delete denormalizer_spec_;
  denormalizer_spec_ = denormalizer_spec;
  if (denormalizer_spec) {
    set_has_denormalizer_spec();
  } else {
    clear_has_denormalizer_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.denormalizer_spec)
}

inline const ModelProto* ModelProto::internal_default_instance() {
  return &ModelProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sentencepiece

// @@protoc_insertion_point(global_scope)
