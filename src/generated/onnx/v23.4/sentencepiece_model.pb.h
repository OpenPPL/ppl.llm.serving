// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentencepiece_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sentencepiece_5fmodel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sentencepiece_5fmodel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sentencepiece_5fmodel_2eproto {
  static const ::uint32_t offsets[];
};
namespace sentencepiece {
class ModelProto;
struct ModelProtoDefaultTypeInternal;
extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class ModelProto_SentencePiece;
struct ModelProto_SentencePieceDefaultTypeInternal;
extern ModelProto_SentencePieceDefaultTypeInternal _ModelProto_SentencePiece_default_instance_;
class NormalizerSpec;
struct NormalizerSpecDefaultTypeInternal;
extern NormalizerSpecDefaultTypeInternal _NormalizerSpec_default_instance_;
class SelfTestData;
struct SelfTestDataDefaultTypeInternal;
extern SelfTestDataDefaultTypeInternal _SelfTestData_default_instance_;
class SelfTestData_Sample;
struct SelfTestData_SampleDefaultTypeInternal;
extern SelfTestData_SampleDefaultTypeInternal _SelfTestData_Sample_default_instance_;
class TrainerSpec;
struct TrainerSpecDefaultTypeInternal;
extern TrainerSpecDefaultTypeInternal _TrainerSpec_default_instance_;
}  // namespace sentencepiece
PROTOBUF_NAMESPACE_OPEN
template <>
::sentencepiece::ModelProto* Arena::CreateMaybeMessage<::sentencepiece::ModelProto>(Arena*);
template <>
::sentencepiece::ModelProto_SentencePiece* Arena::CreateMaybeMessage<::sentencepiece::ModelProto_SentencePiece>(Arena*);
template <>
::sentencepiece::NormalizerSpec* Arena::CreateMaybeMessage<::sentencepiece::NormalizerSpec>(Arena*);
template <>
::sentencepiece::SelfTestData* Arena::CreateMaybeMessage<::sentencepiece::SelfTestData>(Arena*);
template <>
::sentencepiece::SelfTestData_Sample* Arena::CreateMaybeMessage<::sentencepiece::SelfTestData_Sample>(Arena*);
template <>
::sentencepiece::TrainerSpec* Arena::CreateMaybeMessage<::sentencepiece::TrainerSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sentencepiece {
enum TrainerSpec_ModelType : int {
  TrainerSpec_ModelType_UNIGRAM = 1,
  TrainerSpec_ModelType_BPE = 2,
  TrainerSpec_ModelType_WORD = 3,
  TrainerSpec_ModelType_CHAR = 4,
};

bool TrainerSpec_ModelType_IsValid(int value);
constexpr TrainerSpec_ModelType TrainerSpec_ModelType_ModelType_MIN = static_cast<TrainerSpec_ModelType>(1);
constexpr TrainerSpec_ModelType TrainerSpec_ModelType_ModelType_MAX = static_cast<TrainerSpec_ModelType>(4);
constexpr int TrainerSpec_ModelType_ModelType_ARRAYSIZE = 4 + 1;
const std::string& TrainerSpec_ModelType_Name(TrainerSpec_ModelType value);
template <typename T>
const std::string& TrainerSpec_ModelType_Name(T value) {
  static_assert(std::is_same<T, TrainerSpec_ModelType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ModelType_Name().");
  return TrainerSpec_ModelType_Name(static_cast<TrainerSpec_ModelType>(value));
}
const std::string& TrainerSpec_ModelType_Name(TrainerSpec_ModelType value);
bool TrainerSpec_ModelType_Parse(absl::string_view name, TrainerSpec_ModelType* value);
enum ModelProto_SentencePiece_Type : int {
  ModelProto_SentencePiece_Type_NORMAL = 1,
  ModelProto_SentencePiece_Type_UNKNOWN = 2,
  ModelProto_SentencePiece_Type_CONTROL = 3,
  ModelProto_SentencePiece_Type_USER_DEFINED = 4,
  ModelProto_SentencePiece_Type_BYTE = 6,
  ModelProto_SentencePiece_Type_UNUSED = 5,
};

bool ModelProto_SentencePiece_Type_IsValid(int value);
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece_Type_Type_MIN = static_cast<ModelProto_SentencePiece_Type>(1);
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece_Type_Type_MAX = static_cast<ModelProto_SentencePiece_Type>(6);
constexpr int ModelProto_SentencePiece_Type_Type_ARRAYSIZE = 6 + 1;
const std::string& ModelProto_SentencePiece_Type_Name(ModelProto_SentencePiece_Type value);
template <typename T>
const std::string& ModelProto_SentencePiece_Type_Name(T value) {
  static_assert(std::is_same<T, ModelProto_SentencePiece_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ModelProto_SentencePiece_Type_Name(static_cast<ModelProto_SentencePiece_Type>(value));
}
const std::string& ModelProto_SentencePiece_Type_Name(ModelProto_SentencePiece_Type value);
bool ModelProto_SentencePiece_Type_Parse(absl::string_view name, ModelProto_SentencePiece_Type* value);

// ===================================================================


// -------------------------------------------------------------------

class TrainerSpec final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.TrainerSpec) */ {
 public:
  inline TrainerSpec() : TrainerSpec(nullptr) {}
  ~TrainerSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrainerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainerSpec(const TrainerSpec& from);
  TrainerSpec(TrainerSpec&& from) noexcept
    : TrainerSpec() {
    *this = ::std::move(from);
  }

  inline TrainerSpec& operator=(const TrainerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainerSpec& operator=(TrainerSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrainerSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainerSpec* internal_default_instance() {
    return reinterpret_cast<const TrainerSpec*>(
               &_TrainerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainerSpec& a, TrainerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainerSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainerSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainerSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrainerSpec& from);
  void MergeFrom(const TrainerSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrainerSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.TrainerSpec";
  }
  protected:
  explicit TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using ModelType = TrainerSpec_ModelType;
  static constexpr ModelType UNIGRAM = TrainerSpec_ModelType_UNIGRAM;
  static constexpr ModelType BPE = TrainerSpec_ModelType_BPE;
  static constexpr ModelType WORD = TrainerSpec_ModelType_WORD;
  static constexpr ModelType CHAR = TrainerSpec_ModelType_CHAR;
  static inline bool ModelType_IsValid(int value) {
    return TrainerSpec_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN = TrainerSpec_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX = TrainerSpec_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE = TrainerSpec_ModelType_ModelType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& ModelType_Name(T value) {
    return TrainerSpec_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(absl::string_view name, ModelType* value) {
    return TrainerSpec_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kAcceptLanguageFieldNumber = 5,
    kControlSymbolsFieldNumber = 30,
    kUserDefinedSymbolsFieldNumber = 31,
    kModelPrefixFieldNumber = 2,
    kInputFormatFieldNumber = 7,
    kRequiredCharsFieldNumber = 36,
    kUnkSurfaceFieldNumber = 44,
    kUnkPieceFieldNumber = 45,
    kBosPieceFieldNumber = 46,
    kEosPieceFieldNumber = 47,
    kPadPieceFieldNumber = 48,
    kPretokenizationDelimiterFieldNumber = 53,
    kSelfTestSampleSizeFieldNumber = 6,
    kMiningSentenceSizeFieldNumber = 12,
    kInputSentenceSizeFieldNumber = 11,
    kTrainingSentenceSizeFieldNumber = 13,
    kEnableDifferentialPrivacyFieldNumber = 50,
    kTreatWhitespaceAsSuffixFieldNumber = 24,
    kAllowWhitespaceOnlyPiecesFieldNumber = 26,
    kSplitDigitsFieldNumber = 25,
    kByteFallbackFieldNumber = 35,
    kUseAllVocabFieldNumber = 34,
    kTrainExtremelyLargeCorpusFieldNumber = 49,
    kUnkIdFieldNumber = 40,
    kDifferentialPrivacyClippingThresholdFieldNumber = 52,
    kDifferentialPrivacyNoiseLevelFieldNumber = 51,
    kModelTypeFieldNumber = 3,
    kVocabSizeFieldNumber = 4,
    kCharacterCoverageFieldNumber = 10,
    kSeedSentencepieceSizeFieldNumber = 14,
    kShrinkingFactorFieldNumber = 15,
    kNumThreadsFieldNumber = 16,
    kNumSubIterationsFieldNumber = 17,
    kMaxSentenceLengthFieldNumber = 18,
    kMaxSentencepieceLengthFieldNumber = 20,
    kShuffleInputSentenceFieldNumber = 19,
    kSplitByUnicodeScriptFieldNumber = 21,
    kSplitByNumberFieldNumber = 23,
    kSplitByWhitespaceFieldNumber = 22,
    kVocabularyOutputPieceScoreFieldNumber = 32,
    kHardVocabLimitFieldNumber = 33,
    kBosIdFieldNumber = 41,
    kEosIdFieldNumber = 42,
    kPadIdFieldNumber = 43,
  };
  // repeated string input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;

  public:
  void clear_input() ;
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, std::size_t size);
  void set_input(int index, absl::string_view value);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, std::size_t size);
  void add_input(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();

  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_input();

  public:
  // repeated string accept_language = 5;
  int accept_language_size() const;
  private:
  int _internal_accept_language_size() const;

  public:
  void clear_accept_language() ;
  const std::string& accept_language(int index) const;
  std::string* mutable_accept_language(int index);
  void set_accept_language(int index, const std::string& value);
  void set_accept_language(int index, std::string&& value);
  void set_accept_language(int index, const char* value);
  void set_accept_language(int index, const char* value, std::size_t size);
  void set_accept_language(int index, absl::string_view value);
  std::string* add_accept_language();
  void add_accept_language(const std::string& value);
  void add_accept_language(std::string&& value);
  void add_accept_language(const char* value);
  void add_accept_language(const char* value, std::size_t size);
  void add_accept_language(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accept_language() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accept_language();

  private:
  const std::string& _internal_accept_language(int index) const;
  std::string* _internal_add_accept_language();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_accept_language() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_accept_language();

  public:
  // repeated string control_symbols = 30;
  int control_symbols_size() const;
  private:
  int _internal_control_symbols_size() const;

  public:
  void clear_control_symbols() ;
  const std::string& control_symbols(int index) const;
  std::string* mutable_control_symbols(int index);
  void set_control_symbols(int index, const std::string& value);
  void set_control_symbols(int index, std::string&& value);
  void set_control_symbols(int index, const char* value);
  void set_control_symbols(int index, const char* value, std::size_t size);
  void set_control_symbols(int index, absl::string_view value);
  std::string* add_control_symbols();
  void add_control_symbols(const std::string& value);
  void add_control_symbols(std::string&& value);
  void add_control_symbols(const char* value);
  void add_control_symbols(const char* value, std::size_t size);
  void add_control_symbols(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& control_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_control_symbols();

  private:
  const std::string& _internal_control_symbols(int index) const;
  std::string* _internal_add_control_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_control_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_control_symbols();

  public:
  // repeated string user_defined_symbols = 31;
  int user_defined_symbols_size() const;
  private:
  int _internal_user_defined_symbols_size() const;

  public:
  void clear_user_defined_symbols() ;
  const std::string& user_defined_symbols(int index) const;
  std::string* mutable_user_defined_symbols(int index);
  void set_user_defined_symbols(int index, const std::string& value);
  void set_user_defined_symbols(int index, std::string&& value);
  void set_user_defined_symbols(int index, const char* value);
  void set_user_defined_symbols(int index, const char* value, std::size_t size);
  void set_user_defined_symbols(int index, absl::string_view value);
  std::string* add_user_defined_symbols();
  void add_user_defined_symbols(const std::string& value);
  void add_user_defined_symbols(std::string&& value);
  void add_user_defined_symbols(const char* value);
  void add_user_defined_symbols(const char* value, std::size_t size);
  void add_user_defined_symbols(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_defined_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_defined_symbols();

  private:
  const std::string& _internal_user_defined_symbols(int index) const;
  std::string* _internal_add_user_defined_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_user_defined_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_user_defined_symbols();

  public:
  // optional string model_prefix = 2;
  bool has_model_prefix() const;
  void clear_model_prefix() ;
  const std::string& model_prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_model_prefix();
  PROTOBUF_NODISCARD std::string* release_model_prefix();
  void set_allocated_model_prefix(std::string* ptr);

  private:
  const std::string& _internal_model_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_prefix(
      const std::string& value);
  std::string* _internal_mutable_model_prefix();

  public:
  // optional string input_format = 7;
  bool has_input_format() const;
  void clear_input_format() ;
  const std::string& input_format() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_format(Arg_&& arg, Args_... args);
  std::string* mutable_input_format();
  PROTOBUF_NODISCARD std::string* release_input_format();
  void set_allocated_input_format(std::string* ptr);

  private:
  const std::string& _internal_input_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_format(
      const std::string& value);
  std::string* _internal_mutable_input_format();

  public:
  // optional string required_chars = 36;
  bool has_required_chars() const;
  void clear_required_chars() ;
  const std::string& required_chars() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_required_chars(Arg_&& arg, Args_... args);
  std::string* mutable_required_chars();
  PROTOBUF_NODISCARD std::string* release_required_chars();
  void set_allocated_required_chars(std::string* ptr);

  private:
  const std::string& _internal_required_chars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_chars(
      const std::string& value);
  std::string* _internal_mutable_required_chars();

  public:
  // optional string unk_surface = 44 [default = " \342\201\207 "];
  bool has_unk_surface() const;
  void clear_unk_surface() ;
  const std::string& unk_surface() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unk_surface(Arg_&& arg, Args_... args);
  std::string* mutable_unk_surface();
  PROTOBUF_NODISCARD std::string* release_unk_surface();
  void set_allocated_unk_surface(std::string* ptr);

  private:
  const std::string& _internal_unk_surface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk_surface(
      const std::string& value);
  std::string* _internal_mutable_unk_surface();

  public:
  // optional string unk_piece = 45 [default = "<unk>"];
  bool has_unk_piece() const;
  void clear_unk_piece() ;
  const std::string& unk_piece() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unk_piece(Arg_&& arg, Args_... args);
  std::string* mutable_unk_piece();
  PROTOBUF_NODISCARD std::string* release_unk_piece();
  void set_allocated_unk_piece(std::string* ptr);

  private:
  const std::string& _internal_unk_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk_piece(
      const std::string& value);
  std::string* _internal_mutable_unk_piece();

  public:
  // optional string bos_piece = 46 [default = "<s>"];
  bool has_bos_piece() const;
  void clear_bos_piece() ;
  const std::string& bos_piece() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bos_piece(Arg_&& arg, Args_... args);
  std::string* mutable_bos_piece();
  PROTOBUF_NODISCARD std::string* release_bos_piece();
  void set_allocated_bos_piece(std::string* ptr);

  private:
  const std::string& _internal_bos_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bos_piece(
      const std::string& value);
  std::string* _internal_mutable_bos_piece();

  public:
  // optional string eos_piece = 47 [default = "</s>"];
  bool has_eos_piece() const;
  void clear_eos_piece() ;
  const std::string& eos_piece() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eos_piece(Arg_&& arg, Args_... args);
  std::string* mutable_eos_piece();
  PROTOBUF_NODISCARD std::string* release_eos_piece();
  void set_allocated_eos_piece(std::string* ptr);

  private:
  const std::string& _internal_eos_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eos_piece(
      const std::string& value);
  std::string* _internal_mutable_eos_piece();

  public:
  // optional string pad_piece = 48 [default = "<pad>"];
  bool has_pad_piece() const;
  void clear_pad_piece() ;
  const std::string& pad_piece() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pad_piece(Arg_&& arg, Args_... args);
  std::string* mutable_pad_piece();
  PROTOBUF_NODISCARD std::string* release_pad_piece();
  void set_allocated_pad_piece(std::string* ptr);

  private:
  const std::string& _internal_pad_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pad_piece(
      const std::string& value);
  std::string* _internal_mutable_pad_piece();

  public:
  // optional string pretokenization_delimiter = 53 [default = ""];
  bool has_pretokenization_delimiter() const;
  void clear_pretokenization_delimiter() ;
  const std::string& pretokenization_delimiter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pretokenization_delimiter(Arg_&& arg, Args_... args);
  std::string* mutable_pretokenization_delimiter();
  PROTOBUF_NODISCARD std::string* release_pretokenization_delimiter();
  void set_allocated_pretokenization_delimiter(std::string* ptr);

  private:
  const std::string& _internal_pretokenization_delimiter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pretokenization_delimiter(
      const std::string& value);
  std::string* _internal_mutable_pretokenization_delimiter();

  public:
  // optional int32 self_test_sample_size = 6 [default = 0];
  bool has_self_test_sample_size() const;
  void clear_self_test_sample_size() ;
  ::int32_t self_test_sample_size() const;
  void set_self_test_sample_size(::int32_t value);

  private:
  ::int32_t _internal_self_test_sample_size() const;
  void _internal_set_self_test_sample_size(::int32_t value);

  public:
  // optional int32 mining_sentence_size = 12 [deprecated = true];
  [[deprecated]]  bool has_mining_sentence_size() const;
  [[deprecated]]  void clear_mining_sentence_size() ;
  [[deprecated]] ::int32_t mining_sentence_size() const;
  [[deprecated]] void set_mining_sentence_size(::int32_t value);

  private:
  ::int32_t _internal_mining_sentence_size() const;
  void _internal_set_mining_sentence_size(::int32_t value);

  public:
  // optional uint64 input_sentence_size = 11 [default = 0];
  bool has_input_sentence_size() const;
  void clear_input_sentence_size() ;
  ::uint64_t input_sentence_size() const;
  void set_input_sentence_size(::uint64_t value);

  private:
  ::uint64_t _internal_input_sentence_size() const;
  void _internal_set_input_sentence_size(::uint64_t value);

  public:
  // optional int32 training_sentence_size = 13 [deprecated = true];
  [[deprecated]]  bool has_training_sentence_size() const;
  [[deprecated]]  void clear_training_sentence_size() ;
  [[deprecated]] ::int32_t training_sentence_size() const;
  [[deprecated]] void set_training_sentence_size(::int32_t value);

  private:
  ::int32_t _internal_training_sentence_size() const;
  void _internal_set_training_sentence_size(::int32_t value);

  public:
  // optional bool enable_differential_privacy = 50 [default = false];
  bool has_enable_differential_privacy() const;
  void clear_enable_differential_privacy() ;
  bool enable_differential_privacy() const;
  void set_enable_differential_privacy(bool value);

  private:
  bool _internal_enable_differential_privacy() const;
  void _internal_set_enable_differential_privacy(bool value);

  public:
  // optional bool treat_whitespace_as_suffix = 24 [default = false];
  bool has_treat_whitespace_as_suffix() const;
  void clear_treat_whitespace_as_suffix() ;
  bool treat_whitespace_as_suffix() const;
  void set_treat_whitespace_as_suffix(bool value);

  private:
  bool _internal_treat_whitespace_as_suffix() const;
  void _internal_set_treat_whitespace_as_suffix(bool value);

  public:
  // optional bool allow_whitespace_only_pieces = 26 [default = false];
  bool has_allow_whitespace_only_pieces() const;
  void clear_allow_whitespace_only_pieces() ;
  bool allow_whitespace_only_pieces() const;
  void set_allow_whitespace_only_pieces(bool value);

  private:
  bool _internal_allow_whitespace_only_pieces() const;
  void _internal_set_allow_whitespace_only_pieces(bool value);

  public:
  // optional bool split_digits = 25 [default = false];
  bool has_split_digits() const;
  void clear_split_digits() ;
  bool split_digits() const;
  void set_split_digits(bool value);

  private:
  bool _internal_split_digits() const;
  void _internal_set_split_digits(bool value);

  public:
  // optional bool byte_fallback = 35 [default = false];
  bool has_byte_fallback() const;
  void clear_byte_fallback() ;
  bool byte_fallback() const;
  void set_byte_fallback(bool value);

  private:
  bool _internal_byte_fallback() const;
  void _internal_set_byte_fallback(bool value);

  public:
  // optional bool use_all_vocab = 34 [default = false];
  bool has_use_all_vocab() const;
  void clear_use_all_vocab() ;
  bool use_all_vocab() const;
  void set_use_all_vocab(bool value);

  private:
  bool _internal_use_all_vocab() const;
  void _internal_set_use_all_vocab(bool value);

  public:
  // optional bool train_extremely_large_corpus = 49 [default = false];
  bool has_train_extremely_large_corpus() const;
  void clear_train_extremely_large_corpus() ;
  bool train_extremely_large_corpus() const;
  void set_train_extremely_large_corpus(bool value);

  private:
  bool _internal_train_extremely_large_corpus() const;
  void _internal_set_train_extremely_large_corpus(bool value);

  public:
  // optional int32 unk_id = 40 [default = 0];
  bool has_unk_id() const;
  void clear_unk_id() ;
  ::int32_t unk_id() const;
  void set_unk_id(::int32_t value);

  private:
  ::int32_t _internal_unk_id() const;
  void _internal_set_unk_id(::int32_t value);

  public:
  // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
  bool has_differential_privacy_clipping_threshold() const;
  void clear_differential_privacy_clipping_threshold() ;
  ::uint64_t differential_privacy_clipping_threshold() const;
  void set_differential_privacy_clipping_threshold(::uint64_t value);

  private:
  ::uint64_t _internal_differential_privacy_clipping_threshold() const;
  void _internal_set_differential_privacy_clipping_threshold(::uint64_t value);

  public:
  // optional float differential_privacy_noise_level = 51 [default = 0];
  bool has_differential_privacy_noise_level() const;
  void clear_differential_privacy_noise_level() ;
  float differential_privacy_noise_level() const;
  void set_differential_privacy_noise_level(float value);

  private:
  float _internal_differential_privacy_noise_level() const;
  void _internal_set_differential_privacy_noise_level(float value);

  public:
  // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
  bool has_model_type() const;
  void clear_model_type() ;
  ::sentencepiece::TrainerSpec_ModelType model_type() const;
  void set_model_type(::sentencepiece::TrainerSpec_ModelType value);

  private:
  ::sentencepiece::TrainerSpec_ModelType _internal_model_type() const;
  void _internal_set_model_type(::sentencepiece::TrainerSpec_ModelType value);

  public:
  // optional int32 vocab_size = 4 [default = 8000];
  bool has_vocab_size() const;
  void clear_vocab_size() ;
  ::int32_t vocab_size() const;
  void set_vocab_size(::int32_t value);

  private:
  ::int32_t _internal_vocab_size() const;
  void _internal_set_vocab_size(::int32_t value);

  public:
  // optional float character_coverage = 10 [default = 0.9995];
  bool has_character_coverage() const;
  void clear_character_coverage() ;
  float character_coverage() const;
  void set_character_coverage(float value);

  private:
  float _internal_character_coverage() const;
  void _internal_set_character_coverage(float value);

  public:
  // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
  bool has_seed_sentencepiece_size() const;
  void clear_seed_sentencepiece_size() ;
  ::int32_t seed_sentencepiece_size() const;
  void set_seed_sentencepiece_size(::int32_t value);

  private:
  ::int32_t _internal_seed_sentencepiece_size() const;
  void _internal_set_seed_sentencepiece_size(::int32_t value);

  public:
  // optional float shrinking_factor = 15 [default = 0.75];
  bool has_shrinking_factor() const;
  void clear_shrinking_factor() ;
  float shrinking_factor() const;
  void set_shrinking_factor(float value);

  private:
  float _internal_shrinking_factor() const;
  void _internal_set_shrinking_factor(float value);

  public:
  // optional int32 num_threads = 16 [default = 16];
  bool has_num_threads() const;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // optional int32 num_sub_iterations = 17 [default = 2];
  bool has_num_sub_iterations() const;
  void clear_num_sub_iterations() ;
  ::int32_t num_sub_iterations() const;
  void set_num_sub_iterations(::int32_t value);

  private:
  ::int32_t _internal_num_sub_iterations() const;
  void _internal_set_num_sub_iterations(::int32_t value);

  public:
  // optional int32 max_sentence_length = 18 [default = 4192];
  bool has_max_sentence_length() const;
  void clear_max_sentence_length() ;
  ::int32_t max_sentence_length() const;
  void set_max_sentence_length(::int32_t value);

  private:
  ::int32_t _internal_max_sentence_length() const;
  void _internal_set_max_sentence_length(::int32_t value);

  public:
  // optional int32 max_sentencepiece_length = 20 [default = 16];
  bool has_max_sentencepiece_length() const;
  void clear_max_sentencepiece_length() ;
  ::int32_t max_sentencepiece_length() const;
  void set_max_sentencepiece_length(::int32_t value);

  private:
  ::int32_t _internal_max_sentencepiece_length() const;
  void _internal_set_max_sentencepiece_length(::int32_t value);

  public:
  // optional bool shuffle_input_sentence = 19 [default = true];
  bool has_shuffle_input_sentence() const;
  void clear_shuffle_input_sentence() ;
  bool shuffle_input_sentence() const;
  void set_shuffle_input_sentence(bool value);

  private:
  bool _internal_shuffle_input_sentence() const;
  void _internal_set_shuffle_input_sentence(bool value);

  public:
  // optional bool split_by_unicode_script = 21 [default = true];
  bool has_split_by_unicode_script() const;
  void clear_split_by_unicode_script() ;
  bool split_by_unicode_script() const;
  void set_split_by_unicode_script(bool value);

  private:
  bool _internal_split_by_unicode_script() const;
  void _internal_set_split_by_unicode_script(bool value);

  public:
  // optional bool split_by_number = 23 [default = true];
  bool has_split_by_number() const;
  void clear_split_by_number() ;
  bool split_by_number() const;
  void set_split_by_number(bool value);

  private:
  bool _internal_split_by_number() const;
  void _internal_set_split_by_number(bool value);

  public:
  // optional bool split_by_whitespace = 22 [default = true];
  bool has_split_by_whitespace() const;
  void clear_split_by_whitespace() ;
  bool split_by_whitespace() const;
  void set_split_by_whitespace(bool value);

  private:
  bool _internal_split_by_whitespace() const;
  void _internal_set_split_by_whitespace(bool value);

  public:
  // optional bool vocabulary_output_piece_score = 32 [default = true];
  bool has_vocabulary_output_piece_score() const;
  void clear_vocabulary_output_piece_score() ;
  bool vocabulary_output_piece_score() const;
  void set_vocabulary_output_piece_score(bool value);

  private:
  bool _internal_vocabulary_output_piece_score() const;
  void _internal_set_vocabulary_output_piece_score(bool value);

  public:
  // optional bool hard_vocab_limit = 33 [default = true];
  bool has_hard_vocab_limit() const;
  void clear_hard_vocab_limit() ;
  bool hard_vocab_limit() const;
  void set_hard_vocab_limit(bool value);

  private:
  bool _internal_hard_vocab_limit() const;
  void _internal_set_hard_vocab_limit(bool value);

  public:
  // optional int32 bos_id = 41 [default = 1];
  bool has_bos_id() const;
  void clear_bos_id() ;
  ::int32_t bos_id() const;
  void set_bos_id(::int32_t value);

  private:
  ::int32_t _internal_bos_id() const;
  void _internal_set_bos_id(::int32_t value);

  public:
  // optional int32 eos_id = 42 [default = 2];
  bool has_eos_id() const;
  void clear_eos_id() ;
  ::int32_t eos_id() const;
  void set_eos_id(::int32_t value);

  private:
  ::int32_t _internal_eos_id() const;
  void _internal_set_eos_id(::int32_t value);

  public:
  // optional int32 pad_id = 43 [default = -1];
  bool has_pad_id() const;
  void clear_pad_id() ;
  ::int32_t pad_id() const;
  void set_pad_id(::int32_t value);

  private:
  ::int32_t _internal_pad_id() const;
  void _internal_set_pad_id(::int32_t value);

  public:
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TrainerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.TrainerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accept_language_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> control_symbols_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_defined_symbols_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_chars_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_unk_surface_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unk_surface_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_unk_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unk_piece_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bos_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bos_piece_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_eos_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eos_piece_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_pad_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretokenization_delimiter_;
    ::int32_t self_test_sample_size_;
    ::int32_t mining_sentence_size_;
    ::uint64_t input_sentence_size_;
    ::int32_t training_sentence_size_;
    bool enable_differential_privacy_;
    bool treat_whitespace_as_suffix_;
    bool allow_whitespace_only_pieces_;
    bool split_digits_;
    bool byte_fallback_;
    bool use_all_vocab_;
    bool train_extremely_large_corpus_;
    ::int32_t unk_id_;
    ::uint64_t differential_privacy_clipping_threshold_;
    float differential_privacy_noise_level_;
    int model_type_;
    ::int32_t vocab_size_;
    float character_coverage_;
    ::int32_t seed_sentencepiece_size_;
    float shrinking_factor_;
    ::int32_t num_threads_;
    ::int32_t num_sub_iterations_;
    ::int32_t max_sentence_length_;
    ::int32_t max_sentencepiece_length_;
    bool shuffle_input_sentence_;
    bool split_by_unicode_script_;
    bool split_by_number_;
    bool split_by_whitespace_;
    bool vocabulary_output_piece_score_;
    bool hard_vocab_limit_;
    ::int32_t bos_id_;
    ::int32_t eos_id_;
    ::int32_t pad_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};// -------------------------------------------------------------------

class NormalizerSpec final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.NormalizerSpec) */ {
 public:
  inline NormalizerSpec() : NormalizerSpec(nullptr) {}
  ~NormalizerSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NormalizerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalizerSpec(const NormalizerSpec& from);
  NormalizerSpec(NormalizerSpec&& from) noexcept
    : NormalizerSpec() {
    *this = ::std::move(from);
  }

  inline NormalizerSpec& operator=(const NormalizerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizerSpec& operator=(NormalizerSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NormalizerSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizerSpec* internal_default_instance() {
    return reinterpret_cast<const NormalizerSpec*>(
               &_NormalizerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NormalizerSpec& a, NormalizerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizerSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizerSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalizerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalizerSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NormalizerSpec& from);
  void MergeFrom(const NormalizerSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalizerSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.NormalizerSpec";
  }
  protected:
  explicit NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPrecompiledCharsmapFieldNumber = 2,
    kNormalizationRuleTsvFieldNumber = 6,
    kAddDummyPrefixFieldNumber = 3,
    kRemoveExtraWhitespacesFieldNumber = 4,
    kEscapeWhitespacesFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional bytes precompiled_charsmap = 2;
  bool has_precompiled_charsmap() const;
  void clear_precompiled_charsmap() ;
  const std::string& precompiled_charsmap() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_precompiled_charsmap(Arg_&& arg, Args_... args);
  std::string* mutable_precompiled_charsmap();
  PROTOBUF_NODISCARD std::string* release_precompiled_charsmap();
  void set_allocated_precompiled_charsmap(std::string* ptr);

  private:
  const std::string& _internal_precompiled_charsmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precompiled_charsmap(
      const std::string& value);
  std::string* _internal_mutable_precompiled_charsmap();

  public:
  // optional string normalization_rule_tsv = 6;
  bool has_normalization_rule_tsv() const;
  void clear_normalization_rule_tsv() ;
  const std::string& normalization_rule_tsv() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_normalization_rule_tsv(Arg_&& arg, Args_... args);
  std::string* mutable_normalization_rule_tsv();
  PROTOBUF_NODISCARD std::string* release_normalization_rule_tsv();
  void set_allocated_normalization_rule_tsv(std::string* ptr);

  private:
  const std::string& _internal_normalization_rule_tsv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_normalization_rule_tsv(
      const std::string& value);
  std::string* _internal_mutable_normalization_rule_tsv();

  public:
  // optional bool add_dummy_prefix = 3 [default = true];
  bool has_add_dummy_prefix() const;
  void clear_add_dummy_prefix() ;
  bool add_dummy_prefix() const;
  void set_add_dummy_prefix(bool value);

  private:
  bool _internal_add_dummy_prefix() const;
  void _internal_set_add_dummy_prefix(bool value);

  public:
  // optional bool remove_extra_whitespaces = 4 [default = true];
  bool has_remove_extra_whitespaces() const;
  void clear_remove_extra_whitespaces() ;
  bool remove_extra_whitespaces() const;
  void set_remove_extra_whitespaces(bool value);

  private:
  bool _internal_remove_extra_whitespaces() const;
  void _internal_set_remove_extra_whitespaces(bool value);

  public:
  // optional bool escape_whitespaces = 5 [default = true];
  bool has_escape_whitespaces() const;
  void clear_escape_whitespaces() ;
  bool escape_whitespaces() const;
  void set_escape_whitespaces(bool value);

  private:
  bool _internal_escape_whitespaces() const;
  void _internal_set_escape_whitespaces(bool value);

  public:
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<NormalizerSpec, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.NormalizerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr precompiled_charsmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normalization_rule_tsv_;
    bool add_dummy_prefix_;
    bool remove_extra_whitespaces_;
    bool escape_whitespaces_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};// -------------------------------------------------------------------

class SelfTestData_Sample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SelfTestData.Sample) */ {
 public:
  inline SelfTestData_Sample() : SelfTestData_Sample(nullptr) {}
  ~SelfTestData_Sample() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelfTestData_Sample(const SelfTestData_Sample& from);
  SelfTestData_Sample(SelfTestData_Sample&& from) noexcept
    : SelfTestData_Sample() {
    *this = ::std::move(from);
  }

  inline SelfTestData_Sample& operator=(const SelfTestData_Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfTestData_Sample& operator=(SelfTestData_Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelfTestData_Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfTestData_Sample* internal_default_instance() {
    return reinterpret_cast<const SelfTestData_Sample*>(
               &_SelfTestData_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelfTestData_Sample& a, SelfTestData_Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfTestData_Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfTestData_Sample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfTestData_Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelfTestData_Sample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelfTestData_Sample& from);
  void MergeFrom(const SelfTestData_Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfTestData_Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.SelfTestData.Sample";
  }
  protected:
  explicit SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kExpectedFieldNumber = 2,
  };
  // optional string input = 1;
  bool has_input() const;
  void clear_input() ;
  const std::string& input() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(Arg_&& arg, Args_... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* ptr);

  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(
      const std::string& value);
  std::string* _internal_mutable_input();

  public:
  // optional string expected = 2;
  bool has_expected() const;
  void clear_expected() ;
  const std::string& expected() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expected(Arg_&& arg, Args_... args);
  std::string* mutable_expected();
  PROTOBUF_NODISCARD std::string* release_expected();
  void set_allocated_expected(std::string* ptr);

  private:
  const std::string& _internal_expected() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expected(
      const std::string& value);
  std::string* _internal_mutable_expected();

  public:
  // @@protoc_insertion_point(class_scope:sentencepiece.SelfTestData.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};// -------------------------------------------------------------------

class SelfTestData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SelfTestData) */ {
 public:
  inline SelfTestData() : SelfTestData(nullptr) {}
  ~SelfTestData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SelfTestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelfTestData(const SelfTestData& from);
  SelfTestData(SelfTestData&& from) noexcept
    : SelfTestData() {
    *this = ::std::move(from);
  }

  inline SelfTestData& operator=(const SelfTestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfTestData& operator=(SelfTestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelfTestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfTestData* internal_default_instance() {
    return reinterpret_cast<const SelfTestData*>(
               &_SelfTestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SelfTestData& a, SelfTestData& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfTestData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfTestData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfTestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelfTestData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelfTestData& from);
  void MergeFrom(const SelfTestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfTestData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.SelfTestData";
  }
  protected:
  explicit SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SelfTestData_Sample Sample;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .sentencepiece.SelfTestData.Sample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::sentencepiece::SelfTestData_Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >*
      mutable_samples();
  private:
  const ::sentencepiece::SelfTestData_Sample& _internal_samples(int index) const;
  ::sentencepiece::SelfTestData_Sample* _internal_add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::SelfTestData_Sample>& _internal_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::SelfTestData_Sample>* _internal_mutable_samples();
  public:
  const ::sentencepiece::SelfTestData_Sample& samples(int index) const;
  ::sentencepiece::SelfTestData_Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >&
      samples() const;
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<SelfTestData, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.SelfTestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample > samples_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ModelProto_SentencePiece final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.ModelProto.SentencePiece) */ {
 public:
  inline ModelProto_SentencePiece() : ModelProto_SentencePiece(nullptr) {}
  ~ModelProto_SentencePiece() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelProto_SentencePiece(const ModelProto_SentencePiece& from);
  ModelProto_SentencePiece(ModelProto_SentencePiece&& from) noexcept
    : ModelProto_SentencePiece() {
    *this = ::std::move(from);
  }

  inline ModelProto_SentencePiece& operator=(const ModelProto_SentencePiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto_SentencePiece& operator=(ModelProto_SentencePiece&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelProto_SentencePiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelProto_SentencePiece* internal_default_instance() {
    return reinterpret_cast<const ModelProto_SentencePiece*>(
               &_ModelProto_SentencePiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelProto_SentencePiece& a, ModelProto_SentencePiece& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto_SentencePiece* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProto_SentencePiece* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelProto_SentencePiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelProto_SentencePiece>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelProto_SentencePiece& from);
  void MergeFrom(const ModelProto_SentencePiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelProto_SentencePiece* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.ModelProto.SentencePiece";
  }
  protected:
  explicit ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Type = ModelProto_SentencePiece_Type;
  static constexpr Type NORMAL = ModelProto_SentencePiece_Type_NORMAL;
  static constexpr Type UNKNOWN = ModelProto_SentencePiece_Type_UNKNOWN;
  static constexpr Type CONTROL = ModelProto_SentencePiece_Type_CONTROL;
  static constexpr Type USER_DEFINED = ModelProto_SentencePiece_Type_USER_DEFINED;
  static constexpr Type BYTE = ModelProto_SentencePiece_Type_BYTE;
  static constexpr Type UNUSED = ModelProto_SentencePiece_Type_UNUSED;
  static inline bool Type_IsValid(int value) {
    return ModelProto_SentencePiece_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ModelProto_SentencePiece_Type_Type_MIN;
  static constexpr Type Type_MAX = ModelProto_SentencePiece_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ModelProto_SentencePiece_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ModelProto_SentencePiece_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return ModelProto_SentencePiece_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPieceFieldNumber = 1,
    kScoreFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional string piece = 1;
  bool has_piece() const;
  void clear_piece() ;
  const std::string& piece() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_piece(Arg_&& arg, Args_... args);
  std::string* mutable_piece();
  PROTOBUF_NODISCARD std::string* release_piece();
  void set_allocated_piece(std::string* ptr);

  private:
  const std::string& _internal_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_piece(
      const std::string& value);
  std::string* _internal_mutable_piece();

  public:
  // optional float score = 2;
  bool has_score() const;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
  bool has_type() const;
  void clear_type() ;
  ::sentencepiece::ModelProto_SentencePiece_Type type() const;
  void set_type(::sentencepiece::ModelProto_SentencePiece_Type value);

  private:
  ::sentencepiece::ModelProto_SentencePiece_Type _internal_type() const;
  void _internal_set_type(::sentencepiece::ModelProto_SentencePiece_Type value);

  public:
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto_SentencePiece, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.ModelProto.SentencePiece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr piece_;
    float score_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ModelProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.ModelProto) */ {
 public:
  inline ModelProto() : ModelProto(nullptr) {}
  ~ModelProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModelProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelProto(const ModelProto& from);
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sentencepiece.ModelProto";
  }
  protected:
  explicit ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ModelProto_SentencePiece SentencePiece;

  // accessors -------------------------------------------------------

  enum : int {
    kPiecesFieldNumber = 1,
    kTrainerSpecFieldNumber = 2,
    kNormalizerSpecFieldNumber = 3,
    kSelfTestDataFieldNumber = 4,
    kDenormalizerSpecFieldNumber = 5,
  };
  // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
  int pieces_size() const;
  private:
  int _internal_pieces_size() const;

  public:
  void clear_pieces() ;
  ::sentencepiece::ModelProto_SentencePiece* mutable_pieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >*
      mutable_pieces();
  private:
  const ::sentencepiece::ModelProto_SentencePiece& _internal_pieces(int index) const;
  ::sentencepiece::ModelProto_SentencePiece* _internal_add_pieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::ModelProto_SentencePiece>& _internal_pieces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::ModelProto_SentencePiece>* _internal_mutable_pieces();
  public:
  const ::sentencepiece::ModelProto_SentencePiece& pieces(int index) const;
  ::sentencepiece::ModelProto_SentencePiece* add_pieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >&
      pieces() const;
  // optional .sentencepiece.TrainerSpec trainer_spec = 2;
  bool has_trainer_spec() const;
  void clear_trainer_spec() ;
  const ::sentencepiece::TrainerSpec& trainer_spec() const;
  PROTOBUF_NODISCARD ::sentencepiece::TrainerSpec* release_trainer_spec();
  ::sentencepiece::TrainerSpec* mutable_trainer_spec();
  void set_allocated_trainer_spec(::sentencepiece::TrainerSpec* trainer_spec);
  private:
  const ::sentencepiece::TrainerSpec& _internal_trainer_spec() const;
  ::sentencepiece::TrainerSpec* _internal_mutable_trainer_spec();
  public:
  void unsafe_arena_set_allocated_trainer_spec(
      ::sentencepiece::TrainerSpec* trainer_spec);
  ::sentencepiece::TrainerSpec* unsafe_arena_release_trainer_spec();
  // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
  bool has_normalizer_spec() const;
  void clear_normalizer_spec() ;
  const ::sentencepiece::NormalizerSpec& normalizer_spec() const;
  PROTOBUF_NODISCARD ::sentencepiece::NormalizerSpec* release_normalizer_spec();
  ::sentencepiece::NormalizerSpec* mutable_normalizer_spec();
  void set_allocated_normalizer_spec(::sentencepiece::NormalizerSpec* normalizer_spec);
  private:
  const ::sentencepiece::NormalizerSpec& _internal_normalizer_spec() const;
  ::sentencepiece::NormalizerSpec* _internal_mutable_normalizer_spec();
  public:
  void unsafe_arena_set_allocated_normalizer_spec(
      ::sentencepiece::NormalizerSpec* normalizer_spec);
  ::sentencepiece::NormalizerSpec* unsafe_arena_release_normalizer_spec();
  // optional .sentencepiece.SelfTestData self_test_data = 4;
  bool has_self_test_data() const;
  void clear_self_test_data() ;
  const ::sentencepiece::SelfTestData& self_test_data() const;
  PROTOBUF_NODISCARD ::sentencepiece::SelfTestData* release_self_test_data();
  ::sentencepiece::SelfTestData* mutable_self_test_data();
  void set_allocated_self_test_data(::sentencepiece::SelfTestData* self_test_data);
  private:
  const ::sentencepiece::SelfTestData& _internal_self_test_data() const;
  ::sentencepiece::SelfTestData* _internal_mutable_self_test_data();
  public:
  void unsafe_arena_set_allocated_self_test_data(
      ::sentencepiece::SelfTestData* self_test_data);
  ::sentencepiece::SelfTestData* unsafe_arena_release_self_test_data();
  // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
  bool has_denormalizer_spec() const;
  void clear_denormalizer_spec() ;
  const ::sentencepiece::NormalizerSpec& denormalizer_spec() const;
  PROTOBUF_NODISCARD ::sentencepiece::NormalizerSpec* release_denormalizer_spec();
  ::sentencepiece::NormalizerSpec* mutable_denormalizer_spec();
  void set_allocated_denormalizer_spec(::sentencepiece::NormalizerSpec* denormalizer_spec);
  private:
  const ::sentencepiece::NormalizerSpec& _internal_denormalizer_spec() const;
  ::sentencepiece::NormalizerSpec* _internal_mutable_denormalizer_spec();
  public:
  void unsafe_arena_set_allocated_denormalizer_spec(
      ::sentencepiece::NormalizerSpec* denormalizer_spec);
  ::sentencepiece::NormalizerSpec* unsafe_arena_release_denormalizer_spec();
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<ModelProto, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:sentencepiece.ModelProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece > pieces_;
    ::sentencepiece::TrainerSpec* trainer_spec_;
    ::sentencepiece::NormalizerSpec* normalizer_spec_;
    ::sentencepiece::SelfTestData* self_test_data_;
    ::sentencepiece::NormalizerSpec* denormalizer_spec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sentencepiece_5fmodel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TrainerSpec

// repeated string input = 1;
inline int TrainerSpec::_internal_input_size() const {
  return _impl_.input_.size();
}
inline int TrainerSpec::input_size() const {
  return _internal_input_size();
}
inline void TrainerSpec::clear_input() {
  _internal_mutable_input()->Clear();
}
inline std::string* TrainerSpec::add_input() {
  std::string* _s = _internal_add_input();
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.input)
  return _s;
}
inline const std::string& TrainerSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input)
  return _internal_input(index);
}
inline std::string* TrainerSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.input)
  return _internal_mutable_input()->Mutable(index);
}
inline void TrainerSpec::set_input(int index, const std::string& value) {
  _internal_mutable_input()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::set_input(int index, std::string&& value) {
  _internal_mutable_input()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::set_input(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_input()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::set_input(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_input()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::set_input(int index, absl::string_view value) {
  _internal_mutable_input()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(const std::string& value) {
  _internal_mutable_input()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(std::string&& value) {
  _internal_mutable_input()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_input()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(const char* value, std::size_t size) {
  _internal_mutable_input()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(absl::string_view value) {
  _internal_mutable_input()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sentencepiece.TrainerSpec.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::input() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TrainerSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.input)
  return _internal_mutable_input();
}
inline const std::string& TrainerSpec::_internal_input(int index) const {
  return _internal_input().Get(index);
}
inline std::string* TrainerSpec::_internal_add_input() {
  return _internal_mutable_input()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::_internal_input() const {
  return _impl_.input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainerSpec::_internal_mutable_input() {
  return &_impl_.input_;
}

// optional string input_format = 7;
inline bool TrainerSpec::has_input_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrainerSpec::clear_input_format() {
  _impl_.input_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrainerSpec::input_format() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input_format)
  return _internal_input_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_input_format(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.input_format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input_format)
}
inline std::string* TrainerSpec::mutable_input_format() {
  std::string* _s = _internal_mutable_input_format();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.input_format)
  return _s;
}
inline const std::string& TrainerSpec::_internal_input_format() const {
  return _impl_.input_format_.Get();
}
inline void TrainerSpec::_internal_set_input_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.input_format_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_input_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.input_format_.Mutable( GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_input_format() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.input_format)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.input_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrainerSpec::set_allocated_input_format(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_format_.IsDefault()) {
          _impl_.input_format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.input_format)
}

// optional string model_prefix = 2;
inline bool TrainerSpec::has_model_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrainerSpec::clear_model_prefix() {
  _impl_.model_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrainerSpec::model_prefix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.model_prefix)
  return _internal_model_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_model_prefix(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.model_prefix)
}
inline std::string* TrainerSpec::mutable_model_prefix() {
  std::string* _s = _internal_mutable_model_prefix();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.model_prefix)
  return _s;
}
inline const std::string& TrainerSpec::_internal_model_prefix() const {
  return _impl_.model_prefix_.Get();
}
inline void TrainerSpec::_internal_set_model_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.model_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_model_prefix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_model_prefix() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.model_prefix)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrainerSpec::set_allocated_model_prefix(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_prefix_.IsDefault()) {
          _impl_.model_prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.model_prefix)
}

// optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
inline bool TrainerSpec::has_model_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void TrainerSpec::clear_model_type() {
  _impl_.model_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::sentencepiece::TrainerSpec_ModelType TrainerSpec::model_type() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.model_type)
  return _internal_model_type();
}
inline void TrainerSpec::set_model_type(::sentencepiece::TrainerSpec_ModelType value) {
   _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.model_type)
}
inline ::sentencepiece::TrainerSpec_ModelType TrainerSpec::_internal_model_type() const {
  return static_cast<::sentencepiece::TrainerSpec_ModelType>(_impl_.model_type_);
}
inline void TrainerSpec::_internal_set_model_type(::sentencepiece::TrainerSpec_ModelType value) {
  assert(::sentencepiece::TrainerSpec_ModelType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.model_type_ = value;
}

// optional int32 vocab_size = 4 [default = 8000];
inline bool TrainerSpec::has_vocab_size() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_vocab_size() {
  _impl_.vocab_size_ = 8000;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t TrainerSpec::vocab_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.vocab_size)
  return _internal_vocab_size();
}
inline void TrainerSpec::set_vocab_size(::int32_t value) {
  _internal_set_vocab_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.vocab_size)
}
inline ::int32_t TrainerSpec::_internal_vocab_size() const {
  return _impl_.vocab_size_;
}
inline void TrainerSpec::_internal_set_vocab_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.vocab_size_ = value;
}

// repeated string accept_language = 5;
inline int TrainerSpec::_internal_accept_language_size() const {
  return _impl_.accept_language_.size();
}
inline int TrainerSpec::accept_language_size() const {
  return _internal_accept_language_size();
}
inline void TrainerSpec::clear_accept_language() {
  _internal_mutable_accept_language()->Clear();
}
inline std::string* TrainerSpec::add_accept_language() {
  std::string* _s = _internal_add_accept_language();
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.accept_language)
  return _s;
}
inline const std::string& TrainerSpec::accept_language(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.accept_language)
  return _internal_accept_language(index);
}
inline std::string* TrainerSpec::mutable_accept_language(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.accept_language)
  return _internal_mutable_accept_language()->Mutable(index);
}
inline void TrainerSpec::set_accept_language(int index, const std::string& value) {
  _internal_mutable_accept_language()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::set_accept_language(int index, std::string&& value) {
  _internal_mutable_accept_language()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::set_accept_language(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_accept_language()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::set_accept_language(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_accept_language()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::set_accept_language(int index, absl::string_view value) {
  _internal_mutable_accept_language()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::add_accept_language(const std::string& value) {
  _internal_mutable_accept_language()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::add_accept_language(std::string&& value) {
  _internal_mutable_accept_language()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::add_accept_language(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_accept_language()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::add_accept_language(const char* value, std::size_t size) {
  _internal_mutable_accept_language()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.accept_language)
}
inline void TrainerSpec::add_accept_language(absl::string_view value) {
  _internal_mutable_accept_language()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sentencepiece.TrainerSpec.accept_language)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::accept_language() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.accept_language)
  return _internal_accept_language();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TrainerSpec::mutable_accept_language() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.accept_language)
  return _internal_mutable_accept_language();
}
inline const std::string& TrainerSpec::_internal_accept_language(int index) const {
  return _internal_accept_language().Get(index);
}
inline std::string* TrainerSpec::_internal_add_accept_language() {
  return _internal_mutable_accept_language()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::_internal_accept_language() const {
  return _impl_.accept_language_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainerSpec::_internal_mutable_accept_language() {
  return &_impl_.accept_language_;
}

// optional int32 self_test_sample_size = 6 [default = 0];
inline bool TrainerSpec::has_self_test_sample_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void TrainerSpec::clear_self_test_sample_size() {
  _impl_.self_test_sample_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t TrainerSpec::self_test_sample_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.self_test_sample_size)
  return _internal_self_test_sample_size();
}
inline void TrainerSpec::set_self_test_sample_size(::int32_t value) {
  _internal_set_self_test_sample_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.self_test_sample_size)
}
inline ::int32_t TrainerSpec::_internal_self_test_sample_size() const {
  return _impl_.self_test_sample_size_;
}
inline void TrainerSpec::_internal_set_self_test_sample_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.self_test_sample_size_ = value;
}

// optional bool enable_differential_privacy = 50 [default = false];
inline bool TrainerSpec::has_enable_differential_privacy() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TrainerSpec::clear_enable_differential_privacy() {
  _impl_.enable_differential_privacy_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool TrainerSpec::enable_differential_privacy() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.enable_differential_privacy)
  return _internal_enable_differential_privacy();
}
inline void TrainerSpec::set_enable_differential_privacy(bool value) {
  _internal_set_enable_differential_privacy(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.enable_differential_privacy)
}
inline bool TrainerSpec::_internal_enable_differential_privacy() const {
  return _impl_.enable_differential_privacy_;
}
inline void TrainerSpec::_internal_set_enable_differential_privacy(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.enable_differential_privacy_ = value;
}

// optional float differential_privacy_noise_level = 51 [default = 0];
inline bool TrainerSpec::has_differential_privacy_noise_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void TrainerSpec::clear_differential_privacy_noise_level() {
  _impl_.differential_privacy_noise_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float TrainerSpec::differential_privacy_noise_level() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.differential_privacy_noise_level)
  return _internal_differential_privacy_noise_level();
}
inline void TrainerSpec::set_differential_privacy_noise_level(float value) {
  _internal_set_differential_privacy_noise_level(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.differential_privacy_noise_level)
}
inline float TrainerSpec::_internal_differential_privacy_noise_level() const {
  return _impl_.differential_privacy_noise_level_;
}
inline void TrainerSpec::_internal_set_differential_privacy_noise_level(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.differential_privacy_noise_level_ = value;
}

// optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
inline bool TrainerSpec::has_differential_privacy_clipping_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void TrainerSpec::clear_differential_privacy_clipping_threshold() {
  _impl_.differential_privacy_clipping_threshold_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint64_t TrainerSpec::differential_privacy_clipping_threshold() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.differential_privacy_clipping_threshold)
  return _internal_differential_privacy_clipping_threshold();
}
inline void TrainerSpec::set_differential_privacy_clipping_threshold(::uint64_t value) {
  _internal_set_differential_privacy_clipping_threshold(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.differential_privacy_clipping_threshold)
}
inline ::uint64_t TrainerSpec::_internal_differential_privacy_clipping_threshold() const {
  return _impl_.differential_privacy_clipping_threshold_;
}
inline void TrainerSpec::_internal_set_differential_privacy_clipping_threshold(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.differential_privacy_clipping_threshold_ = value;
}

// optional float character_coverage = 10 [default = 0.9995];
inline bool TrainerSpec::has_character_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_character_coverage() {
  _impl_.character_coverage_ = 0.9995f;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float TrainerSpec::character_coverage() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.character_coverage)
  return _internal_character_coverage();
}
inline void TrainerSpec::set_character_coverage(float value) {
  _internal_set_character_coverage(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.character_coverage)
}
inline float TrainerSpec::_internal_character_coverage() const {
  return _impl_.character_coverage_;
}
inline void TrainerSpec::_internal_set_character_coverage(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.character_coverage_ = value;
}

// optional uint64 input_sentence_size = 11 [default = 0];
inline bool TrainerSpec::has_input_sentence_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TrainerSpec::clear_input_sentence_size() {
  _impl_.input_sentence_size_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t TrainerSpec::input_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input_sentence_size)
  return _internal_input_sentence_size();
}
inline void TrainerSpec::set_input_sentence_size(::uint64_t value) {
  _internal_set_input_sentence_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input_sentence_size)
}
inline ::uint64_t TrainerSpec::_internal_input_sentence_size() const {
  return _impl_.input_sentence_size_;
}
inline void TrainerSpec::_internal_set_input_sentence_size(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.input_sentence_size_ = value;
}

// optional bool shuffle_input_sentence = 19 [default = true];
inline bool TrainerSpec::has_shuffle_input_sentence() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void TrainerSpec::clear_shuffle_input_sentence() {
  _impl_.shuffle_input_sentence_ = true;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool TrainerSpec::shuffle_input_sentence() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.shuffle_input_sentence)
  return _internal_shuffle_input_sentence();
}
inline void TrainerSpec::set_shuffle_input_sentence(bool value) {
  _internal_set_shuffle_input_sentence(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.shuffle_input_sentence)
}
inline bool TrainerSpec::_internal_shuffle_input_sentence() const {
  return _impl_.shuffle_input_sentence_;
}
inline void TrainerSpec::_internal_set_shuffle_input_sentence(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.shuffle_input_sentence_ = value;
}

// optional int32 mining_sentence_size = 12 [deprecated = true];
inline bool TrainerSpec::has_mining_sentence_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void TrainerSpec::clear_mining_sentence_size() {
  _impl_.mining_sentence_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t TrainerSpec::mining_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.mining_sentence_size)
  return _internal_mining_sentence_size();
}
inline void TrainerSpec::set_mining_sentence_size(::int32_t value) {
  _internal_set_mining_sentence_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.mining_sentence_size)
}
inline ::int32_t TrainerSpec::_internal_mining_sentence_size() const {
  return _impl_.mining_sentence_size_;
}
inline void TrainerSpec::_internal_set_mining_sentence_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.mining_sentence_size_ = value;
}

// optional int32 training_sentence_size = 13 [deprecated = true];
inline bool TrainerSpec::has_training_sentence_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TrainerSpec::clear_training_sentence_size() {
  _impl_.training_sentence_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t TrainerSpec::training_sentence_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.training_sentence_size)
  return _internal_training_sentence_size();
}
inline void TrainerSpec::set_training_sentence_size(::int32_t value) {
  _internal_set_training_sentence_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.training_sentence_size)
}
inline ::int32_t TrainerSpec::_internal_training_sentence_size() const {
  return _impl_.training_sentence_size_;
}
inline void TrainerSpec::_internal_set_training_sentence_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.training_sentence_size_ = value;
}

// optional int32 seed_sentencepiece_size = 14 [default = 1000000];
inline bool TrainerSpec::has_seed_sentencepiece_size() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_seed_sentencepiece_size() {
  _impl_.seed_sentencepiece_size_ = 1000000;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int32_t TrainerSpec::seed_sentencepiece_size() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.seed_sentencepiece_size)
  return _internal_seed_sentencepiece_size();
}
inline void TrainerSpec::set_seed_sentencepiece_size(::int32_t value) {
  _internal_set_seed_sentencepiece_size(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.seed_sentencepiece_size)
}
inline ::int32_t TrainerSpec::_internal_seed_sentencepiece_size() const {
  return _impl_.seed_sentencepiece_size_;
}
inline void TrainerSpec::_internal_set_seed_sentencepiece_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.seed_sentencepiece_size_ = value;
}

// optional float shrinking_factor = 15 [default = 0.75];
inline bool TrainerSpec::has_shrinking_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_shrinking_factor() {
  _impl_.shrinking_factor_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float TrainerSpec::shrinking_factor() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.shrinking_factor)
  return _internal_shrinking_factor();
}
inline void TrainerSpec::set_shrinking_factor(float value) {
  _internal_set_shrinking_factor(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.shrinking_factor)
}
inline float TrainerSpec::_internal_shrinking_factor() const {
  return _impl_.shrinking_factor_;
}
inline void TrainerSpec::_internal_set_shrinking_factor(float value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.shrinking_factor_ = value;
}

// optional int32 max_sentence_length = 18 [default = 4192];
inline bool TrainerSpec::has_max_sentence_length() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_max_sentence_length() {
  _impl_.max_sentence_length_ = 4192;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int32_t TrainerSpec::max_sentence_length() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.max_sentence_length)
  return _internal_max_sentence_length();
}
inline void TrainerSpec::set_max_sentence_length(::int32_t value) {
  _internal_set_max_sentence_length(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.max_sentence_length)
}
inline ::int32_t TrainerSpec::_internal_max_sentence_length() const {
  return _impl_.max_sentence_length_;
}
inline void TrainerSpec::_internal_set_max_sentence_length(::int32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.max_sentence_length_ = value;
}

// optional int32 num_threads = 16 [default = 16];
inline bool TrainerSpec::has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_num_threads() {
  _impl_.num_threads_ = 16;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t TrainerSpec::num_threads() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.num_threads)
  return _internal_num_threads();
}
inline void TrainerSpec::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.num_threads)
}
inline ::int32_t TrainerSpec::_internal_num_threads() const {
  return _impl_.num_threads_;
}
inline void TrainerSpec::_internal_set_num_threads(::int32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.num_threads_ = value;
}

// optional int32 num_sub_iterations = 17 [default = 2];
inline bool TrainerSpec::has_num_sub_iterations() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_num_sub_iterations() {
  _impl_.num_sub_iterations_ = 2;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t TrainerSpec::num_sub_iterations() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.num_sub_iterations)
  return _internal_num_sub_iterations();
}
inline void TrainerSpec::set_num_sub_iterations(::int32_t value) {
  _internal_set_num_sub_iterations(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.num_sub_iterations)
}
inline ::int32_t TrainerSpec::_internal_num_sub_iterations() const {
  return _impl_.num_sub_iterations_;
}
inline void TrainerSpec::_internal_set_num_sub_iterations(::int32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.num_sub_iterations_ = value;
}

// optional int32 max_sentencepiece_length = 20 [default = 16];
inline bool TrainerSpec::has_max_sentencepiece_length() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void TrainerSpec::clear_max_sentencepiece_length() {
  _impl_.max_sentencepiece_length_ = 16;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t TrainerSpec::max_sentencepiece_length() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.max_sentencepiece_length)
  return _internal_max_sentencepiece_length();
}
inline void TrainerSpec::set_max_sentencepiece_length(::int32_t value) {
  _internal_set_max_sentencepiece_length(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.max_sentencepiece_length)
}
inline ::int32_t TrainerSpec::_internal_max_sentencepiece_length() const {
  return _impl_.max_sentencepiece_length_;
}
inline void TrainerSpec::_internal_set_max_sentencepiece_length(::int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.max_sentencepiece_length_ = value;
}

// optional bool split_by_unicode_script = 21 [default = true];
inline bool TrainerSpec::has_split_by_unicode_script() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void TrainerSpec::clear_split_by_unicode_script() {
  _impl_.split_by_unicode_script_ = true;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool TrainerSpec::split_by_unicode_script() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_unicode_script)
  return _internal_split_by_unicode_script();
}
inline void TrainerSpec::set_split_by_unicode_script(bool value) {
  _internal_set_split_by_unicode_script(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_unicode_script)
}
inline bool TrainerSpec::_internal_split_by_unicode_script() const {
  return _impl_.split_by_unicode_script_;
}
inline void TrainerSpec::_internal_set_split_by_unicode_script(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.split_by_unicode_script_ = value;
}

// optional bool split_by_number = 23 [default = true];
inline bool TrainerSpec::has_split_by_number() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void TrainerSpec::clear_split_by_number() {
  _impl_.split_by_number_ = true;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool TrainerSpec::split_by_number() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_number)
  return _internal_split_by_number();
}
inline void TrainerSpec::set_split_by_number(bool value) {
  _internal_set_split_by_number(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_number)
}
inline bool TrainerSpec::_internal_split_by_number() const {
  return _impl_.split_by_number_;
}
inline void TrainerSpec::_internal_set_split_by_number(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.split_by_number_ = value;
}

// optional bool split_by_whitespace = 22 [default = true];
inline bool TrainerSpec::has_split_by_whitespace() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void TrainerSpec::clear_split_by_whitespace() {
  _impl_.split_by_whitespace_ = true;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool TrainerSpec::split_by_whitespace() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_by_whitespace)
  return _internal_split_by_whitespace();
}
inline void TrainerSpec::set_split_by_whitespace(bool value) {
  _internal_set_split_by_whitespace(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_by_whitespace)
}
inline bool TrainerSpec::_internal_split_by_whitespace() const {
  return _impl_.split_by_whitespace_;
}
inline void TrainerSpec::_internal_set_split_by_whitespace(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.split_by_whitespace_ = value;
}

// optional bool treat_whitespace_as_suffix = 24 [default = false];
inline bool TrainerSpec::has_treat_whitespace_as_suffix() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TrainerSpec::clear_treat_whitespace_as_suffix() {
  _impl_.treat_whitespace_as_suffix_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool TrainerSpec::treat_whitespace_as_suffix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.treat_whitespace_as_suffix)
  return _internal_treat_whitespace_as_suffix();
}
inline void TrainerSpec::set_treat_whitespace_as_suffix(bool value) {
  _internal_set_treat_whitespace_as_suffix(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.treat_whitespace_as_suffix)
}
inline bool TrainerSpec::_internal_treat_whitespace_as_suffix() const {
  return _impl_.treat_whitespace_as_suffix_;
}
inline void TrainerSpec::_internal_set_treat_whitespace_as_suffix(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.treat_whitespace_as_suffix_ = value;
}

// optional bool allow_whitespace_only_pieces = 26 [default = false];
inline bool TrainerSpec::has_allow_whitespace_only_pieces() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TrainerSpec::clear_allow_whitespace_only_pieces() {
  _impl_.allow_whitespace_only_pieces_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool TrainerSpec::allow_whitespace_only_pieces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.allow_whitespace_only_pieces)
  return _internal_allow_whitespace_only_pieces();
}
inline void TrainerSpec::set_allow_whitespace_only_pieces(bool value) {
  _internal_set_allow_whitespace_only_pieces(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.allow_whitespace_only_pieces)
}
inline bool TrainerSpec::_internal_allow_whitespace_only_pieces() const {
  return _impl_.allow_whitespace_only_pieces_;
}
inline void TrainerSpec::_internal_set_allow_whitespace_only_pieces(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.allow_whitespace_only_pieces_ = value;
}

// optional bool split_digits = 25 [default = false];
inline bool TrainerSpec::has_split_digits() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void TrainerSpec::clear_split_digits() {
  _impl_.split_digits_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool TrainerSpec::split_digits() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.split_digits)
  return _internal_split_digits();
}
inline void TrainerSpec::set_split_digits(bool value) {
  _internal_set_split_digits(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.split_digits)
}
inline bool TrainerSpec::_internal_split_digits() const {
  return _impl_.split_digits_;
}
inline void TrainerSpec::_internal_set_split_digits(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.split_digits_ = value;
}

// optional string pretokenization_delimiter = 53 [default = ""];
inline bool TrainerSpec::has_pretokenization_delimiter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TrainerSpec::clear_pretokenization_delimiter() {
  _impl_.pretokenization_delimiter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& TrainerSpec::pretokenization_delimiter() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pretokenization_delimiter)
  return _internal_pretokenization_delimiter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_pretokenization_delimiter(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pretokenization_delimiter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pretokenization_delimiter)
}
inline std::string* TrainerSpec::mutable_pretokenization_delimiter() {
  std::string* _s = _internal_mutable_pretokenization_delimiter();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.pretokenization_delimiter)
  return _s;
}
inline const std::string& TrainerSpec::_internal_pretokenization_delimiter() const {
  return _impl_.pretokenization_delimiter_.Get();
}
inline void TrainerSpec::_internal_set_pretokenization_delimiter(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;


  _impl_.pretokenization_delimiter_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_pretokenization_delimiter() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.pretokenization_delimiter_.Mutable( GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_pretokenization_delimiter() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.pretokenization_delimiter)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.pretokenization_delimiter_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pretokenization_delimiter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrainerSpec::set_allocated_pretokenization_delimiter(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.pretokenization_delimiter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pretokenization_delimiter_.IsDefault()) {
          _impl_.pretokenization_delimiter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.pretokenization_delimiter)
}

// repeated string control_symbols = 30;
inline int TrainerSpec::_internal_control_symbols_size() const {
  return _impl_.control_symbols_.size();
}
inline int TrainerSpec::control_symbols_size() const {
  return _internal_control_symbols_size();
}
inline void TrainerSpec::clear_control_symbols() {
  _internal_mutable_control_symbols()->Clear();
}
inline std::string* TrainerSpec::add_control_symbols() {
  std::string* _s = _internal_add_control_symbols();
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.control_symbols)
  return _s;
}
inline const std::string& TrainerSpec::control_symbols(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.control_symbols)
  return _internal_control_symbols(index);
}
inline std::string* TrainerSpec::mutable_control_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.control_symbols)
  return _internal_mutable_control_symbols()->Mutable(index);
}
inline void TrainerSpec::set_control_symbols(int index, const std::string& value) {
  _internal_mutable_control_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::set_control_symbols(int index, std::string&& value) {
  _internal_mutable_control_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::set_control_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_control_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::set_control_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_control_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::set_control_symbols(int index, absl::string_view value) {
  _internal_mutable_control_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::add_control_symbols(const std::string& value) {
  _internal_mutable_control_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::add_control_symbols(std::string&& value) {
  _internal_mutable_control_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::add_control_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_control_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::add_control_symbols(const char* value, std::size_t size) {
  _internal_mutable_control_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.control_symbols)
}
inline void TrainerSpec::add_control_symbols(absl::string_view value) {
  _internal_mutable_control_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sentencepiece.TrainerSpec.control_symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::control_symbols() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.control_symbols)
  return _internal_control_symbols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TrainerSpec::mutable_control_symbols() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.control_symbols)
  return _internal_mutable_control_symbols();
}
inline const std::string& TrainerSpec::_internal_control_symbols(int index) const {
  return _internal_control_symbols().Get(index);
}
inline std::string* TrainerSpec::_internal_add_control_symbols() {
  return _internal_mutable_control_symbols()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::_internal_control_symbols() const {
  return _impl_.control_symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainerSpec::_internal_mutable_control_symbols() {
  return &_impl_.control_symbols_;
}

// repeated string user_defined_symbols = 31;
inline int TrainerSpec::_internal_user_defined_symbols_size() const {
  return _impl_.user_defined_symbols_.size();
}
inline int TrainerSpec::user_defined_symbols_size() const {
  return _internal_user_defined_symbols_size();
}
inline void TrainerSpec::clear_user_defined_symbols() {
  _internal_mutable_user_defined_symbols()->Clear();
}
inline std::string* TrainerSpec::add_user_defined_symbols() {
  std::string* _s = _internal_add_user_defined_symbols();
  // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.user_defined_symbols)
  return _s;
}
inline const std::string& TrainerSpec::user_defined_symbols(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.user_defined_symbols)
  return _internal_user_defined_symbols(index);
}
inline std::string* TrainerSpec::mutable_user_defined_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.user_defined_symbols)
  return _internal_mutable_user_defined_symbols()->Mutable(index);
}
inline void TrainerSpec::set_user_defined_symbols(int index, const std::string& value) {
  _internal_mutable_user_defined_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::set_user_defined_symbols(int index, std::string&& value) {
  _internal_mutable_user_defined_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::set_user_defined_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_user_defined_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::set_user_defined_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_user_defined_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::set_user_defined_symbols(int index, absl::string_view value) {
  _internal_mutable_user_defined_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::add_user_defined_symbols(const std::string& value) {
  _internal_mutable_user_defined_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::add_user_defined_symbols(std::string&& value) {
  _internal_mutable_user_defined_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::add_user_defined_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_user_defined_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::add_user_defined_symbols(const char* value, std::size_t size) {
  _internal_mutable_user_defined_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline void TrainerSpec::add_user_defined_symbols(absl::string_view value) {
  _internal_mutable_user_defined_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sentencepiece.TrainerSpec.user_defined_symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::user_defined_symbols() const {
  // @@protoc_insertion_point(field_list:sentencepiece.TrainerSpec.user_defined_symbols)
  return _internal_user_defined_symbols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TrainerSpec::mutable_user_defined_symbols() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.TrainerSpec.user_defined_symbols)
  return _internal_mutable_user_defined_symbols();
}
inline const std::string& TrainerSpec::_internal_user_defined_symbols(int index) const {
  return _internal_user_defined_symbols().Get(index);
}
inline std::string* TrainerSpec::_internal_add_user_defined_symbols() {
  return _internal_mutable_user_defined_symbols()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::_internal_user_defined_symbols() const {
  return _impl_.user_defined_symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainerSpec::_internal_mutable_user_defined_symbols() {
  return &_impl_.user_defined_symbols_;
}

// optional string required_chars = 36;
inline bool TrainerSpec::has_required_chars() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrainerSpec::clear_required_chars() {
  _impl_.required_chars_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrainerSpec::required_chars() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.required_chars)
  return _internal_required_chars();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_required_chars(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.required_chars_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.required_chars)
}
inline std::string* TrainerSpec::mutable_required_chars() {
  std::string* _s = _internal_mutable_required_chars();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.required_chars)
  return _s;
}
inline const std::string& TrainerSpec::_internal_required_chars() const {
  return _impl_.required_chars_.Get();
}
inline void TrainerSpec::_internal_set_required_chars(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.required_chars_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_required_chars() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.required_chars_.Mutable( GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_required_chars() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.required_chars)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.required_chars_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.required_chars_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrainerSpec::set_allocated_required_chars(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.required_chars_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.required_chars_.IsDefault()) {
          _impl_.required_chars_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.required_chars)
}

// optional bool byte_fallback = 35 [default = false];
inline bool TrainerSpec::has_byte_fallback() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void TrainerSpec::clear_byte_fallback() {
  _impl_.byte_fallback_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool TrainerSpec::byte_fallback() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.byte_fallback)
  return _internal_byte_fallback();
}
inline void TrainerSpec::set_byte_fallback(bool value) {
  _internal_set_byte_fallback(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.byte_fallback)
}
inline bool TrainerSpec::_internal_byte_fallback() const {
  return _impl_.byte_fallback_;
}
inline void TrainerSpec::_internal_set_byte_fallback(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.byte_fallback_ = value;
}

// optional bool vocabulary_output_piece_score = 32 [default = true];
inline bool TrainerSpec::has_vocabulary_output_piece_score() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void TrainerSpec::clear_vocabulary_output_piece_score() {
  _impl_.vocabulary_output_piece_score_ = true;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool TrainerSpec::vocabulary_output_piece_score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.vocabulary_output_piece_score)
  return _internal_vocabulary_output_piece_score();
}
inline void TrainerSpec::set_vocabulary_output_piece_score(bool value) {
  _internal_set_vocabulary_output_piece_score(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.vocabulary_output_piece_score)
}
inline bool TrainerSpec::_internal_vocabulary_output_piece_score() const {
  return _impl_.vocabulary_output_piece_score_;
}
inline void TrainerSpec::_internal_set_vocabulary_output_piece_score(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.vocabulary_output_piece_score_ = value;
}

// optional bool hard_vocab_limit = 33 [default = true];
inline bool TrainerSpec::has_hard_vocab_limit() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void TrainerSpec::clear_hard_vocab_limit() {
  _impl_.hard_vocab_limit_ = true;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool TrainerSpec::hard_vocab_limit() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.hard_vocab_limit)
  return _internal_hard_vocab_limit();
}
inline void TrainerSpec::set_hard_vocab_limit(bool value) {
  _internal_set_hard_vocab_limit(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.hard_vocab_limit)
}
inline bool TrainerSpec::_internal_hard_vocab_limit() const {
  return _impl_.hard_vocab_limit_;
}
inline void TrainerSpec::_internal_set_hard_vocab_limit(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.hard_vocab_limit_ = value;
}

// optional bool use_all_vocab = 34 [default = false];
inline bool TrainerSpec::has_use_all_vocab() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void TrainerSpec::clear_use_all_vocab() {
  _impl_.use_all_vocab_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool TrainerSpec::use_all_vocab() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.use_all_vocab)
  return _internal_use_all_vocab();
}
inline void TrainerSpec::set_use_all_vocab(bool value) {
  _internal_set_use_all_vocab(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.use_all_vocab)
}
inline bool TrainerSpec::_internal_use_all_vocab() const {
  return _impl_.use_all_vocab_;
}
inline void TrainerSpec::_internal_set_use_all_vocab(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.use_all_vocab_ = value;
}

// optional int32 unk_id = 40 [default = 0];
inline bool TrainerSpec::has_unk_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void TrainerSpec::clear_unk_id() {
  _impl_.unk_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t TrainerSpec::unk_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_id)
  return _internal_unk_id();
}
inline void TrainerSpec::set_unk_id(::int32_t value) {
  _internal_set_unk_id(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_id)
}
inline ::int32_t TrainerSpec::_internal_unk_id() const {
  return _impl_.unk_id_;
}
inline void TrainerSpec::_internal_set_unk_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.unk_id_ = value;
}

// optional int32 bos_id = 41 [default = 1];
inline bool TrainerSpec::has_bos_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void TrainerSpec::clear_bos_id() {
  _impl_.bos_id_ = 1;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::int32_t TrainerSpec::bos_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.bos_id)
  return _internal_bos_id();
}
inline void TrainerSpec::set_bos_id(::int32_t value) {
  _internal_set_bos_id(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.bos_id)
}
inline ::int32_t TrainerSpec::_internal_bos_id() const {
  return _impl_.bos_id_;
}
inline void TrainerSpec::_internal_set_bos_id(::int32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.bos_id_ = value;
}

// optional int32 eos_id = 42 [default = 2];
inline bool TrainerSpec::has_eos_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void TrainerSpec::clear_eos_id() {
  _impl_.eos_id_ = 2;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int32_t TrainerSpec::eos_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.eos_id)
  return _internal_eos_id();
}
inline void TrainerSpec::set_eos_id(::int32_t value) {
  _internal_set_eos_id(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.eos_id)
}
inline ::int32_t TrainerSpec::_internal_eos_id() const {
  return _impl_.eos_id_;
}
inline void TrainerSpec::_internal_set_eos_id(::int32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.eos_id_ = value;
}

// optional int32 pad_id = 43 [default = -1];
inline bool TrainerSpec::has_pad_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void TrainerSpec::clear_pad_id() {
  _impl_.pad_id_ = -1;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int32_t TrainerSpec::pad_id() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pad_id)
  return _internal_pad_id();
}
inline void TrainerSpec::set_pad_id(::int32_t value) {
  _internal_set_pad_id(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pad_id)
}
inline ::int32_t TrainerSpec::_internal_pad_id() const {
  return _impl_.pad_id_;
}
inline void TrainerSpec::_internal_set_pad_id(::int32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.pad_id_ = value;
}

// optional string unk_piece = 45 [default = "<unk>"];
inline bool TrainerSpec::has_unk_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TrainerSpec::clear_unk_piece() {
  _impl_.unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TrainerSpec::unk_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_piece)
  if (_impl_.unk_piece_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_unk_piece_.get();
  }
  return _internal_unk_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_unk_piece(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unk_piece_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_piece)
}
inline std::string* TrainerSpec::mutable_unk_piece() {
  std::string* _s = _internal_mutable_unk_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_piece)
  return _s;
}
inline const std::string& TrainerSpec::_internal_unk_piece() const {
  return _impl_.unk_piece_.Get();
}
inline void TrainerSpec::_internal_set_unk_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.unk_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_unk_piece() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.unk_piece_.Mutable(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_unk_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_piece)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  return _impl_.unk_piece_.Release();
}
inline void TrainerSpec::set_allocated_unk_piece(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unk_piece_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_piece)
}

// optional string bos_piece = 46 [default = "<s>"];
inline bool TrainerSpec::has_bos_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TrainerSpec::clear_bos_piece() {
  _impl_.bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TrainerSpec::bos_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.bos_piece)
  if (_impl_.bos_piece_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_bos_piece_.get();
  }
  return _internal_bos_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_bos_piece(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bos_piece_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.bos_piece)
}
inline std::string* TrainerSpec::mutable_bos_piece() {
  std::string* _s = _internal_mutable_bos_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.bos_piece)
  return _s;
}
inline const std::string& TrainerSpec::_internal_bos_piece() const {
  return _impl_.bos_piece_.Get();
}
inline void TrainerSpec::_internal_set_bos_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.bos_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_bos_piece() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.bos_piece_.Mutable(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_bos_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.bos_piece)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  return _impl_.bos_piece_.Release();
}
inline void TrainerSpec::set_allocated_bos_piece(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.bos_piece_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.bos_piece)
}

// optional string eos_piece = 47 [default = "</s>"];
inline bool TrainerSpec::has_eos_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TrainerSpec::clear_eos_piece() {
  _impl_.eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TrainerSpec::eos_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.eos_piece)
  if (_impl_.eos_piece_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_eos_piece_.get();
  }
  return _internal_eos_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_eos_piece(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.eos_piece_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.eos_piece)
}
inline std::string* TrainerSpec::mutable_eos_piece() {
  std::string* _s = _internal_mutable_eos_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.eos_piece)
  return _s;
}
inline const std::string& TrainerSpec::_internal_eos_piece() const {
  return _impl_.eos_piece_.Get();
}
inline void TrainerSpec::_internal_set_eos_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.eos_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_eos_piece() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.eos_piece_.Mutable(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_eos_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.eos_piece)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  return _impl_.eos_piece_.Release();
}
inline void TrainerSpec::set_allocated_eos_piece(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.eos_piece_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.eos_piece)
}

// optional string pad_piece = 48 [default = "<pad>"];
inline bool TrainerSpec::has_pad_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TrainerSpec::clear_pad_piece() {
  _impl_.pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TrainerSpec::pad_piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.pad_piece)
  if (_impl_.pad_piece_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_pad_piece_.get();
  }
  return _internal_pad_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_pad_piece(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pad_piece_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pad_piece)
}
inline std::string* TrainerSpec::mutable_pad_piece() {
  std::string* _s = _internal_mutable_pad_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.pad_piece)
  return _s;
}
inline const std::string& TrainerSpec::_internal_pad_piece() const {
  return _impl_.pad_piece_.Get();
}
inline void TrainerSpec::_internal_set_pad_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;


  _impl_.pad_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_pad_piece() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.pad_piece_.Mutable(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_pad_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.pad_piece)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  return _impl_.pad_piece_.Release();
}
inline void TrainerSpec::set_allocated_pad_piece(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.pad_piece_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.pad_piece)
}

// optional string unk_surface = 44 [default = " \342\201\207 "];
inline bool TrainerSpec::has_unk_surface() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrainerSpec::clear_unk_surface() {
  _impl_.unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TrainerSpec::unk_surface() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.unk_surface)
  if (_impl_.unk_surface_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_unk_surface_.get();
  }
  return _internal_unk_surface();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrainerSpec::set_unk_surface(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unk_surface_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_surface)
}
inline std::string* TrainerSpec::mutable_unk_surface() {
  std::string* _s = _internal_mutable_unk_surface();
  // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_surface)
  return _s;
}
inline const std::string& TrainerSpec::_internal_unk_surface() const {
  return _impl_.unk_surface_.Get();
}
inline void TrainerSpec::_internal_set_unk_surface(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.unk_surface_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainerSpec::_internal_mutable_unk_surface() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.unk_surface_.Mutable(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
}
inline std::string* TrainerSpec::release_unk_surface() {
  // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_surface)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  return _impl_.unk_surface_.Release();
}
inline void TrainerSpec::set_allocated_unk_surface(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.unk_surface_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_surface)
}

// optional bool train_extremely_large_corpus = 49 [default = false];
inline bool TrainerSpec::has_train_extremely_large_corpus() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void TrainerSpec::clear_train_extremely_large_corpus() {
  _impl_.train_extremely_large_corpus_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool TrainerSpec::train_extremely_large_corpus() const {
  // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.train_extremely_large_corpus)
  return _internal_train_extremely_large_corpus();
}
inline void TrainerSpec::set_train_extremely_large_corpus(bool value) {
  _internal_set_train_extremely_large_corpus(value);
  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.train_extremely_large_corpus)
}
inline bool TrainerSpec::_internal_train_extremely_large_corpus() const {
  return _impl_.train_extremely_large_corpus_;
}
inline void TrainerSpec::_internal_set_train_extremely_large_corpus(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.train_extremely_large_corpus_ = value;
}

// -------------------------------------------------------------------

// NormalizerSpec

// optional string name = 1;
inline bool NormalizerSpec::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NormalizerSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NormalizerSpec::name() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NormalizerSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.name)
}
inline std::string* NormalizerSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.name)
  return _s;
}
inline const std::string& NormalizerSpec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NormalizerSpec::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NormalizerSpec::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* NormalizerSpec::release_name() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NormalizerSpec::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.name)
}

// optional bytes precompiled_charsmap = 2;
inline bool NormalizerSpec::has_precompiled_charsmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NormalizerSpec::clear_precompiled_charsmap() {
  _impl_.precompiled_charsmap_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NormalizerSpec::precompiled_charsmap() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.precompiled_charsmap)
  return _internal_precompiled_charsmap();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NormalizerSpec::set_precompiled_charsmap(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.precompiled_charsmap_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.precompiled_charsmap)
}
inline std::string* NormalizerSpec::mutable_precompiled_charsmap() {
  std::string* _s = _internal_mutable_precompiled_charsmap();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.precompiled_charsmap)
  return _s;
}
inline const std::string& NormalizerSpec::_internal_precompiled_charsmap() const {
  return _impl_.precompiled_charsmap_.Get();
}
inline void NormalizerSpec::_internal_set_precompiled_charsmap(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.precompiled_charsmap_.Set(value, GetArenaForAllocation());
}
inline std::string* NormalizerSpec::_internal_mutable_precompiled_charsmap() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.precompiled_charsmap_.Mutable( GetArenaForAllocation());
}
inline std::string* NormalizerSpec::release_precompiled_charsmap() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.precompiled_charsmap)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.precompiled_charsmap_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.precompiled_charsmap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NormalizerSpec::set_allocated_precompiled_charsmap(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.precompiled_charsmap_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.precompiled_charsmap_.IsDefault()) {
          _impl_.precompiled_charsmap_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.precompiled_charsmap)
}

// optional bool add_dummy_prefix = 3 [default = true];
inline bool NormalizerSpec::has_add_dummy_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NormalizerSpec::clear_add_dummy_prefix() {
  _impl_.add_dummy_prefix_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NormalizerSpec::add_dummy_prefix() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.add_dummy_prefix)
  return _internal_add_dummy_prefix();
}
inline void NormalizerSpec::set_add_dummy_prefix(bool value) {
  _internal_set_add_dummy_prefix(value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.add_dummy_prefix)
}
inline bool NormalizerSpec::_internal_add_dummy_prefix() const {
  return _impl_.add_dummy_prefix_;
}
inline void NormalizerSpec::_internal_set_add_dummy_prefix(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.add_dummy_prefix_ = value;
}

// optional bool remove_extra_whitespaces = 4 [default = true];
inline bool NormalizerSpec::has_remove_extra_whitespaces() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NormalizerSpec::clear_remove_extra_whitespaces() {
  _impl_.remove_extra_whitespaces_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NormalizerSpec::remove_extra_whitespaces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.remove_extra_whitespaces)
  return _internal_remove_extra_whitespaces();
}
inline void NormalizerSpec::set_remove_extra_whitespaces(bool value) {
  _internal_set_remove_extra_whitespaces(value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.remove_extra_whitespaces)
}
inline bool NormalizerSpec::_internal_remove_extra_whitespaces() const {
  return _impl_.remove_extra_whitespaces_;
}
inline void NormalizerSpec::_internal_set_remove_extra_whitespaces(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.remove_extra_whitespaces_ = value;
}

// optional bool escape_whitespaces = 5 [default = true];
inline bool NormalizerSpec::has_escape_whitespaces() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NormalizerSpec::clear_escape_whitespaces() {
  _impl_.escape_whitespaces_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool NormalizerSpec::escape_whitespaces() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.escape_whitespaces)
  return _internal_escape_whitespaces();
}
inline void NormalizerSpec::set_escape_whitespaces(bool value) {
  _internal_set_escape_whitespaces(value);
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.escape_whitespaces)
}
inline bool NormalizerSpec::_internal_escape_whitespaces() const {
  return _impl_.escape_whitespaces_;
}
inline void NormalizerSpec::_internal_set_escape_whitespaces(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.escape_whitespaces_ = value;
}

// optional string normalization_rule_tsv = 6;
inline bool NormalizerSpec::has_normalization_rule_tsv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NormalizerSpec::clear_normalization_rule_tsv() {
  _impl_.normalization_rule_tsv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NormalizerSpec::normalization_rule_tsv() const {
  // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  return _internal_normalization_rule_tsv();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NormalizerSpec::set_normalization_rule_tsv(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.normalization_rule_tsv_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}
inline std::string* NormalizerSpec::mutable_normalization_rule_tsv() {
  std::string* _s = _internal_mutable_normalization_rule_tsv();
  // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  return _s;
}
inline const std::string& NormalizerSpec::_internal_normalization_rule_tsv() const {
  return _impl_.normalization_rule_tsv_.Get();
}
inline void NormalizerSpec::_internal_set_normalization_rule_tsv(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.normalization_rule_tsv_.Set(value, GetArenaForAllocation());
}
inline std::string* NormalizerSpec::_internal_mutable_normalization_rule_tsv() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.normalization_rule_tsv_.Mutable( GetArenaForAllocation());
}
inline std::string* NormalizerSpec::release_normalization_rule_tsv() {
  // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.normalization_rule_tsv)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.normalization_rule_tsv_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.normalization_rule_tsv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NormalizerSpec::set_allocated_normalization_rule_tsv(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.normalization_rule_tsv_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.normalization_rule_tsv_.IsDefault()) {
          _impl_.normalization_rule_tsv_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.normalization_rule_tsv)
}

// -------------------------------------------------------------------

// SelfTestData_Sample

// optional string input = 1;
inline bool SelfTestData_Sample::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelfTestData_Sample::clear_input() {
  _impl_.input_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelfTestData_Sample::input() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.input)
  return _internal_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelfTestData_Sample::set_input(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.input)
}
inline std::string* SelfTestData_Sample::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.input)
  return _s;
}
inline const std::string& SelfTestData_Sample::_internal_input() const {
  return _impl_.input_.Get();
}
inline void SelfTestData_Sample::_internal_set_input(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* SelfTestData_Sample::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.input_.Mutable( GetArenaForAllocation());
}
inline std::string* SelfTestData_Sample::release_input() {
  // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.input)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.input_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelfTestData_Sample::set_allocated_input(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_.IsDefault()) {
          _impl_.input_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.input)
}

// optional string expected = 2;
inline bool SelfTestData_Sample::has_expected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SelfTestData_Sample::clear_expected() {
  _impl_.expected_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SelfTestData_Sample::expected() const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.expected)
  return _internal_expected();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelfTestData_Sample::set_expected(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.expected_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.expected)
}
inline std::string* SelfTestData_Sample::mutable_expected() {
  std::string* _s = _internal_mutable_expected();
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.expected)
  return _s;
}
inline const std::string& SelfTestData_Sample::_internal_expected() const {
  return _impl_.expected_.Get();
}
inline void SelfTestData_Sample::_internal_set_expected(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.expected_.Set(value, GetArenaForAllocation());
}
inline std::string* SelfTestData_Sample::_internal_mutable_expected() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.expected_.Mutable( GetArenaForAllocation());
}
inline std::string* SelfTestData_Sample::release_expected() {
  // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.expected)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.expected_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expected_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelfTestData_Sample::set_allocated_expected(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.expected_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expected_.IsDefault()) {
          _impl_.expected_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.expected)
}

// -------------------------------------------------------------------

// SelfTestData

// repeated .sentencepiece.SelfTestData.Sample samples = 1;
inline int SelfTestData::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int SelfTestData::samples_size() const {
  return _internal_samples_size();
}
inline void SelfTestData::clear_samples() {
  _internal_mutable_samples()->Clear();
}
inline ::sentencepiece::SelfTestData_Sample* SelfTestData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >*
SelfTestData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.SelfTestData.samples)
  return _internal_mutable_samples();
}
inline const ::sentencepiece::SelfTestData_Sample& SelfTestData::_internal_samples(int index) const {
  return _internal_samples().Get(index);
}
inline const ::sentencepiece::SelfTestData_Sample& SelfTestData::samples(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.samples)
  return _internal_samples(index);
}
inline ::sentencepiece::SelfTestData_Sample* SelfTestData::_internal_add_samples() {
  return _internal_mutable_samples()->Add();
}
inline ::sentencepiece::SelfTestData_Sample* SelfTestData::add_samples() {
  ::sentencepiece::SelfTestData_Sample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:sentencepiece.SelfTestData.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >&
SelfTestData::samples() const {
  // @@protoc_insertion_point(field_list:sentencepiece.SelfTestData.samples)
  return _internal_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::SelfTestData_Sample>&
SelfTestData::_internal_samples() const {
  return _impl_.samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::SelfTestData_Sample>*
SelfTestData::_internal_mutable_samples() {
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// ModelProto_SentencePiece

// optional string piece = 1;
inline bool ModelProto_SentencePiece::has_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ModelProto_SentencePiece::clear_piece() {
  _impl_.piece_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelProto_SentencePiece::piece() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.piece)
  return _internal_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelProto_SentencePiece::set_piece(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.piece_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.piece)
}
inline std::string* ModelProto_SentencePiece::mutable_piece() {
  std::string* _s = _internal_mutable_piece();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.SentencePiece.piece)
  return _s;
}
inline const std::string& ModelProto_SentencePiece::_internal_piece() const {
  return _impl_.piece_.Get();
}
inline void ModelProto_SentencePiece::_internal_set_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.piece_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelProto_SentencePiece::_internal_mutable_piece() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.piece_.Mutable( GetArenaForAllocation());
}
inline std::string* ModelProto_SentencePiece::release_piece() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.SentencePiece.piece)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.piece_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.piece_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ModelProto_SentencePiece::set_allocated_piece(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.piece_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.piece_.IsDefault()) {
          _impl_.piece_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.SentencePiece.piece)
}

// optional float score = 2;
inline bool ModelProto_SentencePiece::has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ModelProto_SentencePiece::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ModelProto_SentencePiece::score() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.score)
  return _internal_score();
}
inline void ModelProto_SentencePiece::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.score)
}
inline float ModelProto_SentencePiece::_internal_score() const {
  return _impl_.score_;
}
inline void ModelProto_SentencePiece::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}

// optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
inline bool ModelProto_SentencePiece::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ModelProto_SentencePiece::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sentencepiece::ModelProto_SentencePiece_Type ModelProto_SentencePiece::type() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.type)
  return _internal_type();
}
inline void ModelProto_SentencePiece::set_type(::sentencepiece::ModelProto_SentencePiece_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.type)
}
inline ::sentencepiece::ModelProto_SentencePiece_Type ModelProto_SentencePiece::_internal_type() const {
  return static_cast<::sentencepiece::ModelProto_SentencePiece_Type>(_impl_.type_);
}
inline void ModelProto_SentencePiece::_internal_set_type(::sentencepiece::ModelProto_SentencePiece_Type value) {
  assert(::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// ModelProto

// repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
inline int ModelProto::_internal_pieces_size() const {
  return _impl_.pieces_.size();
}
inline int ModelProto::pieces_size() const {
  return _internal_pieces_size();
}
inline void ModelProto::clear_pieces() {
  _internal_mutable_pieces()->Clear();
}
inline ::sentencepiece::ModelProto_SentencePiece* ModelProto::mutable_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.pieces)
  return _internal_mutable_pieces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >*
ModelProto::mutable_pieces() {
  // @@protoc_insertion_point(field_mutable_list:sentencepiece.ModelProto.pieces)
  return _internal_mutable_pieces();
}
inline const ::sentencepiece::ModelProto_SentencePiece& ModelProto::_internal_pieces(int index) const {
  return _internal_pieces().Get(index);
}
inline const ::sentencepiece::ModelProto_SentencePiece& ModelProto::pieces(int index) const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.pieces)
  return _internal_pieces(index);
}
inline ::sentencepiece::ModelProto_SentencePiece* ModelProto::_internal_add_pieces() {
  return _internal_mutable_pieces()->Add();
}
inline ::sentencepiece::ModelProto_SentencePiece* ModelProto::add_pieces() {
  ::sentencepiece::ModelProto_SentencePiece* _add = _internal_add_pieces();
  // @@protoc_insertion_point(field_add:sentencepiece.ModelProto.pieces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >&
ModelProto::pieces() const {
  // @@protoc_insertion_point(field_list:sentencepiece.ModelProto.pieces)
  return _internal_pieces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::ModelProto_SentencePiece>&
ModelProto::_internal_pieces() const {
  return _impl_.pieces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sentencepiece::ModelProto_SentencePiece>*
ModelProto::_internal_mutable_pieces() {
  return &_impl_.pieces_;
}

// optional .sentencepiece.TrainerSpec trainer_spec = 2;
inline bool ModelProto::has_trainer_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trainer_spec_ != nullptr);
  return value;
}
inline void ModelProto::clear_trainer_spec() {
  if (_impl_.trainer_spec_ != nullptr) _impl_.trainer_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sentencepiece::TrainerSpec& ModelProto::_internal_trainer_spec() const {
  const ::sentencepiece::TrainerSpec* p = _impl_.trainer_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::sentencepiece::TrainerSpec&>(
      ::sentencepiece::_TrainerSpec_default_instance_);
}
inline const ::sentencepiece::TrainerSpec& ModelProto::trainer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.trainer_spec)
  return _internal_trainer_spec();
}
inline void ModelProto::unsafe_arena_set_allocated_trainer_spec(
    ::sentencepiece::TrainerSpec* trainer_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trainer_spec_);
  }
  _impl_.trainer_spec_ = trainer_spec;
  if (trainer_spec) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentencepiece.ModelProto.trainer_spec)
}
inline ::sentencepiece::TrainerSpec* ModelProto::release_trainer_spec() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sentencepiece::TrainerSpec* temp = _impl_.trainer_spec_;
  _impl_.trainer_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sentencepiece::TrainerSpec* ModelProto::unsafe_arena_release_trainer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.trainer_spec)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sentencepiece::TrainerSpec* temp = _impl_.trainer_spec_;
  _impl_.trainer_spec_ = nullptr;
  return temp;
}
inline ::sentencepiece::TrainerSpec* ModelProto::_internal_mutable_trainer_spec() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trainer_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::sentencepiece::TrainerSpec>(GetArenaForAllocation());
    _impl_.trainer_spec_ = p;
  }
  return _impl_.trainer_spec_;
}
inline ::sentencepiece::TrainerSpec* ModelProto::mutable_trainer_spec() {
  ::sentencepiece::TrainerSpec* _msg = _internal_mutable_trainer_spec();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.trainer_spec)
  return _msg;
}
inline void ModelProto::set_allocated_trainer_spec(::sentencepiece::TrainerSpec* trainer_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trainer_spec_;
  }
  if (trainer_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trainer_spec);
    if (message_arena != submessage_arena) {
      trainer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainer_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trainer_spec_ = trainer_spec;
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.trainer_spec)
}

// optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
inline bool ModelProto::has_normalizer_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normalizer_spec_ != nullptr);
  return value;
}
inline void ModelProto::clear_normalizer_spec() {
  if (_impl_.normalizer_spec_ != nullptr) _impl_.normalizer_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sentencepiece::NormalizerSpec& ModelProto::_internal_normalizer_spec() const {
  const ::sentencepiece::NormalizerSpec* p = _impl_.normalizer_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::sentencepiece::NormalizerSpec&>(
      ::sentencepiece::_NormalizerSpec_default_instance_);
}
inline const ::sentencepiece::NormalizerSpec& ModelProto::normalizer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.normalizer_spec)
  return _internal_normalizer_spec();
}
inline void ModelProto::unsafe_arena_set_allocated_normalizer_spec(
    ::sentencepiece::NormalizerSpec* normalizer_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalizer_spec_);
  }
  _impl_.normalizer_spec_ = normalizer_spec;
  if (normalizer_spec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentencepiece.ModelProto.normalizer_spec)
}
inline ::sentencepiece::NormalizerSpec* ModelProto::release_normalizer_spec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sentencepiece::NormalizerSpec* temp = _impl_.normalizer_spec_;
  _impl_.normalizer_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_normalizer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.normalizer_spec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sentencepiece::NormalizerSpec* temp = _impl_.normalizer_spec_;
  _impl_.normalizer_spec_ = nullptr;
  return temp;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::_internal_mutable_normalizer_spec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.normalizer_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArenaForAllocation());
    _impl_.normalizer_spec_ = p;
  }
  return _impl_.normalizer_spec_;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::mutable_normalizer_spec() {
  ::sentencepiece::NormalizerSpec* _msg = _internal_mutable_normalizer_spec();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.normalizer_spec)
  return _msg;
}
inline void ModelProto::set_allocated_normalizer_spec(::sentencepiece::NormalizerSpec* normalizer_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.normalizer_spec_;
  }
  if (normalizer_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normalizer_spec);
    if (message_arena != submessage_arena) {
      normalizer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizer_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.normalizer_spec_ = normalizer_spec;
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.normalizer_spec)
}

// optional .sentencepiece.SelfTestData self_test_data = 4;
inline bool ModelProto::has_self_test_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.self_test_data_ != nullptr);
  return value;
}
inline void ModelProto::clear_self_test_data() {
  if (_impl_.self_test_data_ != nullptr) _impl_.self_test_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sentencepiece::SelfTestData& ModelProto::_internal_self_test_data() const {
  const ::sentencepiece::SelfTestData* p = _impl_.self_test_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sentencepiece::SelfTestData&>(
      ::sentencepiece::_SelfTestData_default_instance_);
}
inline const ::sentencepiece::SelfTestData& ModelProto::self_test_data() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.self_test_data)
  return _internal_self_test_data();
}
inline void ModelProto::unsafe_arena_set_allocated_self_test_data(
    ::sentencepiece::SelfTestData* self_test_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.self_test_data_);
  }
  _impl_.self_test_data_ = self_test_data;
  if (self_test_data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentencepiece.ModelProto.self_test_data)
}
inline ::sentencepiece::SelfTestData* ModelProto::release_self_test_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sentencepiece::SelfTestData* temp = _impl_.self_test_data_;
  _impl_.self_test_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sentencepiece::SelfTestData* ModelProto::unsafe_arena_release_self_test_data() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.self_test_data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sentencepiece::SelfTestData* temp = _impl_.self_test_data_;
  _impl_.self_test_data_ = nullptr;
  return temp;
}
inline ::sentencepiece::SelfTestData* ModelProto::_internal_mutable_self_test_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.self_test_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sentencepiece::SelfTestData>(GetArenaForAllocation());
    _impl_.self_test_data_ = p;
  }
  return _impl_.self_test_data_;
}
inline ::sentencepiece::SelfTestData* ModelProto::mutable_self_test_data() {
  ::sentencepiece::SelfTestData* _msg = _internal_mutable_self_test_data();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.self_test_data)
  return _msg;
}
inline void ModelProto::set_allocated_self_test_data(::sentencepiece::SelfTestData* self_test_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.self_test_data_;
  }
  if (self_test_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(self_test_data);
    if (message_arena != submessage_arena) {
      self_test_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self_test_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.self_test_data_ = self_test_data;
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.self_test_data)
}

// optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
inline bool ModelProto::has_denormalizer_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.denormalizer_spec_ != nullptr);
  return value;
}
inline void ModelProto::clear_denormalizer_spec() {
  if (_impl_.denormalizer_spec_ != nullptr) _impl_.denormalizer_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::sentencepiece::NormalizerSpec& ModelProto::_internal_denormalizer_spec() const {
  const ::sentencepiece::NormalizerSpec* p = _impl_.denormalizer_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::sentencepiece::NormalizerSpec&>(
      ::sentencepiece::_NormalizerSpec_default_instance_);
}
inline const ::sentencepiece::NormalizerSpec& ModelProto::denormalizer_spec() const {
  // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.denormalizer_spec)
  return _internal_denormalizer_spec();
}
inline void ModelProto::unsafe_arena_set_allocated_denormalizer_spec(
    ::sentencepiece::NormalizerSpec* denormalizer_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denormalizer_spec_);
  }
  _impl_.denormalizer_spec_ = denormalizer_spec;
  if (denormalizer_spec) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentencepiece.ModelProto.denormalizer_spec)
}
inline ::sentencepiece::NormalizerSpec* ModelProto::release_denormalizer_spec() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sentencepiece::NormalizerSpec* temp = _impl_.denormalizer_spec_;
  _impl_.denormalizer_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_denormalizer_spec() {
  // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.denormalizer_spec)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sentencepiece::NormalizerSpec* temp = _impl_.denormalizer_spec_;
  _impl_.denormalizer_spec_ = nullptr;
  return temp;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::_internal_mutable_denormalizer_spec() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.denormalizer_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArenaForAllocation());
    _impl_.denormalizer_spec_ = p;
  }
  return _impl_.denormalizer_spec_;
}
inline ::sentencepiece::NormalizerSpec* ModelProto::mutable_denormalizer_spec() {
  ::sentencepiece::NormalizerSpec* _msg = _internal_mutable_denormalizer_spec();
  // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.denormalizer_spec)
  return _msg;
}
inline void ModelProto::set_allocated_denormalizer_spec(::sentencepiece::NormalizerSpec* denormalizer_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.denormalizer_spec_;
  }
  if (denormalizer_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(denormalizer_spec);
    if (message_arena != submessage_arena) {
      denormalizer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, denormalizer_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.denormalizer_spec_ = denormalizer_spec;
  // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.denormalizer_spec)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sentencepiece


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::sentencepiece::TrainerSpec_ModelType> : std::true_type {};
template <>
struct is_proto_enum<::sentencepiece::ModelProto_SentencePiece_Type> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sentencepiece_5fmodel_2eproto_2epb_2eh
