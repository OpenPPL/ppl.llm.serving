// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentencepiece_model.proto

#include "sentencepiece_model.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sentencepiece {
template <typename>
PROTOBUF_CONSTEXPR TrainerSpec::TrainerSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_.accept_language_)*/{}
  , /*decltype(_impl_.control_symbols_)*/{}
  , /*decltype(_impl_.user_defined_symbols_)*/{}
  , /*decltype(_impl_.model_prefix_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.input_format_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.required_chars_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unk_surface_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unk_piece_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bos_piece_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.eos_piece_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pad_piece_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pretokenization_delimiter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.self_test_sample_size_)*/ 0

  , /*decltype(_impl_.mining_sentence_size_)*/ 0

  , /*decltype(_impl_.input_sentence_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.training_sentence_size_)*/ 0

  , /*decltype(_impl_.enable_differential_privacy_)*/ false

  , /*decltype(_impl_.treat_whitespace_as_suffix_)*/ false

  , /*decltype(_impl_.allow_whitespace_only_pieces_)*/ false

  , /*decltype(_impl_.split_digits_)*/ false

  , /*decltype(_impl_.byte_fallback_)*/ false

  , /*decltype(_impl_.use_all_vocab_)*/ false

  , /*decltype(_impl_.train_extremely_large_corpus_)*/ false

  , /*decltype(_impl_.unk_id_)*/ 0

  , /*decltype(_impl_.differential_privacy_clipping_threshold_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.differential_privacy_noise_level_)*/ 0

  , /*decltype(_impl_.model_type_)*/ 1

  , /*decltype(_impl_.vocab_size_)*/ 8000

  , /*decltype(_impl_.character_coverage_)*/ 0.9995f

  , /*decltype(_impl_.seed_sentencepiece_size_)*/ 1000000

  , /*decltype(_impl_.shrinking_factor_)*/ 0.75f

  , /*decltype(_impl_.num_threads_)*/ 16

  , /*decltype(_impl_.num_sub_iterations_)*/ 2

  , /*decltype(_impl_.max_sentence_length_)*/ 4192

  , /*decltype(_impl_.max_sentencepiece_length_)*/ 16

  , /*decltype(_impl_.shuffle_input_sentence_)*/ true

  , /*decltype(_impl_.split_by_unicode_script_)*/ true

  , /*decltype(_impl_.split_by_number_)*/ true

  , /*decltype(_impl_.split_by_whitespace_)*/ true

  , /*decltype(_impl_.vocabulary_output_piece_score_)*/ true

  , /*decltype(_impl_.hard_vocab_limit_)*/ true

  , /*decltype(_impl_.bos_id_)*/ 1

  , /*decltype(_impl_.eos_id_)*/ 2

  , /*decltype(_impl_.pad_id_)*/ -1
} {}
struct TrainerSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainerSpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainerSpecDefaultTypeInternal() {}
  union {
    TrainerSpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainerSpecDefaultTypeInternal _TrainerSpec_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NormalizerSpec::NormalizerSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.precompiled_charsmap_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.normalization_rule_tsv_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.add_dummy_prefix_)*/ true

  , /*decltype(_impl_.remove_extra_whitespaces_)*/ true

  , /*decltype(_impl_.escape_whitespaces_)*/ true
} {}
struct NormalizerSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalizerSpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalizerSpecDefaultTypeInternal() {}
  union {
    NormalizerSpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalizerSpecDefaultTypeInternal _NormalizerSpec_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SelfTestData_Sample::SelfTestData_Sample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expected_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelfTestData_SampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfTestData_SampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfTestData_SampleDefaultTypeInternal() {}
  union {
    SelfTestData_Sample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfTestData_SampleDefaultTypeInternal _SelfTestData_Sample_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SelfTestData::SelfTestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelfTestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfTestDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfTestDataDefaultTypeInternal() {}
  union {
    SelfTestData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfTestDataDefaultTypeInternal _SelfTestData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModelProto_SentencePiece::ModelProto_SentencePiece(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.piece_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.score_)*/ 0

  , /*decltype(_impl_.type_)*/ 1
} {}
struct ModelProto_SentencePieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelProto_SentencePieceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelProto_SentencePieceDefaultTypeInternal() {}
  union {
    ModelProto_SentencePiece _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelProto_SentencePieceDefaultTypeInternal _ModelProto_SentencePiece_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModelProto::ModelProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pieces_)*/{}
  , /*decltype(_impl_.trainer_spec_)*/nullptr
  , /*decltype(_impl_.normalizer_spec_)*/nullptr
  , /*decltype(_impl_.self_test_data_)*/nullptr
  , /*decltype(_impl_.denormalizer_spec_)*/nullptr} {}
struct ModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelProtoDefaultTypeInternal() {}
  union {
    ModelProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
}  // namespace sentencepiece
namespace sentencepiece {
bool TrainerSpec_ModelType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    TrainerSpec_ModelType_strings[4] = {};

static const char TrainerSpec_ModelType_names[] = {
    "BPE"
    "CHAR"
    "UNIGRAM"
    "WORD"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TrainerSpec_ModelType_entries[] =
    {
        {{&TrainerSpec_ModelType_names[0], 3}, 2},
        {{&TrainerSpec_ModelType_names[3], 4}, 4},
        {{&TrainerSpec_ModelType_names[7], 7}, 1},
        {{&TrainerSpec_ModelType_names[14], 4}, 3},
};

static const int TrainerSpec_ModelType_entries_by_number[] = {
    2,  // 1 -> UNIGRAM
    0,  // 2 -> BPE
    3,  // 3 -> WORD
    1,  // 4 -> CHAR
};

const std::string& TrainerSpec_ModelType_Name(TrainerSpec_ModelType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TrainerSpec_ModelType_entries, TrainerSpec_ModelType_entries_by_number,
          4, TrainerSpec_ModelType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TrainerSpec_ModelType_entries, TrainerSpec_ModelType_entries_by_number, 4,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : TrainerSpec_ModelType_strings[idx].get();
}

bool TrainerSpec_ModelType_Parse(absl::string_view name, TrainerSpec_ModelType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TrainerSpec_ModelType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TrainerSpec_ModelType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrainerSpec_ModelType TrainerSpec::UNIGRAM;
constexpr TrainerSpec_ModelType TrainerSpec::BPE;
constexpr TrainerSpec_ModelType TrainerSpec::WORD;
constexpr TrainerSpec_ModelType TrainerSpec::CHAR;
constexpr TrainerSpec_ModelType TrainerSpec::ModelType_MIN;
constexpr TrainerSpec_ModelType TrainerSpec::ModelType_MAX;
constexpr int TrainerSpec::ModelType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ModelProto_SentencePiece_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    ModelProto_SentencePiece_Type_strings[6] = {};

static const char ModelProto_SentencePiece_Type_names[] = {
    "BYTE"
    "CONTROL"
    "NORMAL"
    "UNKNOWN"
    "UNUSED"
    "USER_DEFINED"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ModelProto_SentencePiece_Type_entries[] =
    {
        {{&ModelProto_SentencePiece_Type_names[0], 4}, 6},
        {{&ModelProto_SentencePiece_Type_names[4], 7}, 3},
        {{&ModelProto_SentencePiece_Type_names[11], 6}, 1},
        {{&ModelProto_SentencePiece_Type_names[17], 7}, 2},
        {{&ModelProto_SentencePiece_Type_names[24], 6}, 5},
        {{&ModelProto_SentencePiece_Type_names[30], 12}, 4},
};

static const int ModelProto_SentencePiece_Type_entries_by_number[] = {
    2,  // 1 -> NORMAL
    3,  // 2 -> UNKNOWN
    1,  // 3 -> CONTROL
    5,  // 4 -> USER_DEFINED
    4,  // 5 -> UNUSED
    0,  // 6 -> BYTE
};

const std::string& ModelProto_SentencePiece_Type_Name(ModelProto_SentencePiece_Type value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ModelProto_SentencePiece_Type_entries, ModelProto_SentencePiece_Type_entries_by_number,
          6, ModelProto_SentencePiece_Type_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ModelProto_SentencePiece_Type_entries, ModelProto_SentencePiece_Type_entries_by_number, 6,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : ModelProto_SentencePiece_Type_strings[idx].get();
}

bool ModelProto_SentencePiece_Type_Parse(absl::string_view name, ModelProto_SentencePiece_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ModelProto_SentencePiece_Type_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ModelProto_SentencePiece_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::NORMAL;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::UNKNOWN;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::CONTROL;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::USER_DEFINED;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::BYTE;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::UNUSED;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::Type_MIN;
constexpr ModelProto_SentencePiece_Type ModelProto_SentencePiece::Type_MAX;
constexpr int ModelProto_SentencePiece::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TrainerSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainerSpec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrainerSpec, _impl_._has_bits_);
  static void set_has_input_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_vocab_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_self_test_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_differential_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_differential_privacy_noise_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_differential_privacy_clipping_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_character_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_input_sentence_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_shuffle_input_sentence(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_mining_sentence_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_training_sentence_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_seed_sentencepiece_size(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_shrinking_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_max_sentence_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_num_sub_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_sentencepiece_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_split_by_unicode_script(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_split_by_number(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_split_by_whitespace(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_treat_whitespace_as_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_allow_whitespace_only_pieces(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_split_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pretokenization_delimiter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_required_chars(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_byte_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vocabulary_output_piece_score(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_hard_vocab_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_use_all_vocab(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_unk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_bos_id(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_eos_id(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_pad_id(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_unk_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bos_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_eos_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pad_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unk_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_train_extremely_large_corpus(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

/*static*/ const ::_pbi::LazyString TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_piece_{
    {{"<unk>", 5}},
    {nullptr},
};
/*static*/ const ::_pbi::LazyString TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_bos_piece_{
    {{"<s>", 3}},
    {nullptr},
};
/*static*/ const ::_pbi::LazyString TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_eos_piece_{
    {{"</s>", 4}},
    {nullptr},
};
/*static*/ const ::_pbi::LazyString TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_pad_piece_{
    {{"<pad>", 5}},
    {nullptr},
};
/*static*/ const ::_pbi::LazyString TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_surface_{
    {{" \342\201\207 ", 5}},
    {nullptr},
};
TrainerSpec::TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.TrainerSpec)
}
TrainerSpec::TrainerSpec(const TrainerSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TrainerSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){from._impl_.input_}
    , decltype(_impl_.accept_language_){from._impl_.accept_language_}
    , decltype(_impl_.control_symbols_){from._impl_.control_symbols_}
    , decltype(_impl_.user_defined_symbols_){from._impl_.user_defined_symbols_}
    , decltype(_impl_.model_prefix_) {}

    , decltype(_impl_.input_format_) {}

    , decltype(_impl_.required_chars_) {}

    , decltype(_impl_.unk_surface_) {}

    , decltype(_impl_.unk_piece_) {}

    , decltype(_impl_.bos_piece_) {}

    , decltype(_impl_.eos_piece_) {}

    , decltype(_impl_.pad_piece_) {}

    , decltype(_impl_.pretokenization_delimiter_) {}

    , decltype(_impl_.self_test_sample_size_) {}

    , decltype(_impl_.mining_sentence_size_) {}

    , decltype(_impl_.input_sentence_size_) {}

    , decltype(_impl_.training_sentence_size_) {}

    , decltype(_impl_.enable_differential_privacy_) {}

    , decltype(_impl_.treat_whitespace_as_suffix_) {}

    , decltype(_impl_.allow_whitespace_only_pieces_) {}

    , decltype(_impl_.split_digits_) {}

    , decltype(_impl_.byte_fallback_) {}

    , decltype(_impl_.use_all_vocab_) {}

    , decltype(_impl_.train_extremely_large_corpus_) {}

    , decltype(_impl_.unk_id_) {}

    , decltype(_impl_.differential_privacy_clipping_threshold_) {}

    , decltype(_impl_.differential_privacy_noise_level_) {}

    , decltype(_impl_.model_type_) {}

    , decltype(_impl_.vocab_size_) {}

    , decltype(_impl_.character_coverage_) {}

    , decltype(_impl_.seed_sentencepiece_size_) {}

    , decltype(_impl_.shrinking_factor_) {}

    , decltype(_impl_.num_threads_) {}

    , decltype(_impl_.num_sub_iterations_) {}

    , decltype(_impl_.max_sentence_length_) {}

    , decltype(_impl_.max_sentencepiece_length_) {}

    , decltype(_impl_.shuffle_input_sentence_) {}

    , decltype(_impl_.split_by_unicode_script_) {}

    , decltype(_impl_.split_by_number_) {}

    , decltype(_impl_.split_by_whitespace_) {}

    , decltype(_impl_.vocabulary_output_piece_score_) {}

    , decltype(_impl_.hard_vocab_limit_) {}

    , decltype(_impl_.bos_id_) {}

    , decltype(_impl_.eos_id_) {}

    , decltype(_impl_.pad_id_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.model_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_prefix_.Set(from._internal_model_prefix(), _this->GetArenaForAllocation());
  }
  _impl_.input_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.input_format_.Set(from._internal_input_format(), _this->GetArenaForAllocation());
  }
  _impl_.required_chars_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.required_chars_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.required_chars_.Set(from._internal_required_chars(), _this->GetArenaForAllocation());
  }
  _impl_.unk_surface_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.unk_surface_.Set(from._internal_unk_surface(), _this->GetArenaForAllocation());
  }
  _impl_.unk_piece_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.unk_piece_.Set(from._internal_unk_piece(), _this->GetArenaForAllocation());
  }
  _impl_.bos_piece_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.bos_piece_.Set(from._internal_bos_piece(), _this->GetArenaForAllocation());
  }
  _impl_.eos_piece_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.eos_piece_.Set(from._internal_eos_piece(), _this->GetArenaForAllocation());
  }
  _impl_.pad_piece_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.pad_piece_.Set(from._internal_pad_piece(), _this->GetArenaForAllocation());
  }
  _impl_.pretokenization_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pretokenization_delimiter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.pretokenization_delimiter_.Set(from._internal_pretokenization_delimiter(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.self_test_sample_size_, &from._impl_.self_test_sample_size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pad_id_) -
    reinterpret_cast<char*>(&_impl_.self_test_sample_size_)) + sizeof(_impl_.pad_id_));
  // @@protoc_insertion_point(copy_constructor:sentencepiece.TrainerSpec)
}

inline void TrainerSpec::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){arena}
    , decltype(_impl_.accept_language_){arena}
    , decltype(_impl_.control_symbols_){arena}
    , decltype(_impl_.user_defined_symbols_){arena}
    , decltype(_impl_.model_prefix_) {}

    , decltype(_impl_.input_format_) {}

    , decltype(_impl_.required_chars_) {}

    , decltype(_impl_.unk_surface_) {}

    , decltype(_impl_.unk_piece_) {}

    , decltype(_impl_.bos_piece_) {}

    , decltype(_impl_.eos_piece_) {}

    , decltype(_impl_.pad_piece_) {}

    , decltype(_impl_.pretokenization_delimiter_) {}

    , decltype(_impl_.self_test_sample_size_) { 0 }

    , decltype(_impl_.mining_sentence_size_) { 0 }

    , decltype(_impl_.input_sentence_size_) { ::uint64_t{0u} }

    , decltype(_impl_.training_sentence_size_) { 0 }

    , decltype(_impl_.enable_differential_privacy_) { false }

    , decltype(_impl_.treat_whitespace_as_suffix_) { false }

    , decltype(_impl_.allow_whitespace_only_pieces_) { false }

    , decltype(_impl_.split_digits_) { false }

    , decltype(_impl_.byte_fallback_) { false }

    , decltype(_impl_.use_all_vocab_) { false }

    , decltype(_impl_.train_extremely_large_corpus_) { false }

    , decltype(_impl_.unk_id_) { 0 }

    , decltype(_impl_.differential_privacy_clipping_threshold_) { ::uint64_t{0u} }

    , decltype(_impl_.differential_privacy_noise_level_) { 0 }

    , decltype(_impl_.model_type_) { 1 }

    , decltype(_impl_.vocab_size_) { 8000 }

    , decltype(_impl_.character_coverage_) { 0.9995f }

    , decltype(_impl_.seed_sentencepiece_size_) { 1000000 }

    , decltype(_impl_.shrinking_factor_) { 0.75f }

    , decltype(_impl_.num_threads_) { 16 }

    , decltype(_impl_.num_sub_iterations_) { 2 }

    , decltype(_impl_.max_sentence_length_) { 4192 }

    , decltype(_impl_.max_sentencepiece_length_) { 16 }

    , decltype(_impl_.shuffle_input_sentence_) { true }

    , decltype(_impl_.split_by_unicode_script_) { true }

    , decltype(_impl_.split_by_number_) { true }

    , decltype(_impl_.split_by_whitespace_) { true }

    , decltype(_impl_.vocabulary_output_piece_score_) { true }

    , decltype(_impl_.hard_vocab_limit_) { true }

    , decltype(_impl_.bos_id_) { 1 }

    , decltype(_impl_.eos_id_) { 2 }

    , decltype(_impl_.pad_id_) { -1 }

  };
  _impl_.model_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.required_chars_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.required_chars_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unk_surface_.InitDefault();
  _impl_.unk_piece_.InitDefault();
  _impl_.bos_piece_.InitDefault();
  _impl_.eos_piece_.InitDefault();
  _impl_.pad_piece_.InitDefault();
  _impl_.pretokenization_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pretokenization_delimiter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrainerSpec::~TrainerSpec() {
  // @@protoc_insertion_point(destructor:sentencepiece.TrainerSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainerSpec::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _internal_mutable_input()->~RepeatedPtrField();
  _internal_mutable_accept_language()->~RepeatedPtrField();
  _internal_mutable_control_symbols()->~RepeatedPtrField();
  _internal_mutable_user_defined_symbols()->~RepeatedPtrField();
  _impl_.model_prefix_.Destroy();
  _impl_.input_format_.Destroy();
  _impl_.required_chars_.Destroy();
  _impl_.unk_surface_.Destroy();
  _impl_.unk_piece_.Destroy();
  _impl_.bos_piece_.Destroy();
  _impl_.eos_piece_.Destroy();
  _impl_.pad_piece_.Destroy();
  _impl_.pretokenization_delimiter_.Destroy();
}

void TrainerSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.TrainerSpec)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_mutable_input()->Clear();
  _internal_mutable_accept_language()->Clear();
  _internal_mutable_control_symbols()->Clear();
  _internal_mutable_user_defined_symbols()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.input_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.required_chars_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::Impl_::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _impl_.pretokenization_delimiter_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.self_test_sample_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allow_whitespace_only_pieces_) -
        reinterpret_cast<char*>(&_impl_.self_test_sample_size_)) + sizeof(_impl_.allow_whitespace_only_pieces_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.split_digits_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.differential_privacy_noise_level_) -
        reinterpret_cast<char*>(&_impl_.split_digits_)) + sizeof(_impl_.differential_privacy_noise_level_));
    _impl_.model_type_ = 1;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.vocab_size_ = 8000;
    _impl_.character_coverage_ = 0.9995f;
    _impl_.seed_sentencepiece_size_ = 1000000;
    _impl_.shrinking_factor_ = 0.75f;
    _impl_.num_threads_ = 16;
    _impl_.num_sub_iterations_ = 2;
    _impl_.max_sentence_length_ = 4192;
    _impl_.max_sentencepiece_length_ = 16;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.shuffle_input_sentence_ = true;
    _impl_.split_by_unicode_script_ = true;
    _impl_.split_by_number_ = true;
    _impl_.split_by_whitespace_ = true;
    _impl_.vocabulary_output_piece_score_ = true;
    _impl_.hard_vocab_limit_ = true;
    _impl_.bos_id_ = 1;
    _impl_.eos_id_ = 2;
  }
  _impl_.pad_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrainerSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string model_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sentencepiece::TrainerSpec_ModelType_IsValid(static_cast<int>(val)))) {
            _internal_set_model_type(static_cast<::sentencepiece::TrainerSpec_ModelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 vocab_size = 4 [default = 8000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_vocab_size(&_impl_._has_bits_);
          _impl_.vocab_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string accept_language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accept_language();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 self_test_sample_size = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_self_test_sample_size(&_impl_._has_bits_);
          _impl_.self_test_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string input_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_input_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float character_coverage = 10 [default = 0.9995];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 85)) {
          _Internal::set_has_character_coverage(&_impl_._has_bits_);
          _impl_.character_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 input_sentence_size = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_input_sentence_size(&_impl_._has_bits_);
          _impl_.input_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 mining_sentence_size = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_mining_sentence_size(&_impl_._has_bits_);
          _impl_.mining_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 training_sentence_size = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_training_sentence_size(&_impl_._has_bits_);
          _impl_.training_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_seed_sentencepiece_size(&_impl_._has_bits_);
          _impl_.seed_sentencepiece_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float shrinking_factor = 15 [default = 0.75];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 125)) {
          _Internal::set_has_shrinking_factor(&_impl_._has_bits_);
          _impl_.shrinking_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 num_threads = 16 [default = 16];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_num_threads(&_impl_._has_bits_);
          _impl_.num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 num_sub_iterations = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_num_sub_iterations(&_impl_._has_bits_);
          _impl_.num_sub_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_sentence_length = 18 [default = 4192];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_max_sentence_length(&_impl_._has_bits_);
          _impl_.max_sentence_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool shuffle_input_sentence = 19 [default = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_shuffle_input_sentence(&_impl_._has_bits_);
          _impl_.shuffle_input_sentence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_sentencepiece_length = 20 [default = 16];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_max_sentencepiece_length(&_impl_._has_bits_);
          _impl_.max_sentencepiece_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool split_by_unicode_script = 21 [default = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          _Internal::set_has_split_by_unicode_script(&_impl_._has_bits_);
          _impl_.split_by_unicode_script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool split_by_whitespace = 22 [default = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          _Internal::set_has_split_by_whitespace(&_impl_._has_bits_);
          _impl_.split_by_whitespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool split_by_number = 23 [default = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_split_by_number(&_impl_._has_bits_);
          _impl_.split_by_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool treat_whitespace_as_suffix = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          _Internal::set_has_treat_whitespace_as_suffix(&_impl_._has_bits_);
          _impl_.treat_whitespace_as_suffix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool split_digits = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 200)) {
          _Internal::set_has_split_digits(&_impl_._has_bits_);
          _impl_.split_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool allow_whitespace_only_pieces = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _Internal::set_has_allow_whitespace_only_pieces(&_impl_._has_bits_);
          _impl_.allow_whitespace_only_pieces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string control_symbols = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_control_symbols();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string user_defined_symbols = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_user_defined_symbols();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool vocabulary_output_piece_score = 32 [default = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 0)) {
          _Internal::set_has_vocabulary_output_piece_score(&_impl_._has_bits_);
          _impl_.vocabulary_output_piece_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool hard_vocab_limit = 33 [default = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_hard_vocab_limit(&_impl_._has_bits_);
          _impl_.hard_vocab_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool use_all_vocab = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_use_all_vocab(&_impl_._has_bits_);
          _impl_.use_all_vocab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool byte_fallback = 35 [default = false];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_byte_fallback(&_impl_._has_bits_);
          _impl_.byte_fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string required_chars = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_required_chars();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 unk_id = 40 [default = 0];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_unk_id(&_impl_._has_bits_);
          _impl_.unk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 bos_id = 41 [default = 1];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_bos_id(&_impl_._has_bits_);
          _impl_.bos_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 eos_id = 42 [default = 2];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_eos_id(&_impl_._has_bits_);
          _impl_.eos_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pad_id = 43 [default = -1];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_pad_id(&_impl_._has_bits_);
          _impl_.pad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string unk_surface = 44 [default = " \342\201\207 "];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_unk_surface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string unk_piece = 45 [default = "<unk>"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_unk_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string bos_piece = 46 [default = "<s>"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_bos_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string eos_piece = 47 [default = "</s>"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_eos_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pad_piece = 48 [default = "<pad>"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_pad_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool train_extremely_large_corpus = 49 [default = false];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_train_extremely_large_corpus(&_impl_._has_bits_);
          _impl_.train_extremely_large_corpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_differential_privacy = 50 [default = false];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_enable_differential_privacy(&_impl_._has_bits_);
          _impl_.enable_differential_privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float differential_privacy_noise_level = 51 [default = 0];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 157)) {
          _Internal::set_has_differential_privacy_noise_level(&_impl_._has_bits_);
          _impl_.differential_privacy_noise_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_differential_privacy_clipping_threshold(&_impl_._has_bits_);
          _impl_.differential_privacy_clipping_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pretokenization_delimiter = 53 [default = ""];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_pretokenization_delimiter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((1600u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrainerSpec::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.TrainerSpec)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->_internal_input_size(); i < n; ++i) {
    const auto& s = this->_internal_input(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_model_prefix();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_model_type(), target);
  }

  // optional int32 vocab_size = 4 [default = 8000];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_vocab_size(), target);
  }

  // repeated string accept_language = 5;
  for (int i = 0, n = this->_internal_accept_language_size(); i < n; ++i) {
    const auto& s = this->_internal_accept_language(i);
    target = stream->WriteString(5, s, target);
  }

  // optional int32 self_test_sample_size = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_self_test_sample_size(), target);
  }

  // optional string input_format = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_input_format();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional float character_coverage = 10 [default = 0.9995];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_character_coverage(), target);
  }

  // optional uint64 input_sentence_size = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_input_sentence_size(), target);
  }

  // optional int32 mining_sentence_size = 12 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_mining_sentence_size(), target);
  }

  // optional int32 training_sentence_size = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        13, this->_internal_training_sentence_size(), target);
  }

  // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        14, this->_internal_seed_sentencepiece_size(), target);
  }

  // optional float shrinking_factor = 15 [default = 0.75];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_shrinking_factor(), target);
  }

  // optional int32 num_threads = 16 [default = 16];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_num_threads(), target);
  }

  // optional int32 num_sub_iterations = 17 [default = 2];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_num_sub_iterations(), target);
  }

  // optional int32 max_sentence_length = 18 [default = 4192];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_max_sentence_length(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool shuffle_input_sentence = 19 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_shuffle_input_sentence(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_sentencepiece_length = 20 [default = 16];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        20, this->_internal_max_sentencepiece_length(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool split_by_unicode_script = 21 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_split_by_unicode_script(), target);
  }

  // optional bool split_by_whitespace = 22 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_split_by_whitespace(), target);
  }

  // optional bool split_by_number = 23 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_split_by_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool treat_whitespace_as_suffix = 24 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_treat_whitespace_as_suffix(), target);
  }

  // optional bool split_digits = 25 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        25, this->_internal_split_digits(), target);
  }

  // optional bool allow_whitespace_only_pieces = 26 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_allow_whitespace_only_pieces(), target);
  }

  // repeated string control_symbols = 30;
  for (int i = 0, n = this->_internal_control_symbols_size(); i < n; ++i) {
    const auto& s = this->_internal_control_symbols(i);
    target = stream->WriteString(30, s, target);
  }

  // repeated string user_defined_symbols = 31;
  for (int i = 0, n = this->_internal_user_defined_symbols_size(); i < n; ++i) {
    const auto& s = this->_internal_user_defined_symbols(i);
    target = stream->WriteString(31, s, target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool vocabulary_output_piece_score = 32 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        32, this->_internal_vocabulary_output_piece_score(), target);
  }

  // optional bool hard_vocab_limit = 33 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        33, this->_internal_hard_vocab_limit(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_all_vocab = 34 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        34, this->_internal_use_all_vocab(), target);
  }

  // optional bool byte_fallback = 35 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        35, this->_internal_byte_fallback(), target);
  }

  // optional string required_chars = 36;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_required_chars();
    target = stream->WriteStringMaybeAliased(36, _s, target);
  }

  // optional int32 unk_id = 40 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        40, this->_internal_unk_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 bos_id = 41 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        41, this->_internal_bos_id(), target);
  }

  // optional int32 eos_id = 42 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        42, this->_internal_eos_id(), target);
  }

  // optional int32 pad_id = 43 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        43, this->_internal_pad_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string unk_surface = 44 [default = " \342\201\207 "];
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_unk_surface();
    target = stream->WriteStringMaybeAliased(44, _s, target);
  }

  // optional string unk_piece = 45 [default = "<unk>"];
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_unk_piece();
    target = stream->WriteStringMaybeAliased(45, _s, target);
  }

  // optional string bos_piece = 46 [default = "<s>"];
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_bos_piece();
    target = stream->WriteStringMaybeAliased(46, _s, target);
  }

  // optional string eos_piece = 47 [default = "</s>"];
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_eos_piece();
    target = stream->WriteStringMaybeAliased(47, _s, target);
  }

  // optional string pad_piece = 48 [default = "<pad>"];
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_pad_piece();
    target = stream->WriteStringMaybeAliased(48, _s, target);
  }

  // optional bool train_extremely_large_corpus = 49 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        49, this->_internal_train_extremely_large_corpus(), target);
  }

  // optional bool enable_differential_privacy = 50 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        50, this->_internal_enable_differential_privacy(), target);
  }

  // optional float differential_privacy_noise_level = 51 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        51, this->_internal_differential_privacy_noise_level(), target);
  }

  // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        52, this->_internal_differential_privacy_clipping_threshold(), target);
  }

  // optional string pretokenization_delimiter = 53 [default = ""];
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_pretokenization_delimiter();
    target = stream->WriteStringMaybeAliased(53, _s, target);
  }

  // Extension range [200, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.TrainerSpec)
  return target;
}

::size_t TrainerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.TrainerSpec)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_input().size());
  for (int i = 0, n = _internal_input().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_input().Get(i));
  }

  // repeated string accept_language = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_accept_language().size());
  for (int i = 0, n = _internal_accept_language().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_accept_language().Get(i));
  }

  // repeated string control_symbols = 30;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_control_symbols().size());
  for (int i = 0, n = _internal_control_symbols().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_control_symbols().Get(i));
  }

  // repeated string user_defined_symbols = 31;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_user_defined_symbols().size());
  for (int i = 0, n = _internal_user_defined_symbols().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_user_defined_symbols().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_model_prefix());
    }

    // optional string input_format = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_input_format());
    }

    // optional string required_chars = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_required_chars());
    }

    // optional string unk_surface = 44 [default = " \342\201\207 "];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_unk_surface());
    }

    // optional string unk_piece = 45 [default = "<unk>"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_unk_piece());
    }

    // optional string bos_piece = 46 [default = "<s>"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_bos_piece());
    }

    // optional string eos_piece = 47 [default = "</s>"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_eos_piece());
    }

    // optional string pad_piece = 48 [default = "<pad>"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pad_piece());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string pretokenization_delimiter = 53 [default = ""];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pretokenization_delimiter());
    }

    // optional int32 self_test_sample_size = 6 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_self_test_sample_size());
    }

    // optional int32 mining_sentence_size = 12 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mining_sentence_size());
    }

    // optional uint64 input_sentence_size = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_input_sentence_size());
    }

    // optional int32 training_sentence_size = 13 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_training_sentence_size());
    }

    // optional bool enable_differential_privacy = 50 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3;
    }

    // optional bool treat_whitespace_as_suffix = 24 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3;
    }

    // optional bool allow_whitespace_only_pieces = 26 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool split_digits = 25 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }

    // optional bool byte_fallback = 35 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional bool use_all_vocab = 34 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3;
    }

    // optional bool train_extremely_large_corpus = 49 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3;
    }

    // optional int32 unk_id = 40 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_unk_id());
    }

    // optional uint64 differential_privacy_clipping_threshold = 52 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_differential_privacy_clipping_threshold());
    }

    // optional float differential_privacy_noise_level = 51 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 6;
    }

    // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_model_type());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 vocab_size = 4 [default = 8000];
    if (cached_has_bits & 0x01000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vocab_size());
    }

    // optional float character_coverage = 10 [default = 0.9995];
    if (cached_has_bits & 0x02000000u) {
      total_size += 5;
    }

    // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
    if (cached_has_bits & 0x04000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_seed_sentencepiece_size());
    }

    // optional float shrinking_factor = 15 [default = 0.75];
    if (cached_has_bits & 0x08000000u) {
      total_size += 5;
    }

    // optional int32 num_threads = 16 [default = 16];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_num_threads());
    }

    // optional int32 num_sub_iterations = 17 [default = 2];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_num_sub_iterations());
    }

    // optional int32 max_sentence_length = 18 [default = 4192];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_max_sentence_length());
    }

    // optional int32 max_sentencepiece_length = 20 [default = 16];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_max_sentencepiece_length());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool shuffle_input_sentence = 19 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3;
    }

    // optional bool split_by_unicode_script = 21 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3;
    }

    // optional bool split_by_number = 23 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3;
    }

    // optional bool split_by_whitespace = 22 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3;
    }

    // optional bool vocabulary_output_piece_score = 32 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3;
    }

    // optional bool hard_vocab_limit = 33 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3;
    }

    // optional int32 bos_id = 41 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_bos_id());
    }

    // optional int32 eos_id = 42 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_eos_id());
    }

  }
  // optional int32 pad_id = 43 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_pad_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainerSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrainerSpec*>(
      &from));
}

void TrainerSpec::MergeFrom(const TrainerSpec& from) {
  TrainerSpec* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.TrainerSpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input()->MergeFrom(from._internal_input());
  _this->_internal_mutable_accept_language()->MergeFrom(from._internal_accept_language());
  _this->_internal_mutable_control_symbols()->MergeFrom(from._internal_control_symbols());
  _this->_internal_mutable_user_defined_symbols()->MergeFrom(from._internal_user_defined_symbols());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_prefix(from._internal_model_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_input_format(from._internal_input_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_required_chars(from._internal_required_chars());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_unk_surface(from._internal_unk_surface());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_unk_piece(from._internal_unk_piece());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_bos_piece(from._internal_bos_piece());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_eos_piece(from._internal_eos_piece());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_pad_piece(from._internal_pad_piece());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_pretokenization_delimiter(from._internal_pretokenization_delimiter());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.self_test_sample_size_ = from._impl_.self_test_sample_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.mining_sentence_size_ = from._impl_.mining_sentence_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.input_sentence_size_ = from._impl_.input_sentence_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.training_sentence_size_ = from._impl_.training_sentence_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.enable_differential_privacy_ = from._impl_.enable_differential_privacy_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.treat_whitespace_as_suffix_ = from._impl_.treat_whitespace_as_suffix_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.allow_whitespace_only_pieces_ = from._impl_.allow_whitespace_only_pieces_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.split_digits_ = from._impl_.split_digits_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.byte_fallback_ = from._impl_.byte_fallback_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.use_all_vocab_ = from._impl_.use_all_vocab_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.train_extremely_large_corpus_ = from._impl_.train_extremely_large_corpus_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.unk_id_ = from._impl_.unk_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.differential_privacy_clipping_threshold_ = from._impl_.differential_privacy_clipping_threshold_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.differential_privacy_noise_level_ = from._impl_.differential_privacy_noise_level_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.model_type_ = from._impl_.model_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.vocab_size_ = from._impl_.vocab_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.character_coverage_ = from._impl_.character_coverage_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.seed_sentencepiece_size_ = from._impl_.seed_sentencepiece_size_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.shrinking_factor_ = from._impl_.shrinking_factor_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.num_threads_ = from._impl_.num_threads_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.num_sub_iterations_ = from._impl_.num_sub_iterations_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.max_sentence_length_ = from._impl_.max_sentence_length_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.max_sentencepiece_length_ = from._impl_.max_sentencepiece_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.shuffle_input_sentence_ = from._impl_.shuffle_input_sentence_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.split_by_unicode_script_ = from._impl_.split_by_unicode_script_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.split_by_number_ = from._impl_.split_by_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.split_by_whitespace_ = from._impl_.split_by_whitespace_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.vocabulary_output_piece_score_ = from._impl_.vocabulary_output_piece_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hard_vocab_limit_ = from._impl_.hard_vocab_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bos_id_ = from._impl_.bos_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.eos_id_ = from._impl_.eos_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_pad_id(from._internal_pad_id());
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrainerSpec::CopyFrom(const TrainerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.TrainerSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainerSpec::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void TrainerSpec::InternalSwap(TrainerSpec* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _internal_mutable_input()->InternalSwap(
      other->_internal_mutable_input());
  _internal_mutable_accept_language()->InternalSwap(
      other->_internal_mutable_accept_language());
  _internal_mutable_control_symbols()->InternalSwap(
      other->_internal_mutable_control_symbols());
  _internal_mutable_user_defined_symbols()->InternalSwap(
      other->_internal_mutable_user_defined_symbols());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_prefix_, lhs_arena,
                                       &other->_impl_.model_prefix_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_format_, lhs_arena,
                                       &other->_impl_.input_format_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.required_chars_, lhs_arena,
                                       &other->_impl_.required_chars_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unk_surface_, lhs_arena,
                                       &other->_impl_.unk_surface_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unk_piece_, lhs_arena,
                                       &other->_impl_.unk_piece_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bos_piece_, lhs_arena,
                                       &other->_impl_.bos_piece_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.eos_piece_, lhs_arena,
                                       &other->_impl_.eos_piece_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pad_piece_, lhs_arena,
                                       &other->_impl_.pad_piece_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pretokenization_delimiter_, lhs_arena,
                                       &other->_impl_.pretokenization_delimiter_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainerSpec, _impl_.pad_id_)
      + sizeof(TrainerSpec::_impl_.pad_id_)
      - PROTOBUF_FIELD_OFFSET(TrainerSpec, _impl_.self_test_sample_size_)>(
          reinterpret_cast<char*>(&_impl_.self_test_sample_size_),
          reinterpret_cast<char*>(&other->_impl_.self_test_sample_size_));
}

std::string TrainerSpec::GetTypeName() const {
  return "sentencepiece.TrainerSpec";
}

// ===================================================================

class NormalizerSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizerSpec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NormalizerSpec, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_precompiled_charsmap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_add_dummy_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remove_extra_whitespaces(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_escape_whitespaces(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_normalization_rule_tsv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NormalizerSpec::NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.NormalizerSpec)
}
NormalizerSpec::NormalizerSpec(const NormalizerSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NormalizerSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.precompiled_charsmap_) {}

    , decltype(_impl_.normalization_rule_tsv_) {}

    , decltype(_impl_.add_dummy_prefix_) {}

    , decltype(_impl_.remove_extra_whitespaces_) {}

    , decltype(_impl_.escape_whitespaces_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.precompiled_charsmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.precompiled_charsmap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.precompiled_charsmap_.Set(from._internal_precompiled_charsmap(), _this->GetArenaForAllocation());
  }
  _impl_.normalization_rule_tsv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.normalization_rule_tsv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.normalization_rule_tsv_.Set(from._internal_normalization_rule_tsv(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.add_dummy_prefix_, &from._impl_.add_dummy_prefix_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.escape_whitespaces_) -
    reinterpret_cast<char*>(&_impl_.add_dummy_prefix_)) + sizeof(_impl_.escape_whitespaces_));
  // @@protoc_insertion_point(copy_constructor:sentencepiece.NormalizerSpec)
}

inline void NormalizerSpec::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.precompiled_charsmap_) {}

    , decltype(_impl_.normalization_rule_tsv_) {}

    , decltype(_impl_.add_dummy_prefix_) { true }

    , decltype(_impl_.remove_extra_whitespaces_) { true }

    , decltype(_impl_.escape_whitespaces_) { true }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.precompiled_charsmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.precompiled_charsmap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.normalization_rule_tsv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.normalization_rule_tsv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NormalizerSpec::~NormalizerSpec() {
  // @@protoc_insertion_point(destructor:sentencepiece.NormalizerSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalizerSpec::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.name_.Destroy();
  _impl_.precompiled_charsmap_.Destroy();
  _impl_.normalization_rule_tsv_.Destroy();
}

void NormalizerSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalizerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.NormalizerSpec)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.precompiled_charsmap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.normalization_rule_tsv_.ClearNonDefaultToEmpty();
    }
    _impl_.add_dummy_prefix_ = true;
    _impl_.remove_extra_whitespaces_ = true;
    _impl_.escape_whitespaces_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NormalizerSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes precompiled_charsmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_precompiled_charsmap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool add_dummy_prefix = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_add_dummy_prefix(&has_bits);
          _impl_.add_dummy_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool remove_extra_whitespaces = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_remove_extra_whitespaces(&has_bits);
          _impl_.remove_extra_whitespaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool escape_whitespaces = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_escape_whitespaces(&has_bits);
          _impl_.escape_whitespaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string normalization_rule_tsv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_normalization_rule_tsv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((1600u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NormalizerSpec::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.NormalizerSpec)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bytes precompiled_charsmap = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_precompiled_charsmap();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional bool add_dummy_prefix = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_add_dummy_prefix(), target);
  }

  // optional bool remove_extra_whitespaces = 4 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_remove_extra_whitespaces(), target);
  }

  // optional bool escape_whitespaces = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_escape_whitespaces(), target);
  }

  // optional string normalization_rule_tsv = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_normalization_rule_tsv();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // Extension range [200, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.NormalizerSpec)
  return target;
}

::size_t NormalizerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.NormalizerSpec)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional bytes precompiled_charsmap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_precompiled_charsmap());
    }

    // optional string normalization_rule_tsv = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_normalization_rule_tsv());
    }

    // optional bool add_dummy_prefix = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool remove_extra_whitespaces = 4 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool escape_whitespaces = 5 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizerSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NormalizerSpec*>(
      &from));
}

void NormalizerSpec::MergeFrom(const NormalizerSpec& from) {
  NormalizerSpec* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.NormalizerSpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_precompiled_charsmap(from._internal_precompiled_charsmap());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_normalization_rule_tsv(from._internal_normalization_rule_tsv());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.add_dummy_prefix_ = from._impl_.add_dummy_prefix_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.remove_extra_whitespaces_ = from._impl_.remove_extra_whitespaces_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.escape_whitespaces_ = from._impl_.escape_whitespaces_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NormalizerSpec::CopyFrom(const NormalizerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.NormalizerSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizerSpec::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void NormalizerSpec::InternalSwap(NormalizerSpec* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.precompiled_charsmap_, lhs_arena,
                                       &other->_impl_.precompiled_charsmap_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.normalization_rule_tsv_, lhs_arena,
                                       &other->_impl_.normalization_rule_tsv_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalizerSpec, _impl_.escape_whitespaces_)
      + sizeof(NormalizerSpec::_impl_.escape_whitespaces_)
      - PROTOBUF_FIELD_OFFSET(NormalizerSpec, _impl_.add_dummy_prefix_)>(
          reinterpret_cast<char*>(&_impl_.add_dummy_prefix_),
          reinterpret_cast<char*>(&other->_impl_.add_dummy_prefix_));
}

std::string NormalizerSpec::GetTypeName() const {
  return "sentencepiece.NormalizerSpec";
}

// ===================================================================

class SelfTestData_Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<SelfTestData_Sample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelfTestData_Sample, _impl_._has_bits_);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelfTestData_Sample::SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.SelfTestData.Sample)
}
SelfTestData_Sample::SelfTestData_Sample(const SelfTestData_Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelfTestData_Sample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_) {}

    , decltype(_impl_.expected_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.input_.Set(from._internal_input(), _this->GetArenaForAllocation());
  }
  _impl_.expected_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expected_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.expected_.Set(from._internal_expected(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SelfTestData.Sample)
}

inline void SelfTestData_Sample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_) {}

    , decltype(_impl_.expected_) {}

  };
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expected_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expected_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelfTestData_Sample::~SelfTestData_Sample() {
  // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData.Sample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfTestData_Sample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.Destroy();
  _impl_.expected_.Destroy();
}

void SelfTestData_Sample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfTestData_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData.Sample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.input_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.expected_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelfTestData_Sample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string expected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_expected();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelfTestData_Sample::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.SelfTestData.Sample)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string input = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_input();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string expected = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_expected();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.SelfTestData.Sample)
  return target;
}

::size_t SelfTestData_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SelfTestData.Sample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_input());
    }

    // optional string expected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_expected());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfTestData_Sample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelfTestData_Sample*>(
      &from));
}

void SelfTestData_Sample::MergeFrom(const SelfTestData_Sample& from) {
  SelfTestData_Sample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData.Sample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_input(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_expected(from._internal_expected());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelfTestData_Sample::CopyFrom(const SelfTestData_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SelfTestData.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfTestData_Sample::IsInitialized() const {
  return true;
}

void SelfTestData_Sample::InternalSwap(SelfTestData_Sample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_, lhs_arena,
                                       &other->_impl_.input_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.expected_, lhs_arena,
                                       &other->_impl_.expected_, rhs_arena);
}

std::string SelfTestData_Sample::GetTypeName() const {
  return "sentencepiece.SelfTestData.Sample";
}

// ===================================================================

class SelfTestData::_Internal {
 public:
};

SelfTestData::SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.SelfTestData)
}
SelfTestData::SelfTestData(const SelfTestData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelfTestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  // @@protoc_insertion_point(copy_constructor:sentencepiece.SelfTestData)
}

inline void SelfTestData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.samples_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelfTestData::~SelfTestData() {
  // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfTestData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _internal_mutable_samples()->~RepeatedPtrField();
}

void SelfTestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfTestData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_mutable_samples()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelfTestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sentencepiece.SelfTestData.Sample samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((1600u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelfTestData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.SelfTestData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sentencepiece.SelfTestData.Sample samples = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // Extension range [200, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.SelfTestData)
  return target;
}

::size_t SelfTestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.SelfTestData)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentencepiece.SelfTestData.Sample samples = 1;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_internal_samples()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfTestData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelfTestData*>(
      &from));
}

void SelfTestData::MergeFrom(const SelfTestData& from) {
  SelfTestData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_samples()->MergeFrom(from._internal_samples());
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelfTestData::CopyFrom(const SelfTestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.SelfTestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfTestData::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void SelfTestData::InternalSwap(SelfTestData* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_samples()->InternalSwap(other->_internal_mutable_samples());
}

std::string SelfTestData::GetTypeName() const {
  return "sentencepiece.SelfTestData";
}

// ===================================================================

class ModelProto_SentencePiece::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelProto_SentencePiece>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelProto_SentencePiece, _impl_._has_bits_);
  static void set_has_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ModelProto_SentencePiece::ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.ModelProto.SentencePiece)
}
ModelProto_SentencePiece::ModelProto_SentencePiece(const ModelProto_SentencePiece& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ModelProto_SentencePiece* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.piece_) {}

    , decltype(_impl_.score_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.piece_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.piece_.Set(from._internal_piece(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sentencepiece.ModelProto.SentencePiece)
}

inline void ModelProto_SentencePiece::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.piece_) {}

    , decltype(_impl_.score_) { 0 }

    , decltype(_impl_.type_) { 1 }

  };
  _impl_.piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.piece_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelProto_SentencePiece::~ModelProto_SentencePiece() {
  // @@protoc_insertion_point(destructor:sentencepiece.ModelProto.SentencePiece)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelProto_SentencePiece::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.piece_.Destroy();
}

void ModelProto_SentencePiece::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelProto_SentencePiece::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto.SentencePiece)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.piece_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.score_ = 0;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelProto_SentencePiece::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string piece = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sentencepiece::ModelProto_SentencePiece_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::sentencepiece::ModelProto_SentencePiece_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((1600u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModelProto_SentencePiece::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.ModelProto.SentencePiece)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string piece = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_piece();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_score(), target);
  }

  // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // Extension range [200, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.ModelProto.SentencePiece)
  return target;
}

::size_t ModelProto_SentencePiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.ModelProto.SentencePiece)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string piece = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_piece());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelProto_SentencePiece::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelProto_SentencePiece*>(
      &from));
}

void ModelProto_SentencePiece::MergeFrom(const ModelProto_SentencePiece& from) {
  ModelProto_SentencePiece* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto.SentencePiece)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_piece(from._internal_piece());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelProto_SentencePiece::CopyFrom(const ModelProto_SentencePiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.ModelProto.SentencePiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto_SentencePiece::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void ModelProto_SentencePiece::InternalSwap(ModelProto_SentencePiece* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.piece_, lhs_arena,
                                       &other->_impl_.piece_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto_SentencePiece, _impl_.type_)
      + sizeof(ModelProto_SentencePiece::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ModelProto_SentencePiece, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

std::string ModelProto_SentencePiece::GetTypeName() const {
  return "sentencepiece.ModelProto.SentencePiece";
}

// ===================================================================

class ModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelProto, _impl_._has_bits_);
  static const ::sentencepiece::TrainerSpec& trainer_spec(const ModelProto* msg);
  static void set_has_trainer_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sentencepiece::NormalizerSpec& normalizer_spec(const ModelProto* msg);
  static void set_has_normalizer_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sentencepiece::SelfTestData& self_test_data(const ModelProto* msg);
  static void set_has_self_test_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sentencepiece::NormalizerSpec& denormalizer_spec(const ModelProto* msg);
  static void set_has_denormalizer_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sentencepiece::TrainerSpec&
ModelProto::_Internal::trainer_spec(const ModelProto* msg) {
  return *msg->_impl_.trainer_spec_;
}
const ::sentencepiece::NormalizerSpec&
ModelProto::_Internal::normalizer_spec(const ModelProto* msg) {
  return *msg->_impl_.normalizer_spec_;
}
const ::sentencepiece::SelfTestData&
ModelProto::_Internal::self_test_data(const ModelProto* msg) {
  return *msg->_impl_.self_test_data_;
}
const ::sentencepiece::NormalizerSpec&
ModelProto::_Internal::denormalizer_spec(const ModelProto* msg) {
  return *msg->_impl_.denormalizer_spec_;
}
ModelProto::ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentencepiece.ModelProto)
}
ModelProto::ModelProto(const ModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ModelProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pieces_){from._impl_.pieces_}
    , decltype(_impl_.trainer_spec_){nullptr}
    , decltype(_impl_.normalizer_spec_){nullptr}
    , decltype(_impl_.self_test_data_){nullptr}
    , decltype(_impl_.denormalizer_spec_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trainer_spec_ = new ::sentencepiece::TrainerSpec(*from._impl_.trainer_spec_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.normalizer_spec_ = new ::sentencepiece::NormalizerSpec(*from._impl_.normalizer_spec_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.self_test_data_ = new ::sentencepiece::SelfTestData(*from._impl_.self_test_data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.denormalizer_spec_ = new ::sentencepiece::NormalizerSpec(*from._impl_.denormalizer_spec_);
  }
  // @@protoc_insertion_point(copy_constructor:sentencepiece.ModelProto)
}

inline void ModelProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pieces_){arena}
    , decltype(_impl_.trainer_spec_){nullptr}
    , decltype(_impl_.normalizer_spec_){nullptr}
    , decltype(_impl_.self_test_data_){nullptr}
    , decltype(_impl_.denormalizer_spec_){nullptr}
  };
}

ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:sentencepiece.ModelProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _internal_mutable_pieces()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.trainer_spec_;
  if (this != internal_default_instance()) delete _impl_.normalizer_spec_;
  if (this != internal_default_instance()) delete _impl_.self_test_data_;
  if (this != internal_default_instance()) delete _impl_.denormalizer_spec_;
}

void ModelProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_mutable_pieces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.trainer_spec_ != nullptr);
      _impl_.trainer_spec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.normalizer_spec_ != nullptr);
      _impl_.normalizer_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.self_test_data_ != nullptr);
      _impl_.self_test_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.denormalizer_spec_ != nullptr);
      _impl_.denormalizer_spec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.TrainerSpec trainer_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trainer_spec(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizer_spec(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.SelfTestData self_test_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_self_test_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_denormalizer_spec(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((1600u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModelProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentencepiece.ModelProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pieces_size()); i < n; i++) {
    const auto& repfield = this->_internal_pieces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .sentencepiece.TrainerSpec trainer_spec = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trainer_spec(this),
        _Internal::trainer_spec(this).GetCachedSize(), target, stream);
  }

  // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::normalizer_spec(this),
        _Internal::normalizer_spec(this).GetCachedSize(), target, stream);
  }

  // optional .sentencepiece.SelfTestData self_test_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::self_test_data(this),
        _Internal::self_test_data(this).GetCachedSize(), target, stream);
  }

  // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::denormalizer_spec(this),
        _Internal::denormalizer_spec(this).GetCachedSize(), target, stream);
  }

  // Extension range [200, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 200, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentencepiece.ModelProto)
  return target;
}

::size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentencepiece.ModelProto)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
  total_size += 1UL * this->_internal_pieces_size();
  for (const auto& msg : this->_internal_pieces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .sentencepiece.TrainerSpec trainer_spec = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trainer_spec_);
    }

    // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normalizer_spec_);
    }

    // optional .sentencepiece.SelfTestData self_test_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.self_test_data_);
    }

    // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.denormalizer_spec_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelProto*>(
      &from));
}

void ModelProto::MergeFrom(const ModelProto& from) {
  ModelProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pieces()->MergeFrom(from._internal_pieces());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_trainer_spec()->::sentencepiece::TrainerSpec::MergeFrom(
          from._internal_trainer_spec());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normalizer_spec()->::sentencepiece::NormalizerSpec::MergeFrom(
          from._internal_normalizer_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_self_test_data()->::sentencepiece::SelfTestData::MergeFrom(
          from._internal_self_test_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_denormalizer_spec()->::sentencepiece::NormalizerSpec::MergeFrom(
          from._internal_denormalizer_spec());
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentencepiece.ModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_pieces()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.trainer_spec_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.normalizer_spec_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.self_test_data_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.denormalizer_spec_->IsInitialized()) return false;
  }
  return true;
}

void ModelProto::InternalSwap(ModelProto* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_pieces()->InternalSwap(other->_internal_mutable_pieces());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.denormalizer_spec_)
      + sizeof(ModelProto::_impl_.denormalizer_spec_)
      - PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.trainer_spec_)>(
          reinterpret_cast<char*>(&_impl_.trainer_spec_),
          reinterpret_cast<char*>(&other->_impl_.trainer_spec_));
}

std::string ModelProto::GetTypeName() const {
  return "sentencepiece.ModelProto";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sentencepiece
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sentencepiece::TrainerSpec*
Arena::CreateMaybeMessage< ::sentencepiece::TrainerSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::TrainerSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::sentencepiece::NormalizerSpec*
Arena::CreateMaybeMessage< ::sentencepiece::NormalizerSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::NormalizerSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::sentencepiece::SelfTestData_Sample*
Arena::CreateMaybeMessage< ::sentencepiece::SelfTestData_Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::SelfTestData_Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::sentencepiece::SelfTestData*
Arena::CreateMaybeMessage< ::sentencepiece::SelfTestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::SelfTestData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentencepiece::ModelProto_SentencePiece*
Arena::CreateMaybeMessage< ::sentencepiece::ModelProto_SentencePiece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::ModelProto_SentencePiece >(arena);
}
template<> PROTOBUF_NOINLINE ::sentencepiece::ModelProto*
Arena::CreateMaybeMessage< ::sentencepiece::ModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentencepiece::ModelProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
